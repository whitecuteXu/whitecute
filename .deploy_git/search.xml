<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue3-composition-api</title>
      <link href="/2022/12/02/vue3-composition-api/"/>
      <url>/2022/12/02/vue3-composition-api/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue3-响应式原理"><a href="#Vue3-响应式原理" class="headerlink" title="Vue3 响应式原理"></a>Vue3 响应式原理</h1><h2 id="ref-amp-reactive"><a href="#ref-amp-reactive" class="headerlink" title="ref &amp; reactive"></a>ref &amp; reactive</h2><p><code>ref</code>使用<code>getter / setter</code> 劫持数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ref</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> refObject= &#123;</span><br><span class="line">        <span class="keyword">get</span> value() &#123;</span><br><span class="line">            track(refObject, <span class="string">'value'</span>);</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">set</span> value(newValue) &#123;</span><br><span class="line">            value = newValue;</span><br><span class="line">            trigger(refObject, <span class="string">'value'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> refObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>reactive</code>使用 <code>Proxy</code> 劫持数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reactive</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj, &#123;</span><br><span class="line">        <span class="keyword">get</span>(target, key) &#123;</span><br><span class="line">            track(target, key);</span><br><span class="line">            <span class="keyword">return</span> target[key];</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">set</span>(target, key, value) &#123;</span><br><span class="line">            target[key] = value;</span><br><span class="line">            trigger(target, key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="track-跟踪"><a href="#track-跟踪" class="headerlink" title="track 跟踪"></a>track 跟踪</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> activeEffect;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">track</span>(<span class="params">target, key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( activeEffect ) &#123;</span><br><span class="line">        <span class="keyword">const</span> effects = getSubscriberForProperty(target, key);</span><br><span class="line">        effects.add(activeEffect);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="trigger-触发"><a href="#trigger-触发" class="headerlink" title="trigger 触发"></a>trigger 触发</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params">target, key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> effects = getSubscriberForProperty(target, key);</span><br><span class="line">    effects.forEach(<span class="function"><span class="params">effect</span> =&gt;</span> effect());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="watchEffect-响应式副作用"><a href="#watchEffect-响应式副作用" class="headerlink" title="watchEffect  响应式副作用"></a>watchEffect  响应式副作用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, watchEffect &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> A0 = ref(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">const</span> A1 = ref(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">const</span> A2 = ref()</span><br><span class="line"></span><br><span class="line">watchEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 追踪 A0 和 A1</span></span><br><span class="line">  A2.value = A0.value + A1.value</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将触发副作用</span></span><br><span class="line">A0.value = <span class="number">2</span></span><br></pre></td></tr></table></figure><p><code>ref</code>或者<code>reactive</code>创建响应式对象,通过<code>watchEffect</code>获取响应式副作用,从而达到响应式的目的。</p><h1 id="响应式的核心"><a href="#响应式的核心" class="headerlink" title="响应式的核心"></a>响应式的核心</h1><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><ul><li>接收任何类型的值</li><li>返回一个<code>get/set</code>包含响应式的<code>.value</code>的对象</li><li>如果<code>value</code>是集合类型会自动使用<code>reactive</code>进行响应式的转化</li></ul><h3 id="ref的解包"><a href="#ref的解包" class="headerlink" title="ref的解包"></a>ref的解包</h3><ul><li>作为顶层属性被访问时,会自动解包,不需要<code>.value</code>,如果不做为上下文的顶级属性时,不会自动解包</li><li>在响应式对象中会自动解包，表现得跟一般属性一致</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> count = ref(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">const</span> state = reactive(&#123;</span><br><span class="line">  count</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(state.count) <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">state.count = <span class="number">1</span></span><br><span class="line"><span class="built_in">console</span>.log(count.value) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><ul><li><code>ref</code>在数组和集合的响应式类型中不会解包</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> books = reactive([ref(<span class="string">'Vue 3 Guide'</span>)])</span><br><span class="line"><span class="comment">// 这里需要 .value</span></span><br><span class="line"><span class="built_in">console</span>.log(books[<span class="number">0</span>].value)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> map = reactive(<span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'count'</span>, ref(<span class="number">0</span>)]]))</span><br><span class="line"><span class="comment">// 这里需要 .value</span></span><br><span class="line"><span class="built_in">console</span>.log(map.get(<span class="string">'count'</span>).value)</span><br></pre></td></tr></table></figure><h2 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h2><ul><li>接收 <code>array</code>, <code>object</code>, <code>map</code>, <code>set</code> 这样的对象集合类型</li><li>vue通过属性的响应式追踪,如果更改了对象集合类型的引用，会导致响应式的丢失</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = reactive(&#123; count: <span class="number">0</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// n 是一个局部变量，同 state.count</span></span><br><span class="line"><span class="comment">// 失去响应性连接</span></span><br><span class="line"><span class="keyword">let</span> n = state.count</span><br><span class="line"><span class="comment">// 不影响原始的 state</span></span><br><span class="line">n++</span><br><span class="line"></span><br><span class="line"><span class="comment">// count 也和 state.count 失去了响应性连接</span></span><br><span class="line"><span class="keyword">let</span> &#123; count &#125; = state</span><br><span class="line"><span class="comment">// 不会影响原始的 state</span></span><br><span class="line">count++</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该函数接收一个普通数字，并且</span></span><br><span class="line"><span class="comment">// 将无法跟踪 state.count 的变化</span></span><br><span class="line">callSomeFunction(state.count)</span><br></pre></td></tr></table></figure><h2 id="computed-计算属性"><a href="#computed-计算属性" class="headerlink" title="computed 计算属性"></a>computed 计算属性</h2><ul><li><code>computed</code>期望接收一个<code>getter</code>函数,返回一个 <strong>计算属性的ref</strong></li><li><code>computed</code>自动追踪函数内的响应式依赖</li><li><code>computed</code>计算属性基于响应式依赖的缓存,当依赖没有被改变,不会去主动执行<code>getter</code>函数</li><li><code>computed</code>默认只有<code>get</code>,我们也可以设置<code>set</code>变成一个可写的计算属性</li><li><code>computed</code>的<code>get</code>中不要包含其他的副作用, 请求以及操作DOM</li></ul><h2 id="watchEffect-侦听器"><a href="#watchEffect-侦听器" class="headerlink" title="watchEffect 侦听器"></a>watchEffect 侦听器</h2><p>立即运行一个函数,同时响应式的跟踪其依赖,并当依赖更新时重新运行函数</p><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">watchEffect</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  effect: (onCleanup: OnCleanup) =&gt; <span class="built_in">void</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  options?: WatchEffectOptions</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">StopHandle</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">type</span> <span class="title">OnCleanup</span> = (<span class="params">cleanupFn: () =&gt; <span class="built_in">void</span></span>) =&gt; <span class="title">void</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">interface</span> <span class="title">WatchEffectOptions</span> </span>&#123;</span><br><span class="line">  flush?: <span class="string">'pre'</span> | <span class="string">'post'</span> | <span class="string">'sync'</span> <span class="comment">// 默认：'pre'</span></span><br><span class="line">  onTrack?: <span class="function">(<span class="params">event: DebuggerEvent</span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">  onTrigger?: <span class="function">(<span class="params">event: DebuggerEvent</span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> StopHandle = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">void</span></span><br></pre></td></tr></table></figure><ul><li><code>effect</code>: 要执行的副作用函数,这个函数也包含一个参数,这个参数再下一次调用前被执行,用于执行清除无效的副作用</li><li><code>options</code>: 可选参数,用来调整副作用的刷新时机以及调试依赖<ul><li><code>flush</code>: 侦听器执行时机<ul><li>pre: 组件渲染前执行</li><li>post: 延迟到渲染后执行</li><li>sync: 响应依赖发生改变后立马执行</li></ul></li><li>onTrack:</li><li>onTrigger:</li></ul></li><li><code>StopHandle</code>: 停止副作用函数</li></ul><h2 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 侦听单个来源</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">watch</span>&lt;<span class="title">T</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  source: WatchSource&lt;T&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  callback: WatchCallback&lt;T&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  options?: WatchOptions</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">StopHandle</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">// 侦听多个来源</span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">watch</span>&lt;<span class="title">T</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  sources: WatchSource&lt;T&gt;[],</span></span></span><br><span class="line"><span class="function"><span class="params">  callback: WatchCallback&lt;T[]&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  options?: WatchOptions</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">StopHandle</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">type</span> <span class="title">WatchCallback</span>&lt;<span class="title">T</span>&gt; = (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  value: T,</span></span></span><br><span class="line"><span class="function"><span class="params">  oldValue: T,</span></span></span><br><span class="line"><span class="function"><span class="params">  onCleanup: (cleanupFn: (</span>) =&gt; <span class="title">void</span>) =&gt; <span class="title">void</span></span></span><br><span class="line"><span class="function">) =&gt; <span class="title">void</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">type</span> <span class="title">WatchSource</span>&lt;<span class="title">T</span>&gt; =</span></span><br><span class="line"><span class="function">  | <span class="title">Ref</span>&lt;<span class="title">T</span>&gt; // <span class="title">ref</span></span></span><br><span class="line"><span class="function">  | (<span class="params">(</span>) =&gt; <span class="title">T</span>) // <span class="title">getter</span>  一个函数返回一个值</span></span><br><span class="line"><span class="function">  | <span class="title">T</span> <span class="title">extends</span> <span class="title">object</span>   // 一个对象  </span></span><br><span class="line"><span class="function">  ? <span class="title">T</span></span></span><br><span class="line"><span class="function">  : <span class="title">never</span> // 响应式对象</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">interface</span> <span class="title">WatchOptions</span> <span class="title">extends</span> <span class="title">WatchEffectOptions</span> </span>&#123;</span><br><span class="line">  immediate?: boolean <span class="comment">// 默认：false</span></span><br><span class="line">  deep?: boolean <span class="comment">// 默认：false</span></span><br><span class="line">  flush?: <span class="string">'pre'</span> | <span class="string">'post'</span> | <span class="string">'sync'</span> <span class="comment">// 默认：'pre'</span></span><br><span class="line">  onTrack?: <span class="function">(<span class="params">event: DebuggerEvent</span>) =&gt;</span> <span class="keyword">void</span></span><br><span class="line">  onTrigger?: <span class="function">(<span class="params">event: DebuggerEvent</span>) =&gt;</span> <span class="keyword">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>immediate： 在执行器创建时就执行</li><li>deep： 如果时对象进行深度遍历</li><li>flush：回调的刷新时机</li><li>onTrack： 侦听侦听器的依赖</li><li>onTrigger：侦听侦听器的依赖</li></ul><h1 id="响应式工具函数"><a href="#响应式工具函数" class="headerlink" title="响应式工具函数"></a>响应式工具函数</h1><h2 id="isRef"><a href="#isRef" class="headerlink" title="isRef()"></a>isRef()</h2><p>检查某个值是否是<code>ref</code>返回<code>true/false</code></p><h2 id="unref"><a href="#unref" class="headerlink" title="unref()"></a>unref()</h2><p>如果参数是<code>ref</code>则返回內部值<code>.value</code>,如果不是则返回它自身</p><h2 id="toRef"><a href="#toRef" class="headerlink" title="toRef()"></a>toRef()</h2><p>基于响应式对象的属性, 创建一个对应的<code>ref对象</code>,修改响应式对象上属性的值,将更新<code>ref对象</code>的值,反之亦然</p><h2 id="toRefs"><a href="#toRefs" class="headerlink" title="toRefs()"></a>toRefs()</h2><p>将响应式对象转化为普通对象,这个普通对象上每个属性都转化为对应的<code>ref</code>, 都是使用的<code>toRef()</code>转化</p><ul><li>只转化可枚举属性,不存在得属性使用<code>toRef()</code></li><li>最佳实践为 在组合式函数返回使用<code>toRefs()</code>,在使用时<strong>结构/展开</strong>而不丢失其响应式</li></ul><h2 id="isProxy"><a href="#isProxy" class="headerlink" title="isProxy()"></a>isProxy()</h2><p>检查对象是否是 <code>reactive()、readonly()、shallowReactive() 或 shallowReadonly()</code>创建的响应式对象,返回<code>true/false</code></p><h2 id="isReactive"><a href="#isReactive" class="headerlink" title="isReactive()"></a>isReactive()</h2><p>检查对象是否由<code>reactive(), shallowReactive()</code>创建得响应式对象,返回<code>true/false</code></p><h2 id="isReadonly"><a href="#isReadonly" class="headerlink" title="isReadonly()"></a>isReadonly()</h2><p>检查对象是否由<code>readonly(), shallowReadonly()</code>创建得响应式对象,返回<code>true/false</code></p><ul><li>readonly, shallowReadonly是没有<code>set</code>的<code>computed</code>的<code>Ref</code></li></ul><h1 id="响应式的进阶"><a href="#响应式的进阶" class="headerlink" title="响应式的进阶"></a>响应式的进阶</h1><h2 id="shallowRef"><a href="#shallowRef" class="headerlink" title="shallowRef()"></a>shallowRef()</h2><p>只会对<code>.value</code>的访问进行响应式,不会对其属性进行递归深层递归变为响应式</p><h2 id="triggerRef"><a href="#triggerRef" class="headerlink" title="triggerRef()"></a>triggerRef()</h2><p>强制触发一个<code>shallowRef()</code>对象属性的值改变,监测是递归的</p><h2 id="customRef"><a href="#customRef" class="headerlink" title="customRef()"></a>customRef()</h2><p>自定义一个<code>Ref</code>, 自定义其响应式的 <strong>追踪依赖</strong> 以及 <strong>更新触发</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">customRef</span>&lt;<span class="title">T</span>&gt;(<span class="params">factory: CustomRefFactory&lt;T&gt;</span>): <span class="title">Ref</span>&lt;<span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">type</span> <span class="title">CustomRefFactory</span>&lt;<span class="title">T</span>&gt; = (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  track: (</span>) =&gt; <span class="title">void</span>,</span></span><br><span class="line"><span class="function">  <span class="title">trigger</span>: (<span class="params"></span>) =&gt; <span class="title">void</span></span></span><br><span class="line"><span class="function">) =&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">get</span>: () =&gt; T</span><br><span class="line">  <span class="keyword">set</span>: (value: T) =&gt; void</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>参数为<code>track</code>和<code>trigger</code>, 一般 <code>track</code>实在 <code>get</code>中执行，<code>trigger</code>是在<code>set</code>中执行, 自己控制 依赖追踪 和 触发更新的时机</li><li><code>get/set</code> 函数中可以使用异步</li></ul><h2 id="shallowReactive"><a href="#shallowReactive" class="headerlink" title="shallowReactive"></a>shallowReactive</h2><p>只对对象的根属性进行响应式,不会进行深层次的处理, 意味着值为<code>ref</code>的属性不会<strong>自动解包</strong>(template中解包)</p><h2 id="shallowReadonly"><a href="#shallowReadonly" class="headerlink" title="shallowReadonly"></a>shallowReadonly</h2><p>只对对象的根属性进行响应式只读,不会进行深层次的处理, 意味着值为<code>ref</code>的属性不会<strong>自动解包</strong>(template中解包),<br>对其非根属性可以进行改写但是是非响应式的</p><h2 id="toRaw"><a href="#toRaw" class="headerlink" title="toRaw"></a>toRaw</h2><p><code>toRaw()</code>可返回一个<code>reactive(), readonly(), shallowReactive(), shallowReadonly()</code>得原始对象</p><ul><li><code>toRaw()</code>返回得对象,读取不会影响跟踪依赖/代理访问,写入不会影响更新</li><li>不建议保持对原始对应得保持使用,谨慎使用</li></ul><h2 id="markRaw"><a href="#markRaw" class="headerlink" title="markRaw"></a>markRaw</h2><p><code>markRaw()</code>标记一个对象不可被代理,返回该对象本身</p><h2 id="effectScope"><a href="#effectScope" class="headerlink" title="effectScope"></a>effectScope</h2><p>创建一个<code>effect</code>的作用域,对副作用<code>(computed, watch, watchEffect)</code>进行统一处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> scope = effectScope()</span><br><span class="line"></span><br><span class="line">scope.run(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> doubled = computed(<span class="function"><span class="params">()</span> =&gt;</span> counter.value * <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">  watch(doubled, () =&gt; <span class="built_in">console</span>.log(doubled.value))</span><br><span class="line"></span><br><span class="line">  watchEffect(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Count: '</span>, doubled.value))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理掉当前作用域内的所有 effect</span></span><br><span class="line">scope.stop()</span><br></pre></td></tr></table></figure><h2 id="getCurrentScope"><a href="#getCurrentScope" class="headerlink" title="getCurrentScope"></a>getCurrentScope</h2><p>返回当前活跃的<code>effectScope</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCurrentScope</span>(<span class="params"></span>): <span class="title">EffectScope</span> | <span class="title">undefined</span></span></span><br></pre></td></tr></table></figure><h2 id="onScopeDispose"><a href="#onScopeDispose" class="headerlink" title="onScopeDispose"></a>onScopeDispose</h2><p>在当前或与的<code>effectScope</code>作用域上注册一个回调函数,当前的<code>effect</code>作用域停止时会回调这个函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onScopeDispose</span>(<span class="params">fn: (</span>) =&gt; <span class="title">void</span>): <span class="title">void</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> composition </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-深度优先&amp;广度优先</title>
      <link href="/2022/01/11/%E7%AE%97%E6%B3%95-%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88-%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88/"/>
      <url>/2022/01/11/%E7%AE%97%E6%B3%95-%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88-%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88/</url>
      
        <content type="html"><![CDATA[<h1 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h1><h2 id="深度遍历"><a href="#深度遍历" class="headerlink" title="深度遍历"></a>深度遍历</h2><p>深度遍历的核心在于：沿着一条分支不停的遍历下去,通过递归或者栈的特性（先进先出）<br>DFS适合目标明确。</p><h2 id="广度遍历"><a href="#广度遍历" class="headerlink" title="广度遍历"></a>广度遍历</h2><p>广度遍历的核心在于：根据层级一层层的遍历下去，通过队列的特性（先进先出）<br>BFS适合大范围的寻找。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个是要进行遍历的树形节点  </span></span><br><span class="line"><span class="keyword">const</span> root = [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"id"</span>:<span class="number">1</span>,</span><br><span class="line">      <span class="string">"pid"</span>:<span class="literal">null</span>,</span><br><span class="line">      <span class="string">"key"</span>:<span class="number">1</span>,</span><br><span class="line">      <span class="string">"title"</span>:<span class="string">"1-1111"</span>,</span><br><span class="line">      <span class="string">"children"</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"id"</span>:<span class="number">2</span>,</span><br><span class="line">          <span class="string">"pid"</span>:<span class="number">1</span>,</span><br><span class="line">          <span class="string">"key"</span>:<span class="number">2</span>,</span><br><span class="line">          <span class="string">"title"</span>:<span class="string">"2-1111"</span>,</span><br><span class="line">          <span class="string">"children"</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">"id"</span>:<span class="number">4</span>,</span><br><span class="line">              <span class="string">"pid"</span>:<span class="number">2</span>,</span><br><span class="line">              <span class="string">"key"</span>:<span class="number">4</span>,</span><br><span class="line">              <span class="string">"title"</span>:<span class="string">"8-1111"</span>,</span><br><span class="line">              <span class="string">"children"</span>:[]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">"id"</span>:<span class="number">5</span>,</span><br><span class="line">              <span class="string">"pid"</span>:<span class="number">2</span>,</span><br><span class="line">              <span class="string">"key"</span>:<span class="number">5</span>,</span><br><span class="line">              <span class="string">"title"</span>:<span class="string">"9-1111"</span>,</span><br><span class="line">              <span class="string">"children"</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="string">"id"</span>:<span class="number">7</span>,</span><br><span class="line">                  <span class="string">"pid"</span>:<span class="number">5</span>,</span><br><span class="line">                  <span class="string">"key"</span>:<span class="number">7</span>,</span><br><span class="line">                  <span class="string">"title"</span>:<span class="string">"5-1111"</span>,</span><br><span class="line">                  <span class="string">"children"</span>:[]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="string">"id"</span>:<span class="number">8</span>,</span><br><span class="line">                  <span class="string">"pid"</span>:<span class="number">5</span>,</span><br><span class="line">                  <span class="string">"key"</span>:<span class="number">8</span>,</span><br><span class="line">                  <span class="string">"title"</span>:<span class="string">"8-1111"</span>,</span><br><span class="line">                  <span class="string">"children"</span>:[]</span><br><span class="line">                &#125;,</span><br><span class="line">              ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">"id"</span>:<span class="number">6</span>,</span><br><span class="line">              <span class="string">"pid"</span>:<span class="number">2</span>,</span><br><span class="line">              <span class="string">"key"</span>:<span class="number">6</span>,</span><br><span class="line">              <span class="string">"title"</span>:<span class="string">"10-1111"</span>,</span><br><span class="line">              <span class="string">"children"</span>:[]</span><br><span class="line">            &#125;,</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"id"</span>:<span class="number">3</span>,</span><br><span class="line">          <span class="string">"pid"</span>:<span class="number">1</span>,</span><br><span class="line">          <span class="string">"key"</span>:<span class="number">3</span>,</span><br><span class="line">          <span class="string">"title"</span>:<span class="string">"9-1111"</span>,</span><br><span class="line">          <span class="string">"children"</span>:[]</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 深度优先-递归</span></span><br><span class="line"><span class="keyword">const</span> searchKeyByRecursion = <span class="function">(<span class="params">targetKey, tree, ids</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">search</span>(<span class="params">ary, idList</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( <span class="built_in">Array</span>.isArray(ary) ) &#123;</span><br><span class="line">            ary.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> ( targetKey === item.key ) &#123;</span><br><span class="line">                    idList.push(item.id);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> ( <span class="built_in">Array</span>.isArray(item.children) &amp;&amp;  item.children.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    search(item.children, idList);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    search(tree, ids);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const  ids = [];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// searchKeyByRecursion(7, root, ids);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 深度优先 - 栈</span></span><br><span class="line"><span class="keyword">const</span>  searchkeyByStack =  <span class="function">(<span class="params">targetKey, tree, ids</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">search</span>(<span class="params">ary, idList</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> stack = [];</span><br><span class="line">    <span class="keyword">if</span>( <span class="built_in">Array</span>.isArray(ary) ) &#123;</span><br><span class="line">      <span class="keyword">for</span> ( <span class="keyword">let</span> item <span class="keyword">of</span> ary ) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(item.id);</span><br><span class="line">        stack.push(item);</span><br><span class="line">        <span class="keyword">while</span>( stack.length &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">          <span class="keyword">const</span> whileItem = stack.pop();</span><br><span class="line">          <span class="built_in">console</span>.log(whileItem.id);</span><br><span class="line">          <span class="keyword">if</span> ( whileItem.key === targetKey ) &#123;</span><br><span class="line">            idList.push(whileItem.id)</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> ( whileItem.children &amp;&amp; <span class="built_in">Array</span>.isArray(whileItem.children) &amp;&amp; whileItem.children.length &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">           <span class="keyword">for</span> ( <span class="keyword">let</span> childItem <span class="keyword">of</span> whileItem.children ) &#123;</span><br><span class="line">            stack.push(childItem);</span><br><span class="line">           &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  search(tree, ids);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span>  ids1 = [];</span><br><span class="line"></span><br><span class="line">searchkeyByStack(<span class="number">7</span>, root, ids1);</span><br><span class="line"><span class="built_in">console</span>.log(ids1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 广度优先</span></span><br><span class="line"><span class="keyword">const</span>  searchkeyByQueue =  <span class="function">(<span class="params">targetKey, tree, ids</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">search</span>(<span class="params">ary, idList</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> queue = [];</span><br><span class="line">    <span class="keyword">if</span>( <span class="built_in">Array</span>.isArray(ary) ) &#123;</span><br><span class="line">      <span class="keyword">for</span> ( <span class="keyword">let</span> item <span class="keyword">of</span> ary ) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(item.id);</span><br><span class="line">        queue.push(item);</span><br><span class="line">        <span class="keyword">while</span>( queue.length &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">          <span class="keyword">const</span> whileItem = queue.shift();</span><br><span class="line">          <span class="built_in">console</span>.log(whileItem.id);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> ( whileItem.key === targetKey ) &#123;</span><br><span class="line">            idList.push(whileItem.id)</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> ( whileItem.children &amp;&amp; <span class="built_in">Array</span>.isArray(whileItem.children) &amp;&amp; whileItem.children.length &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">           <span class="keyword">for</span> ( <span class="keyword">let</span> childItem <span class="keyword">of</span> whileItem.children ) &#123;</span><br><span class="line">            queue.push(childItem);</span><br><span class="line">           &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  search(tree, ids);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span>  ids = [];</span><br><span class="line"></span><br><span class="line">searchkeyByQueue(<span class="number">7</span>, root, ids);</span><br><span class="line"><span class="built_in">console</span>.log(ids)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-迭代器模式</title>
      <link href="/2021/10/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2021/10/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h1>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-中介者模式</title>
      <link href="/2021/09/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2021/09/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h1><p>中介模式是通过一个中介者对象来减少对象之间的混乱关系,减少对象与对象之间的耦合。</p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><blockquote><p>古代有户部，兵部，工部<br>天灾，需要户部处理赈灾，需要拉上兵部处理可能出现的叛乱，工部需要重建。<br>边祸，需要兵部处理反击，需要拉上户部筹集军饷，需要工部修建抵抗工事。<br>新行工，需要工部负责建造，需要拉上户部筹集资金，需要兵部出人建造。</p></blockquote><h2 id="无中介者模式"><a href="#无中介者模式" class="headerlink" title="无中介者模式"></a>无中介者模式</h2><p>户部</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line">    dealDisaster() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"负责赈灾相关事宜"</span>);</span><br><span class="line">        <span class="keyword">const</span> defense = <span class="keyword">new</span> Defense();</span><br><span class="line">        defense.selfFun();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> ministry = <span class="keyword">new</span> Ministry();</span><br><span class="line">        ministry.selfFun();</span><br><span class="line">    &#125;,</span><br><span class="line">    selfFun() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"筹集资金"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>兵部</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Defense</span> </span>&#123;</span><br><span class="line">    fight() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"负责抵御外族入侵"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> department = <span class="keyword">new</span> Department();</span><br><span class="line">        department.selfFun();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> ministry = <span class="keyword">new</span> Ministry();</span><br><span class="line">        ministry.selfFun();</span><br><span class="line">    &#125;,</span><br><span class="line">    selfFun() &#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">"出人出力"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工部</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ministry</span> </span>&#123;</span><br><span class="line">    build() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"负责行宫建造"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> department = <span class="keyword">new</span> Department();</span><br><span class="line">        department.selfFun();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> defense = <span class="keyword">new</span> Defense();</span><br><span class="line">        defense.selfFun();</span><br><span class="line">    &#125;,</span><br><span class="line">    selfFUn() &#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">"出图出设计"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事情的发展</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> department = <span class="keyword">new</span> Department();</span><br><span class="line">department.dealDisaster();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> defense = <span class="keyword">new</span> Defense();</span><br><span class="line">defense.fight();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ministry = <span class="keyword">new</span> Ministry();</span><br><span class="line">ministry.build();</span><br></pre></td></tr></table></figure><p>三个部门内部自己协同沟通，暂时未见什么问题。<br>但是随着部门的增加，必然会导致其内部关联关系非常多，导致以后维护非常混乱。</p><h3 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h3><blockquote><p>尚书省去充当中介者</p></blockquote><p>定义抽象的中介者</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">interface AbstractMediator &#123;</span><br><span class="line">    department: Department,</span><br><span class="line">    defense: Defense,</span><br><span class="line">    ministry: Ministry,</span><br><span class="line">    dealThing: <span class="function">(<span class="params">code: number</span>) =&gt;</span> voide;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span>  <span class="title">Mediator</span> <span class="title">implements</span> <span class="title">AbstractMediator</span> </span>&#123;</span><br><span class="line">    department: Department,</span><br><span class="line">    defense: Defense ,</span><br><span class="line">    ministry: Ministry</span><br><span class="line"></span><br><span class="line">    DEPARTMENT_CODE=<span class="number">1</span>;</span><br><span class="line">    DEFENSE_CODE=<span class="number">2</span>;</span><br><span class="line">    MINISTRY_CODE=<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.department = <span class="keyword">new</span> Department(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.defense = <span class="keyword">new</span> Defense(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.ministry = <span class="keyword">new</span> Ministry(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 中介者最主要的方法，处理多个对象间的关系</span></span><br><span class="line"></span><br><span class="line">    dealThing(code: number) &#123;</span><br><span class="line">        swich(code) &#123;</span><br><span class="line">            <span class="keyword">case</span> DEPARTMENT_CODE:</span><br><span class="line">                <span class="keyword">this</span>.dealDisaster();</span><br><span class="line">            <span class="keyword">case</span> DEFENSE_CODE:</span><br><span class="line">                <span class="keyword">this</span>.fight();</span><br><span class="line">            <span class="keyword">case</span> MINISTRY_CODE:</span><br><span class="line">                <span class="keyword">this</span>.buildPalace();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dealDisaster() &#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">"负责赈灾相关事宜"</span>);</span><br><span class="line">         <span class="keyword">this</span>.defense.selfFunction();</span><br><span class="line">         <span class="keyword">this</span>.ministry.selfFunction();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fight() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"抵御入侵"</span>);</span><br><span class="line">        <span class="keyword">this</span>.department.selfFunction();</span><br><span class="line">        <span class="keyword">this</span>.ministry.selfFunction();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildPalace() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"修建行宫"</span>);</span><br><span class="line">        <span class="keyword">this</span>.defense.selfFunction();</span><br><span class="line">        <span class="keyword">this</span>.department.selfFunction();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义部门</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractColleague</span>  </span>&#123;</span><br><span class="line">    protected abstractMediator: AbstractMediator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(abstractMediator: AbstractMediator ) &#123;</span><br><span class="line">        <span class="keyword">this</span>.abstractMediator = abstractMediator;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Department</span> <span class="title">extend</span> <span class="title">AbstractColleague</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(abstractMediator: AbstractMediator ) &#123;</span><br><span class="line">        <span class="keyword">super</span>(abstractMediator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dealDisaser() &#123;</span><br><span class="line">        <span class="keyword">super</span>.abstractMediator.dealThing(Mediator.DEPARTMENT_CODE)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    selfFunction() &#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">"筹集资金"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Defense</span> <span class="title">extend</span> <span class="title">AbstractColleague</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(abstractMediator: AbstractMediator ) &#123;</span><br><span class="line">        <span class="keyword">super</span>(abstractMediator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dealDisaser() &#123;</span><br><span class="line">        <span class="keyword">super</span>.abstractMediator.dealThing(Mediator.DEFENSE_CODE)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    selfFunction() &#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">"出人出力"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ministry</span> <span class="title">extend</span> <span class="title">AbstractColleague</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(abstractMediator: AbstractMediator ) &#123;</span><br><span class="line">        <span class="keyword">super</span>(abstractMediator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dealDisaser() &#123;</span><br><span class="line">        <span class="keyword">super</span>.abstractMediator.dealThing(Mediator.MINISTRY_CODE)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    selfFunction() &#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">"出图出设计"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际应用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">bstractMediator abstractMediator=<span class="keyword">new</span> Mediator();</span><br><span class="line"><span class="comment">//发生天灾了，户部麻烦了，需要解决问题</span></span><br><span class="line">Department department=<span class="keyword">new</span> Department(abstractMediator);</span><br><span class="line">department.dealDisaster();</span><br><span class="line"><span class="comment">//要打仗了，兵部的活来了</span></span><br><span class="line">Defense defense=<span class="keyword">new</span> Defense(abstractMediator);</span><br><span class="line">defense.fight();</span><br><span class="line"><span class="comment">//皇帝发话了，工部赶紧建行宫</span></span><br><span class="line">Ministry ministry=<span class="keyword">new</span> Ministry(abstractMediator);</span><br><span class="line">ministry.buildPalace();</span><br></pre></td></tr></table></figure><p>总结：</p><p>优点：减少了耦合,将原来的实例从一对多的关系，变为一对一的关系。</p><p>缺点：随着依赖的实例的增多，中介者会变得臃肿不堪。</p><p>与观察者模式的区别：</p><ol><li><p>中介者模式，各个依赖的实例不需要相互之间有交集，只需要中介者做交互。</p></li><li><p>观察者模式，只是强调同事类之间的关系，而观察这模式，同事类只能订阅。</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域</title>
      <link href="/2021/08/31/%E8%B7%A8%E5%9F%9F/"/>
      <url>/2021/08/31/%E8%B7%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><p>当我们在面试过程中,会被问道,为什么会跨域,跨域的几种解决方式。<br>甚至面试官会问到：跨域是需要客户端与服务端一起解决的，当服务端不去配合，前端怎么解决？</p><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><p>协议不同,域名不同,端口号不同都会发生跨域。跨域是浏览器的安全机制,服务端是不存在跨域的。</p><h2 id="跨域的几种解决方案"><a href="#跨域的几种解决方案" class="headerlink" title="跨域的几种解决方案"></a>跨域的几种解决方案</h2><h3 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>凡是拥有 <code>src</code>属性的都拥有跨域的能力例如：<code>img</code> <code>iframe</code> <code>script</code></p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://youserver.com/server.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> flightHandler = <span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">          alert(<span class="string">'想要显示的数据是：code '</span> + data.code + <span class="string">'count ;'</span> + data.count + <span class="string">'.'</span>);</span></span><br><span class="line">      &#125;;</span><br><span class="line"><span class="actionscript">      <span class="comment">// 提供jsonp服务的url地址（不管是什么类型的地址，最终生成的返回值都是一段javascript代码）</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> url = <span class="string">"http://flightQuery.com/jsonp/flightResult.aspx?callback=flightHandler"</span>;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 创建script标签，设置其属性</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span></span><br><span class="line"><span class="actionscript">      script.setAttribute(<span class="string">'src'</span>, url);</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 把script标签加入head，此时调用开始</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(script); </span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>服务端返回的数据数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">localHandler(&#123;</span><br><span class="line">    code: <span class="string">'1111'</span>,</span><br><span class="line">    count: <span class="number">234</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ol><li>动态添加<code>&lt;script&gt;</code>标签来获取服务器提供的内容。</li><li>服务端会去调用客户端的函数并传入参数。</li></ol><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>跨域资源共享(CORS),通过利用请求头告诉浏览器，让其运行在一个domain的web应用可以请求不同源服务器上的资源。</p><h4 id="预检请求"><a href="#预检请求" class="headerlink" title="预检请求"></a>预检请求</h4><blockquote><p>预检请求是客户端发送一个option请求到服务端,获知是否允许该真实的请求。</p></blockquote><p>什么情况下会发生预检请求<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1. 使用以下的HTTP请求方法</span><br><span class="line">    PUT</span><br><span class="line">    DELETE</span><br><span class="line">    CONNECT</span><br><span class="line">    OPTIONS</span><br><span class="line">    TRACE</span><br><span class="line">    PATCH</span><br><span class="line">2. Content-Type不属于以下的类型</span><br><span class="line">    application&#x2F;x-www-form-urlenload</span><br><span class="line">    multipart&#x2F;form-data</span><br><span class="line">    text&#x2F;plain</span><br><span class="line">3. 请求头包含自定义请求的</span><br><span class="line">    比如含有 Authorization, token 作为授权的字段</span><br></pre></td></tr></table></figure></p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="预检请求-1"><a href="#预检请求-1" class="headerlink" title="预检请求"></a>预检请求</h4><p>客户端</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Origin: http://foo.explame                                      // 说明来源</span><br><span class="line">Access-Control-Request-Method: POST                             // 说明正式的请求方法</span><br><span class="line">Access-Control-Request-Headers: anthorization-bearer, user-name // 告知自定义的字段</span><br></pre></td></tr></table></figure><p>服务端</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: http://foo.explame                 // 说明正式的请求来源</span><br><span class="line">Access-Control-Allow-Methods: POST,GET,OPTIONS                  // 说明支持的请求跨域方法</span><br><span class="line">Access-Control-Allow-Headers:anthorization-bearer, user-name    // 说明接受的自定义请求头</span><br><span class="line">Access-Control-Max-Age: 86400                                   // 说明预检请求结果可以被缓存多长时间</span><br></pre></td></tr></table></figure><h4 id="正式请求"><a href="#正式请求" class="headerlink" title="正式请求"></a>正式请求</h4><p>客户端</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">authorization-bearer: djfojoasdjf-sdfkj-sdfsd</span><br><span class="line">user-name: 222222222AA222</span><br><span class="line">Origin: http://foo.explame</span><br><span class="line">Referer: http://foo.explame/</span><br></pre></td></tr></table></figure><p>服务端</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: "*"</span><br><span class="line">Access-Control-Allow-Methods: "*"</span><br></pre></td></tr></table></figure><h4 id="增加凭证"><a href="#增加凭证" class="headerlink" title="增加凭证"></a>增加凭证</h4><p>客户端</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.defaults.withCredentials = true</span><br></pre></td></tr></table></figure><p>客户端正式请求头</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line">Cookie: pageAccess=2</span><br></pre></td></tr></table></figure><p>服务端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 导入包：import javax.servlet.http.HttpServletResponse;</span></span><br><span class="line"><span class="comment"> * 接口参数中定义：HttpServletResponse response</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 允许跨域访问的域名：若有端口需写全（协议+域名+端口），若没有端口末尾不用加'/'</span></span><br><span class="line">response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"http://www.domain1.com"</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 允许前端带认证cookie：启用此项后，上面的域名不能为'*'，必须指定具体的域名，否则浏览器会提示</span></span><br><span class="line">response.setHeader(<span class="string">"Access-Control-Allow-Credentials"</span>, <span class="string">"true"</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 提示OPTIONS预检时，后端需要设置的两个常用自定义头</span></span><br><span class="line">response.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"Content-Type,X-Requested-With"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: http://foo.example</span><br><span class="line">Access-Control-Allow-Credentials: true</span><br><span class="line">Set-Cookie: pageAccess=3; expires=Wed, 31-Dec-2008 01:34:53 GMT</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>当客户端设置了withGredential,而服务端未携带 <code>Access-Control-Allow-Credentials: true</code>,浏览器不会讲请求内容发送给请求者。</li><li>客户端携带了Cookie信息，服务端返回的 <code>Access-Control-Allow-Origin: *</code>，请求将会失败。返回的<code>Access-Control-Allow-Origin:http://foo.expample</code>，则会成功。</li></ol><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><h4 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h4><p>同源策略只是浏览器安全策略，不是Http协议的一部分，服务端调用接口只是使用http协议，不会执行JS脚本，不需要同源策略，也就不存在跨域问题。</p><h4 id="vue的反向代理"><a href="#vue的反向代理" class="headerlink" title="vue的反向代理"></a>vue的反向代理</h4><p>webpack的跨域实际上是借用 <code>webpack+node+webpack-dev-server</code>作为一个跨域代理,<br>并且由于开发环境下vue的渲染也是使用<code>webpack-dev-server</code>,所以页面与代理服务器不存在跨域,<br>不需要设置请求头。</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>vue.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.export = &#123;</span><br><span class="line">    entry: &#123;&#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;&#125;,</span><br><span class="line">    ......</span><br><span class="line">    devServer: &#123;</span><br><span class="line">         proxy: [&#123;</span><br><span class="line">            context: <span class="string">'/login'</span>, <span class="comment">// 确定要代理的主机目标</span></span><br><span class="line">            target: <span class="string">'http://www.domain2.com:8080'</span>,  <span class="comment">// 代理跨域目标接口</span></span><br><span class="line">            changeOrigin: <span class="literal">true</span>, <span class="comment">// 默认false，是否需要改变原始主机头为目标URL。</span></span><br><span class="line">            secure: <span class="literal">false</span>,  <span class="comment">// 当代理某些https服务报错时用</span></span><br><span class="line">            cookieDomainRewrite: <span class="string">'www.domain1.com'</span>  <span class="comment">// 可以为false，表示不修改  重写set-cookie头域</span></span><br><span class="line">        &#125;],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ps: 打包完成后，在生产环境会出现报错，所以需要在生产环境中使用nginx反向代理。</p><p>原文： <a href="https://segmentfault.com/a/1190000011145364" target="_blank" rel="noopener">https://segmentfault.com/a/1190000011145364</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>框架-vue和react的应用场景</title>
      <link href="/2021/08/31/%E6%A1%86%E6%9E%B6-vue%E5%92%8Creact%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
      <url>/2021/08/31/%E6%A1%86%E6%9E%B6-vue%E5%92%8Creact%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><p>你学会了vue, 也学会了react,你知道 vue 和 react的大致写法，那么请问，当技术选型的时候，你会选择哪种框架？<br>为什么会去选择这个框架？</p><h1 id="相同"><a href="#相同" class="headerlink" title="相同"></a>相同</h1><h1 id="指标"><a href="#指标" class="headerlink" title="指标"></a>指标</h1><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><p>vue  IE 18+以上版本</p><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>React使用的是虚拟DOM,<br>Vue也使用虚拟DOM,但是做了静态和动态的区分,这使得Vue性能更好。</p><h2 id="可扩展性"><a href="#可扩展性" class="headerlink" title="可扩展性"></a>可扩展性</h2><p>React的扩展性强于Vue,这对于大型项目至关重要。</p><h2 id="跨平台"><a href="#跨平台" class="headerlink" title="跨平台"></a>跨平台</h2><p>Vue 针对iso、Android 跨平台的应用框架 weex,还处于开发活跃阶段。<br>React  React native 比较成熟,经过测试。</p><h2 id="最新的技术"><a href="#最新的技术" class="headerlink" title="最新的技术"></a>最新的技术</h2><p>React 得益于React大型的社区平台, 对其稳定性与技术更新提供了良好的支持。<br>Vue没没有得到大型的科技公司的支持，导致其社区生态较小,这是其适合小型应用和小型公司的根本原因。</p><h2 id="灵活性"><a href="#灵活性" class="headerlink" title="灵活性"></a>灵活性</h2><p>Vue 提供了一整套整个开发周期的框架。<br>React 只是一个灵活渲染的组件库。<br>这使得React更加灵活。</p><p>React 的响应式和函数式代码更适合测试。<br>React 与 typeScript 更加好搭配一些。而vue还需要vue-property-decorator第三方插件<br>React 比vue 的规范度更加好。<br>React 的响应式设计,比 vue的响应式绑定更加友好,在大数据下,vue的双向绑定更重。</p><p><strong>未完待续</strong></p><p><a href="https://juejin.cn/post/7007048306438176799?utm_source=gold_browser_extension" target="_blank" rel="noopener">https://juejin.cn/post/7007048306438176799?utm_source=gold_browser_extension</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-设计模式原则</title>
      <link href="/2021/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8E%9F%E5%88%99/"/>
      <url>/2021/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h1 id="七大设计原则"><a href="#七大设计原则" class="headerlink" title="七大设计原则"></a>七大设计原则</h1><h2 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h2><blockquote><p>其核心为：开放扩展，封闭修改</p></blockquote><ul><li>优点</li><li><ul><li>开放了扩展，增强了类得扩展性，对于类得新增特性友好</li></ul></li><li><ul><li>封闭了修改，增加了类得稳定性，对于类已知模块增强了持久性</li></ul></li></ul><blockquote><p>对于工厂生产不同得电脑 MacBook Surface</p></blockquote><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MacBook</span> <span class="title">implements</span> <span class="title">Computer</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Surface</span> <span class="title">implements</span> <span class="title">Computer</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    produceComputer(type) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( type === <span class="string">'MacBook'</span> ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MacBook();</span><br><span class="line">        &#125; <span class="keyword">if</span> <span class="keyword">else</span> ( type === <span class="string">'Surface'</span> ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Surface();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当前得写法虽然简单，但是违反了开闭原则,应该去修改已有得方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    produceComputer() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MacBook</span> <span class="title">implements</span> <span class="title">Computer</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Surface</span> <span class="title">implements</span> <span class="title">Computer</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppleFactory</span> <span class="title">implements</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    produceComputer() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MacBook();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MSSurFactory</span> <span class="title">implements</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    produceComputer() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Surface();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先定义抽象的接口,再通过实现接口,避免去修改现有的代码。</p><h2 id="单一职责-SPR"><a href="#单一职责-SPR" class="headerlink" title="单一职责 SPR"></a>单一职责 SPR</h2><blockquote><p>单一职责就是一个类负责一个单一的职责。<br>从软件变化的角度来看就是只有一个让自身类发生变化的因素。<br>如果一个类负责两个职责,职责A和职责B,那么当修改职责A时,很有可能会导致职责B出现问题。</p></blockquote><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><blockquote><p>牛羊猪呼吸的是空气,鱼是呼吸的水</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    breathe(type) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;type&#125;</span> 呼吸的空气`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> animal = <span class="keyword">new</span> Animal();</span><br><span class="line">animal.breathe(<span class="string">"猪"</span>);</span><br><span class="line">animal.breathe(<span class="string">"牛"</span>);</span><br><span class="line">animal.breathe(<span class="string">"羊"</span>);</span><br><span class="line"><span class="comment">// 鱼是呼吸水 </span></span><br><span class="line">animal.breather(<span class="string">"鱼"</span>);</span><br></pre></td></tr></table></figure><p>在这里发现鱼是呼吸得水</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Terrestrial</span> </span>&#123;</span><br><span class="line">    breathe(type) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;type&#125;</span> 呼吸的空气`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Aquatic</span> </span>&#123;</span><br><span class="line">    breathe(type) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;type&#125;</span> 呼吸的水`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> terrestrial = <span class="keyword">new</span> Terrestrial();</span><br><span class="line">terrestrial.breathe(<span class="string">"猪"</span>);</span><br><span class="line">terrestrial.breathe(<span class="string">"牛"</span>);</span><br><span class="line">terrestrial.breathe(<span class="string">"羊"</span>);</span><br><span class="line"><span class="comment">// 鱼是呼吸水 </span></span><br><span class="line"><span class="keyword">const</span> aquatic = <span class="keyword">new</span> Aquatic();</span><br><span class="line">aquatic.breather(<span class="string">"鱼"</span>);</span><br></pre></td></tr></table></figure><p>这样符合单一职责得原则,但是当不同的动物呼吸不同的物质时，需要多加上其他的类，这样会增大开销。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    breathe(type) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"鱼"</span> === type) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;type&#125;</span> 呼吸的水`</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;type&#125;</span> 呼吸的空气`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> animal = <span class="keyword">new</span> Animal();</span><br><span class="line">animal.breathe(<span class="string">"猪"</span>);</span><br><span class="line">animal.breathe(<span class="string">"牛"</span>);</span><br><span class="line">animal.breathe(<span class="string">"羊"</span>);</span><br><span class="line">animal.breather(<span class="string">"鱼"</span>);</span><br></pre></td></tr></table></figure><p>这样修改后，虽然简单了，但是在以后的修改中, 后期可能会出现breathe输出的结果不是预期的结果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    breatheAir(type) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;type&#125;</span> 呼吸的水`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    breatheWater(type) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"鱼"</span> === type) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;type&#125;</span> 呼吸的水`</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;type&#125;</span> 呼吸的空气`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> animal = <span class="keyword">new</span> Animal();</span><br><span class="line">animal.breatheAir(<span class="string">"猪"</span>);</span><br><span class="line">animal.breatheAir(<span class="string">"牛"</span>);</span><br><span class="line">animal.breatheAir(<span class="string">"羊"</span>);</span><br><span class="line">animal.breatheWater(<span class="string">"鱼"</span>);</span><br></pre></td></tr></table></figure><p>这样虽然破坏了单一职责原则，但是并没有对原来的代码进行修改。</p><h2 id="里氏代替原则"><a href="#里氏代替原则" class="headerlink" title="里氏代替原则"></a>里氏代替原则</h2><p>原有的功能P 通过类A实现的,现在需要增加一个新功能P2,但是这个P2是需要原来的功能P和新功能P1组成,由A的子类B完成,<br>但是完成新功能P2后,对原来的功能P造成了破坏。</p><p><strong>里氏代替</strong>的重点在于, 不影响原功能但是不是不能修改方法。</p><p>继承的含义：父类已经具体实现的方法,子类再次对父类的这些方法做出了修改,就是最整个继承体系最大的破坏。</p><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><blockquote><ul><li>两数相减</li><li>两数相加,再加100</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    func1( a, b ) &#123;</span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="title">extend</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    func1(a, b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    func2() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.func1(a, b) + <span class="number">100</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于B重写了A的方法，在使用过程中，大量的使用B的方法，会造成方法的结果达不到预期。<br>在实际的开发中，会重写父类的方法，这样会不可避免的造成大量的错误。</p><p>里氏原则就是<strong>可以扩展，但是不可修改原来的功能</strong></p><h2 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h2><blockquote><ul><li>定义：高层次模块不应该依赖于低层次模块，二者都应该依赖于抽象</li><li>抽象不应该依赖于细节，细节应该依赖于抽象</li></ul></blockquote><h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><blockquote><p>母亲给小孩子读书</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Book &#123;</span><br><span class="line">    content: <span class="string">"书的内容"</span>;</span><br><span class="line"></span><br><span class="line">    getContent() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Mother &#123;</span><br><span class="line">    say(book: Book) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(book.getContent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span>  mother = <span class="keyword">new</span> Mother();</span><br><span class="line">mother.say( <span class="keyword">new</span> Book() );</span><br></pre></td></tr></table></figure><p>当我们换了内容后比如一份报纸时：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> NewsPaper &#123;</span><br><span class="line">    content: <span class="string">"报纸的内容"</span>,</span><br><span class="line">    </span><br><span class="line">    getContent() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们会发现Mother只能读取书籍,而不能读取报纸！</p><p>而当我们依赖于抽象接口时</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Reader &#123;</span><br><span class="line">    content: <span class="built_in">string</span>;</span><br><span class="line">    getContent: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Book <span class="keyword">implements</span> Reader &#123;</span><br><span class="line">    content: <span class="string">"书的内容"</span>;</span><br><span class="line"></span><br><span class="line">    getContent() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> NewsPaper <span class="keyword">implements</span> Reader &#123;</span><br><span class="line">    content: <span class="string">"报纸的内容"</span>,</span><br><span class="line">    </span><br><span class="line">    getContent() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Mother &#123;</span><br><span class="line">    say(reader: Reader) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(reader.getContent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span>  mother = <span class="keyword">new</span> Mother();</span><br><span class="line">mother.say( <span class="keyword">new</span> Book() );</span><br><span class="line">mother.say( <span class="keyword">new</span> NewsPaper() );</span><br></pre></td></tr></table></figure><p>当Mother类依赖于接口而不依赖于具体某一类时，便于拓展，降低了耦合。<br>而不依赖于接口，Mother为高层，对其做修改很有可能会导致错误,降低系统的稳定性。</p><p><strong>依赖倒转的原则</strong>就是面向接口编程。</p><h2 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h2><ul><li><strong>接口隔离的原则</strong>其实更关键的在于接口的分离。</li><li><strong>强调</strong>一个类对于另外的一个类应该建立在最小的接口基础上。</li></ul><h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h3><blockquote><p>接口类的实现<br><img src="ISP-1.png" alt=""></p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> I &#123;</span><br><span class="line">    method1: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">    method2: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">    method3: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">    method4: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">    method5: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> A &#123;</span><br><span class="line">    depend1(i: I) &#123;</span><br><span class="line">        i.method1();</span><br><span class="line">    &#125;,</span><br><span class="line">    depend2(i: I) &#123;</span><br><span class="line">        i.method2();</span><br><span class="line">    &#125;,</span><br><span class="line">    depend3(i: I) &#123;</span><br><span class="line">        i.method3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> B <span class="keyword">implements</span> I &#123;</span><br><span class="line">    method1: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'扩展的方法1'</span>);</span><br><span class="line">    method2: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'扩展的方法2'</span>);</span><br><span class="line">    method3: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'扩展的方3'</span>);</span><br><span class="line">    method4: <span class="function"><span class="params">()</span> =&gt;</span> &#123; ... &#125;;</span><br><span class="line">    method5: <span class="function"><span class="params">()</span> =&gt;</span> &#123; ... &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> C &#123;</span><br><span class="line">    depend1(i: I) &#123;</span><br><span class="line">        i.method1();</span><br><span class="line">    &#125;,</span><br><span class="line">    depend2(i: I) &#123;</span><br><span class="line">        i.method4();</span><br><span class="line">    &#125;,</span><br><span class="line">    depend3(i: I) &#123;</span><br><span class="line">        i.method5();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> D <span class="keyword">implements</span> I &#123;</span><br><span class="line">    method1: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'扩展的方法1'</span>);</span><br><span class="line">    method2: <span class="function"><span class="params">()</span> =&gt;</span> &#123; ... &#125;;</span><br><span class="line">    method3: <span class="function"><span class="params">()</span> =&gt;</span> &#123; ... &#125;;</span><br><span class="line">    method4: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'扩展的方法2'</span>);</span><br><span class="line">    method5: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'扩展的方3'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> A();</span><br><span class="line">a.depend1(<span class="keyword">new</span> B());</span><br><span class="line">a.depend2(<span class="keyword">new</span> B());</span><br><span class="line">a.depend3(<span class="keyword">new</span> B());</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> C();</span><br><span class="line">c.depend1(<span class="keyword">new</span> D());</span><br><span class="line">c.depend2(<span class="keyword">new</span> D());</span><br><span class="line">c.depend3(<span class="keyword">new</span> D());</span><br></pre></td></tr></table></figure><p>可以发现当前的代码过于臃肿，C,D 实现接口I,但是 有些方法是没必要实现的。<br>这些不符合接口隔离的原则,必须进行拆分</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> I &#123;</span><br><span class="line">    method1: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> II &#123;</span><br><span class="line">    method2: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">    method3: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> III &#123;</span><br><span class="line">    method4: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">    method5: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> A &#123;</span><br><span class="line">    depend1(i: I) &#123;</span><br><span class="line">        i.method1();</span><br><span class="line">    &#125;,</span><br><span class="line">    depend2(i: II) &#123;</span><br><span class="line">        i.method2();</span><br><span class="line">    &#125;,</span><br><span class="line">    depend3(i: II) &#123;</span><br><span class="line">        i.method3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> B <span class="keyword">implements</span> I, II &#123;</span><br><span class="line">    method1: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'扩展的方法1'</span>);</span><br><span class="line">    method2: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'扩展的方法2'</span>);</span><br><span class="line">    method3: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'扩展的方3'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> C &#123;</span><br><span class="line">    depend1(i: I) &#123;</span><br><span class="line">        i.method1();</span><br><span class="line">    &#125;,</span><br><span class="line">    depend2(i: III) &#123;</span><br><span class="line">        i.method4();</span><br><span class="line">    &#125;,</span><br><span class="line">    depend3(i: III) &#123;</span><br><span class="line">        i.method5();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> D <span class="keyword">implements</span> I, III &#123;</span><br><span class="line">    method1: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'扩展的方法1'</span>);</span><br><span class="line">    method4: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'扩展的方法2'</span>);</span><br><span class="line">    method5: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'扩展的方3'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> A();</span><br><span class="line">a.depend1(<span class="keyword">new</span> B());</span><br><span class="line">a.depend2(<span class="keyword">new</span> B());</span><br><span class="line">a.depend3(<span class="keyword">new</span> B());</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> C();</span><br><span class="line">c.depend1(<span class="keyword">new</span> D());</span><br><span class="line">c.depend2(<span class="keyword">new</span> D());</span><br><span class="line">c.depend3(<span class="keyword">new</span> D());</span><br></pre></td></tr></table></figure><ul><li>尽可能的去细化接口。</li><li>如果接口细化的过于细小，会使得设计复杂化。</li></ul><h2 id="合成-聚合原则"><a href="#合成-聚合原则" class="headerlink" title="合成/聚合原则"></a>合成/聚合原则</h2><p>合成：例如身体和腿,是一种强的拥有关系。<br>聚合：例如狼和狼群,是一种弱的拥有关系。</p><p><strong>核心</strong>：使用合成/聚合,而不使用继承，降低了类与类之间的耦合度,增强了灵活性。<br>当使用继承时，修改了父类，子类也有随之改变，耦合度太高，减少了灵活性。</p><h3 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h3><p>合成: 订单与订单明细的关系, 当删除订单后,订单明细也删除。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Order &#123;</span><br><span class="line">    orderDetail: <span class="keyword">new</span> OrderDetail(),</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> OrderDetail &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>聚合：</p><p>订单与商品的关系, 当删除订单后, 商品依然存在。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Order &#123;</span><br><span class="line">    <span class="keyword">public</span> goods: [],</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">goods: Goods[]</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.goods = goods;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Goods &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>依赖</p><p>订单中的价格,使用参数传入。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Order &#123;</span><br><span class="line">    count( price: Price ) &#123;</span><br><span class="line">        <span class="keyword">return</span>  price * count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Price &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h2><ul><li>迪米特法则别名：最少知道法则。</li><li>通俗的解释：一个对象与另外一个对象为陌生关系，只能通过最直接的朋友去通信。</li><li>最直接的朋友：</li><li><ul><li>朋友关系：而出现在对象中的参数对象，成员变量对象，返回值对象。</li></ul></li><li><ul><li>陌生关系：不以朋友关系出现的方式成为陌生关系。</li></ul></li></ul><p>就是说<strong>陌生的类最好不要以朋友关系处在类的内部</strong></p><h3 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h3><blockquote><p>家人去监狱看望犯人，嘱咐犯人：“狱友之间要相互帮助”, 狱友回答：“我们是狱友”。</p></blockquote><p>家人</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Family &#123;</span><br><span class="line">    visitPrisoner(prisoner: Prisoners) &#123;</span><br><span class="line">        Inmates inmates = prisoner.helpEachOther();</span><br><span class="line">        inmates.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>犯人</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Prisoners  &#123;</span><br><span class="line">    inmates = <span class="keyword">new</span> Inmates();</span><br><span class="line">    helpEachOther() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"狱友之间要相互帮助"</span>);</span><br><span class="line">        <span class="keyword">return</span> inmates;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>狱友</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Inmates  &#123;</span><br><span class="line">    say() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"我们是狱友"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>场景</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> family = <span class="keyword">new</span> Family();</span><br><span class="line">family.visitPrisoner(<span class="keyword">new</span> Prisoners());</span><br></pre></td></tr></table></figure><p>家人认识犯人，不认识狱友; 而在此场景中, 家人直接与狱友通信了，违反了迪米特原则。</p><p>修改为<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Family &#123;</span><br><span class="line">    visitPrisoner(prisoner: Prisoners) &#123;</span><br><span class="line">        prisoner.helpEachOther()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Prisoners  &#123;</span><br><span class="line">    inmates = <span class="keyword">new</span> Inmates();</span><br><span class="line">    helpEachOther() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"狱友之间要相互帮助"</span>);</span><br><span class="line">        <span class="keyword">this</span>.inmates.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Inmates  &#123;</span><br><span class="line">    say() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"我们是狱友"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> family = <span class="keyword">new</span> Family();</span><br><span class="line">family.visitPrisoner(<span class="keyword">new</span> Prisoners());</span><br></pre></td></tr></table></figure></p><p>家人通过犯人来获取回复</p><p><strong>重点</strong>：两个陌生的类通过第三方类获取通信。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><div class="table-container"><table><thead><tr><th>原则</th><th>简述</th></tr></thead><tbody><tr><td>开闭原则</td><td>对扩展开发，对修改封闭</td></tr><tr><td>单一职责原则</td><td>一个类只有一种引起变化的原因<br />最低限度一个方法只负责一个行为/结果</td></tr><tr><td>里氏代替原则</td><td>在继承时,在子类中不去修改重写父类的方法</td></tr><tr><td>依赖倒转原则</td><td>类不去依赖一个具体类，应该去依赖接口</td></tr><tr><td>接口隔离原则</td><td>细分接口，避免不必要的接口实现</td></tr><tr><td>合成/聚合原则</td><td>合成聚合好过继承</td></tr><tr><td>迪米特原则</td><td>陌生的类依赖第三方类通信</td></tr></tbody></table></div><p><i>原文: <a href="https://zhuanlan.zhihu.com/p/24614363" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/24614363</a></i></p>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-状态模式</title>
      <link href="/2021/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
      <url>/2021/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h1><blockquote><p>当对象发生变化时，会根据状态变化来触发一个逻辑。<br>当一个对象的内部状态发生改变时,会导致其行为的改变,这看起来像是改变了对象.</p></blockquote><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><blockquote><p>台灯的状态：开启, 弱光, 强光,关闭</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> execute &#123;</span><br><span class="line">    _currentState =[];</span><br><span class="line"></span><br><span class="line">    changeState() &#123;</span><br><span class="line">        <span class="keyword">this</span>._currentState = <span class="built_in">Object</span>.keys(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    doAction() &#123;</span><br><span class="line">        <span class="keyword">this</span>._currentState.forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">            action[key] &amp;&amp; action[key].apply(<span class="keyword">this</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> action = &#123;</span><br><span class="line">    open() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"开灯"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    lowLight() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"弱光"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    glare() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"强光"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> light = <span class="keyword">new</span> execute();</span><br><span class="line"></span><br><span class="line">light.changeState(<span class="string">'open'</span>, <span class="string">'lowLight'</span>).doAction();</span><br></pre></td></tr></table></figure><h2 id="状态机"><a href="#状态机" class="headerlink" title="状态机"></a>状态机</h2><p>状态机的原理,状态机是一组状态的集合,它包含四个要素：状态,条件,动作,次态。<br>当根据条件与当前状态后,做出了动作和改变了状态,这就是状态机的动作流程。</p><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><blockquote><p>Promise 的模拟</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> StateMachine <span class="keyword">from</span> <span class="string">'javascript-state-machine'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stateMachine = <span class="keyword">new</span> StateMachine(&#123;</span><br><span class="line">    init: <span class="string">"pending"</span>,</span><br><span class="line">    transitions: [</span><br><span class="line">        &#123; name: <span class="string">"resolve"</span>, form: <span class="string">"pending"</span>, to: <span class="string">"fulfilled"</span> &#125;,</span><br><span class="line">        &#123; name: <span class="string">"reject"</span>, <span class="keyword">from</span>: <span class="string">"pending"</span>, to: <span class="string">"rejected"</span> &#125;</span><br><span class="line">    ],</span><br><span class="line">    method: &#123;</span><br><span class="line">        onResolve(state, data) &#123;</span><br><span class="line">            data.successFn.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> fn());</span><br><span class="line">        &#125;,</span><br><span class="line">        onReject( state, data ) &#123;</span><br><span class="line">           data.failFn.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> fn());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> MyPromise &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.successFn = [];</span><br><span class="line">        <span class="keyword">this</span>.failFn = [];</span><br><span class="line">        fn( <span class="function"><span class="params">()</span> =&gt;</span> stateMachine.resolve(<span class="keyword">this</span>), <span class="function"><span class="params">()</span> =&gt;</span> stateMachine.reject(<span class="keyword">this</span>) );</span><br><span class="line">    &#125;</span><br><span class="line">    then(successFn, failFn) &#123;</span><br><span class="line">        <span class="keyword">this</span>.successFn.push(successFn);</span><br><span class="line">        <span class="keyword">this</span>.failFn.push(failFn);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-观察者模式</title>
      <link href="/2021/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2021/08/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><ul><li><p>方法结构</p><ul><li>订阅消息的方法</li><li>取消订阅消息的方法</li><li>发送订阅消息的方法 </li><li>消息的容器</li></ul></li><li><p>角色结构</p><ul><li>观察者: 发布消息.</li><li>订阅者: 接收消息,去做相关联的操作.</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Observer  &#123;</span><br><span class="line">    private _messages = &#123;&#125;;</span><br><span class="line">    <span class="comment">// 注册消息</span></span><br><span class="line">    register(type, fn) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( <span class="keyword">typeof</span> <span class="keyword">this</span>._messages[type] === <span class="string">'undefined'</span> ) &#123;</span><br><span class="line">            <span class="keyword">this</span>._messages[type] = [fn]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>._messages[type].push(fn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 发布消息</span></span><br><span class="line">    fire(type, args) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>._messages[type]) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">const</span> events = &#123;type, <span class="attr">args</span>: args || &#123;&#125;&#125;,</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>._messages[type].length ; i ++ ) &#123;</span><br><span class="line">            <span class="keyword">this</span>._messages[type][i](events);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 取消订阅</span></span><br><span class="line">    remove(type, fn) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( <span class="keyword">this</span>._messages[type] <span class="keyword">instanceof</span> <span class="built_in">Array</span> ) &#123;</span><br><span class="line">            <span class="keyword">const</span> index = <span class="keyword">this</span>._messages[type].findIndex(<span class="function">(<span class="params">fnItem</span>) =&gt;</span> fnItem === fn);</span><br><span class="line">            <span class="keyword">this</span>._messages[type].splice(index, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对象的解耦"><a href="#对象的解耦" class="headerlink" title="对象的解耦"></a>对象的解耦</h2><blockquote><p>实例 当老师提问,学生回答.  老师提的多种问题, 学生回答,且有的会避开.</p></blockquote><p>学生</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    private result = <span class="string">''</span>;</span><br><span class="line">    </span><br><span class="line">    say() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student.prototype.answer = <span class="function"><span class="keyword">function</span>(<span class="params">question</span>) </span>&#123;</span><br><span class="line">    Observer.register(question, <span class="keyword">this</span>.say);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student.prototype.sleep = <span class="function"><span class="keyword">function</span>(<span class="params">question</span>) </span>&#123;</span><br><span class="line">    Observer.remove(question, <span class="keyword">this</span>.say);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>老师</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    ask(question) &#123;</span><br><span class="line">        Observer.fire(question);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>流程</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 学生的记录回答</span></span><br><span class="line"><span class="keyword">const</span>  student1 = <span class="keyword">new</span> Student(<span class="string">'学生1的回答'</span>);</span><br><span class="line"><span class="keyword">const</span>  student2 = <span class="keyword">new</span> Student(<span class="string">'学生2的回答'</span>);</span><br><span class="line"><span class="keyword">const</span>  student3 = <span class="keyword">new</span> Student(<span class="string">'学生3的回答'</span>);</span><br><span class="line"><span class="comment">// 学生可以回答的问题</span></span><br><span class="line">student1.answer(<span class="string">'什么是设计模式'</span>);</span><br><span class="line">student1.answer(<span class="string">'什么是观察者模式'</span>);</span><br><span class="line">student2.answer(<span class="string">'什么是设计模式'</span>);</span><br><span class="line">student2.answer(<span class="string">'什么是设计模式'</span>);</span><br><span class="line">student3.answer(<span class="string">'什么是观察者模式'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// student3 不回答了</span></span><br><span class="line">student3.sleep(<span class="string">'什么是观察者模式'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span>  teacher = <span class="keyword">new</span> Teacher();</span><br><span class="line"></span><br><span class="line">teacher.ask(<span class="string">'什么是设计模式'</span>);</span><br><span class="line">teacher.ask(<span class="string">'什么是观察者模式'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 看看结果 ......</span></span><br></pre></td></tr></table></figure><h2 id="使用的场景"><a href="#使用的场景" class="headerlink" title="使用的场景"></a>使用的场景</h2><ul><li>可以看到观察者模式适用于模块与模块之间的通信</li><li>模块与模块之间没有耦合,相互之间不关联,只需要关注消息的订阅与发布,而模块内部的功能不需要关注</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-策略模式</title>
      <link href="/2021/08/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2021/08/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="示例一-商品促销"><a href="#示例一-商品促销" class="headerlink" title="示例一 商品促销"></a>示例一 商品促销</h1><blockquote><p>在过节期间,需要将一批商品打折处理,一部分商品8折出售,一部分商品9折出售,针对不同的客户给予折扣卷,普通用户满100返30,Vip用户满100返50.</p></blockquote><h2 id="普通写法"><a href="#普通写法" class="headerlink" title="普通写法"></a>普通写法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">discountPrice</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (data.role === <span class="string">'vip'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> data.price &gt; <span class="number">100</span> ? data.price - <span class="number">50</span> : data.price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (data.role === <span class="string">'common'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> data.price &gt; <span class="number">100</span> ? data.price - <span class="number">30</span> : data.price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( data.type = <span class="string">'a'</span> ) &#123;</span><br><span class="line">        <span class="keyword">return</span> data.price * <span class="number">100</span> * <span class="number">90</span> / <span class="number">10000</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( data.type = <span class="string">'b'</span> ) &#123;</span><br><span class="line">        <span class="keyword">return</span> data.price * <span class="number">100</span> * <span class="number">80</span> / <span class="number">10000</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>普通写法将所有条件和算法都聚合在一起,以后扩展代码会臃肿不堪。</li><li>在调用当前函数时,由于判断过多,消耗了性能。</li><li>违反了设计模式的开闭原则。</li></ul><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> priceStrategy = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> strategy = &#123;</span><br><span class="line">        return30(price) &#123;</span><br><span class="line">            <span class="keyword">return</span> price - ParseInt(price/<span class="number">100</span>)*<span class="number">30</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        return50(price) &#123;</span><br><span class="line">            <span class="keyword">return</span> price - ParseInt(price/<span class="number">100</span>)*<span class="number">50</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        percent90(price) &#123;</span><br><span class="line">            <span class="keyword">return</span> price * <span class="number">100</span> * <span class="number">90</span> / <span class="number">10000</span>; </span><br><span class="line">        &#125;,</span><br><span class="line">        percent80(price) &#123;</span><br><span class="line">            <span class="keyword">return</span> price * <span class="number">80</span> * <span class="number">100</span> / <span class="number">10000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">algorithm, price</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> strategy[algorithm] &amp;&amp; strategy[algorithm](price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">priceStrategy( <span class="string">'return30'</span>, price );</span><br></pre></td></tr></table></figure><h1 id="示例二-表单验证"><a href="#示例二-表单验证" class="headerlink" title="示例二 表单验证"></a>示例二 表单验证</h1><blockquote><p>对于表单的验证，是否为空，是否为数字，是否为本地电话</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inputStrategy = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> strategy = &#123;</span><br><span class="line">        notNull(value) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/\S+/</span>.test(value) ? <span class="string">'请输入内容'</span> : <span class="string">''</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        number(value) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^[0-9]$/</span>.test(value) ? <span class="string">''</span> : <span class="string">'请输入数字'</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        phone(value) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^\d&#123;3&#125;\-\d&#123;8&#125;$|^\d&#123;4&#125;\-\d&#123;7&#125;$/</span>.test(value) ? <span class="string">''</span> : <span class="string">'请输入座机号码'</span>；</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        check( type, value ) &#123;</span><br><span class="line">            value = value.trim();</span><br><span class="line">            <span class="keyword">return</span> strategy[type] &amp;&amp; strategy[type](value);</span><br><span class="line">        &#125;,</span><br><span class="line">        addStrategy(type, fn) &#123;</span><br><span class="line">            strategy[type] = fn;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="示例三-权限验证"><a href="#示例三-权限验证" class="headerlink" title="示例三  权限验证"></a>示例三  权限验证</h1><blockquote><p>根据用户账户,用户的等级,用户的标识,用户的类别 判断用户是否有权限登录</p></blockquote><p>根据条件设置策略规则<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> RoleStrategy = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> strategy = &#123;</span><br><span class="line">        checkToken(data) &#123;</span><br><span class="line">            <span class="keyword">return</span> data.token === <span class="string">'token'</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        checkLevel(data) &#123;</span><br><span class="line">            <span class="keyword">return</span> data.level &gt; <span class="number">1</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        checkMark(data) &#123;</span><br><span class="line">            <span class="keyword">return</span> data.mark === <span class="string">'mark'</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        checkType(data) &#123;</span><br><span class="line">            <span class="keyword">return</span> data.type === <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        check( type, value ) &#123;</span><br><span class="line">            <span class="keyword">return</span> strategy[type] &amp;&amp; strategy[type](value);</span><br><span class="line">        &#125;,</span><br><span class="line">        addStrategy(type, fn) &#123;</span><br><span class="line">            strategy[type] = fn;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>设置校验规则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Validator</span> </span>&#123;</span><br><span class="line">    cache: [],</span><br><span class="line">    add( value, method ) &#123;</span><br><span class="line">        <span class="keyword">this</span>.cache.push(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> RoleStrategy[method](value);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    check() &#123;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">this</span>.cache.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> ( !item() ) &#123;</span><br><span class="line">                <span class="keyword">return</span> result = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>针对数据进行校验</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> validator = <span class="keyword">new</span> Validator();</span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">    token = <span class="string">'token'</span>,</span><br><span class="line">    level = <span class="number">2</span>,</span><br><span class="line">    mark = <span class="string">'mark'</span>,</span><br><span class="line">    type = <span class="string">'0'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> ( i <span class="keyword">in</span> data ) &#123;</span><br><span class="line">    validator.add( <span class="string">`check<span class="subst">$&#123;i&#125;</span>`</span>, data[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result = validator.check();</span><br><span class="line"></span><br><span class="line"><span class="comment">// to do  something</span></span><br></pre></td></tr></table></figure><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>策略模式主要是负责处理算法逻辑并对算法做管理。</p><ul><li><p>优点</p><ul><li>各个算法相互独立,互补干扰,可以重复利用,提升了利用率;</li><li>相对于扩展,策略模式方便扩展;</li><li>维护,更便于后期维护;</li></ul></li><li><p>缺点</p><ul><li>用户必须了解算法,成本较高;</li><li>各个算法相互独立,相同部分不能共享;</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>性能优化-webpack优化</title>
      <link href="/2021/08/04/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-webpack%E4%BC%98%E5%8C%96/"/>
      <url>/2021/08/04/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-webpack%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="性能优化-webpack"><a href="#性能优化-webpack" class="headerlink" title="性能优化 - webpack"></a>性能优化 - webpack</h1><h2 id="缩小范围-节约时间"><a href="#缩小范围-节约时间" class="headerlink" title="缩小范围,节约时间"></a>缩小范围,节约时间</h2><p>支撑点：缩小loader对文件的搜索范围,避免对不必要的文件进行转义。<br>方法：通过对include/exclude 进行设置<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>:&#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        include: <span class="regexp">/src/</span>,</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        user: <span class="string">"babel-loader"</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="缓存副本-节约时间"><a href="#缓存副本-节约时间" class="headerlink" title="缓存副本,节约时间"></a>缓存副本,节约时间</h2><p>支撑点：配置cache缓存loader对文件的编译副本,未做修改的文件,不会重新编译。<br>方法：大部分的loader/plugin都支持cache功能。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">        test: <span class="regexp">/\.js/</span>,</span><br><span class="line">        us: [&#123;</span><br><span class="line">            loader: <span class="string">"babel-loader"</span>,</span><br><span class="line">            options: &#123; <span class="attr">cacheDirectory</span>: <span class="literal">true</span> &#125;</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;,</span><br><span class="line">plugin: [</span><br><span class="line">    <span class="keyword">new</span> EslintPlugin(&#123;<span class="attr">cache</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h2 id="配置resolve-提高搜索速度-节约时间"><a href="#配置resolve-提高搜索速度-节约时间" class="headerlink" title="配置resolve,提高搜索速度,节约时间"></a>配置resolve,提高搜索速度,节约时间</h2><p>支撑点：配置了resolve,webpack不用层层查找。<br>方法：</p><pre><code>- alias: 映射模块路径- extensive: 表明文件后缀- noParse: 过滤无依赖文件</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">        <span class="string">'#'</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="string">'@'</span>: <span class="string">'src'</span>,</span><br><span class="line">        <span class="string">'swiper'</span>: <span class="string">'swiper/js/swiper.min.js'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    extensive: [<span class="string">'.js'</span>,<span class="string">'.ts'</span>,<span class="string">'.tsx'</span>, <span class="string">'.jsx'</span>, <span class="string">'.vue'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="提前构建-节约时间"><a href="#提前构建-节约时间" class="headerlink" title="提前构建,节约时间"></a>提前构建,节约时间</h2><p>支撑点：配置DLLPlugin将第三方依赖提前打好包。<br>方法：</p><pre><code>- 首先配置那些依赖作为DLL,生成DLL与DLL映射表文件</code></pre>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        vendor: [<span class="string">"react"</span>, <span class="string">"react-dom"</span>, <span class="string">"react-router-dom"</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    mode: <span class="string">"production"</span>,</span><br><span class="line">    optimization: &#123;</span><br><span class="line">        splitChunks: &#123;</span><br><span class="line">            cacheGroups: &#123;</span><br><span class="line">                vendor: &#123;</span><br><span class="line">                    chunks: <span class="string">"all"</span>,</span><br><span class="line">                    name: <span class="string">"vendor"</span>,</span><br><span class="line">                    test: <span class="string">"/node_modules/"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename:<span class="string">"[name].all.js"</span>,</span><br><span class="line">        library: <span class="string">"[name]"</span>,</span><br><span class="line">        path: AbsPath(<span class="string">"dist/static"</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> DefinePlugin(&#123;</span><br><span class="line">            <span class="string">"process.env.NODE_ENV"</span>: <span class="built_in">JSON</span>.stringify(<span class="string">"development"</span>)</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> DLLPLugin(&#123;</span><br><span class="line">            name: <span class="string">"[name]"</span>,</span><br><span class="line">            path: AbsPath(<span class="string">"dist/static/[name]-manifest.json"</span>)</span><br><span class="line">        &#125;);</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  然后再 <code>package.json</code> 里配置执行脚本且每次构建前硬执行该脚本<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"scripts"</span>: &#123;</span><br><span class="line">        <span class="string">"dll"</span>: <span class="string">"webpack --config webpack.dll.js"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后链接<code>DLL文件</code>并告知<code>webpack</code>可命中的<code>DLL文件</code>让其自行读取。<br>plugin 在打包时自动插入<code>DLL文件</code>。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; DLLReferencePlugin &#125; <span class="keyword">from</span> <span class="string">"webpack"</span>;</span><br><span class="line"><span class="keyword">import</span> HtmlTagsPlugin <span class="keyword">from</span> <span class="string">"html-webpack-tags-plugin"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> DllReferencePlugin(&#123;</span><br><span class="line">            manifest: AbsPath(<span class="string">"dist/static/vendor-manifest.json"</span>)</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> HtmlTagsPlugin(&#123;</span><br><span class="line">            append: <span class="literal">false</span>,</span><br><span class="line">            publicPath: <span class="string">"/"</span>,</span><br><span class="line">            tags: [<span class="string">"static/vendor.all.js"</span>]</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>配置后可节约几秒钟，当然也可以使用<code>autodll-webpack-plugin</code>,自动配置。</p><h2 id="并行构建-节约时间"><a href="#并行构建-节约时间" class="headerlink" title="并行构建,节约时间"></a>并行构建,节约时间</h2><p>配置Thread将Loader单进程转换为多进程,好处是<code>释放CPU多核并发的优势</code>。在使用<code>webpack</code>构建项目时，webpack构建项目时需要大量的处理文件，构建过程时密集型的计算，随着构建程度的加深，文件会越来越多，后期会越来越慢。<br>并且，在nodejs环境中，webpack是单线程的，待处理的任务是需要一件一件的去处理。<br><code>文件读写</code>和<code>计算操作</code>是不可避免的，充分利用多线程的能力，去开启新的THread节约时间。<br>注意：多线程的开启是会消耗性能的。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Os <span class="keyword">from</span> <span class="string">'os'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            use: [&#123;</span><br><span class="line">                loader: <span class="string">"thread-loader"</span>,</span><br><span class="line">                options: &#123;<span class="attr">workers</span>: Os.cpus().length&#125;</span><br><span class="line">            &#125;,&#123;</span><br><span class="line">                loader: <span class="string">"babel-loader"</span>,</span><br><span class="line">                options: &#123;<span class="attr">cacheDirectory</span>: <span class="literal">true</span>&#125;</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="可视结构-分析依赖-节约时间"><a href="#可视结构-分析依赖-节约时间" class="headerlink" title="可视结构,分析依赖,节约时间"></a>可视结构,分析依赖,节约时间</h2><p>配置BundleAnalyzer分析打包文件结构,通过可视化分析那么包打包体积过大，从而分析出原因，提高打包时间。<br>BundleAnalyzer是webpack官方提供的一款插件，可视化的显示出 打包后的体积，相互依赖关系，文件是否重复，压缩后的体积等数据。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> BundleAnalyzerPlugin <span class="keyword">from</span> <span class="string">'webpack-bundle-analyzer'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    plugin: [</span><br><span class="line">        <span class="keyword">new</span> BundleAnalyzerPlugin()</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="分割代码，提高利用率，减少体积"><a href="#分割代码，提高利用率，减少体积" class="headerlink" title="分割代码，提高利用率，减少体积"></a>分割代码，提高利用率，减少体积</h2><p>分割各个模块,减少重复代码,提高利用率。<br><code>webpack v4</code>中已经使用<code>splitChunks</code>来代替<code>CommonsChunkPlugin</code>实现代码分割<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    optimization: &#123;</span><br><span class="line">        runtimeChunk: &#123;<span class="attr">name</span>: <span class="string">"manifest"</span>&#125;,</span><br><span class="line">        splitChunks: &#123;</span><br><span class="line">            cacheGroups: &#123;</span><br><span class="line">                common: &#123;</span><br><span class="line">                    minchunks: <span class="number">2</span>,</span><br><span class="line">                    name: <span class="string">"common"</span>,</span><br><span class="line">                    priority: <span class="number">5</span>,</span><br><span class="line">                    reuseExistingChunk: <span class="literal">true</span>, <span class="comment">// 重用以存在的代码</span></span><br><span class="line">                    test: AbsPath(<span class="string">"src"</span>)</span><br><span class="line">                &#125;,</span><br><span class="line">                vendor: &#123;</span><br><span class="line">                    chunks: <span class="string">"inital"</span>, <span class="comment">//代码分割类型</span></span><br><span class="line">                    name: <span class="string">"vendor"</span>, <span class="comment">// 代码名称</span></span><br><span class="line">                    priority: <span class="number">10</span>, <span class="comment">// 优先级</span></span><br><span class="line">                    test: <span class="regexp">/node_modules/</span> <span class="comment">// 校验文件正则</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="comment">// 缓存组</span></span><br><span class="line">            chunks: <span class="string">"all"</span> <span class="comment">// 代码分割类型：all 全部，async 异步， initial 入口</span></span><br><span class="line">        &#125; <span class="comment">// 代码块分割</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="摇树优化-减小体积"><a href="#摇树优化-减小体积" class="headerlink" title="摇树优化,减小体积"></a>摇树优化,减小体积</h2><p>删除项目中未被引用的代码,移除重复的代码,移除未被引用的代码。<br><code>摇树优化</code>只是对<code>ECM规范</code>生效,针对静态数据进行解析,只有<code>import/export</code>才支持静态解析,<code>import</code>会在编译过程中执行,即在执行过程前,并且具有提升效果,会在整个代码前执行。<br>webpack 将环境设置为生产环境才会生效。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    mode: &#123;</span><br><span class="line">        production</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="动态垫片-减少体积"><a href="#动态垫片-减少体积" class="headerlink" title="动态垫片,减少体积"></a>动态垫片,减少体积</h2><p>通过垫片服务根据UA返回当前浏览器代码垫片,好处：<code>无需将繁重的代码垫片打包进去</code>。每次构建都配置<code>@babel\preset-env</code>和<code>core-js</code>根据需求将<code>polyfill</code>打包进来。<br><code>@babel\preset-env</code>提供的<code>useBuiltIns</code>可按需导<code>Polyfill</code>。</p><pre><code>- false: 无视`target.browsers`将所有Polyfill加载进来。- entry: 根据 `target.browsers`将部分Polyfill加载进来，需要载入口文件中引入 `import &quot;core-js/stable&quot;`;- usage: 根据`target.browsers`和检测代码里ES6的使用情况部分`Polyfill`加载进来(无需在入口文件中引入 `import &quot;core-js/stable&quot;`);</code></pre><p><code>动态垫片</code>可根据浏览器<code>UserAgent</code>从<code>browserlist</code>查找出当前浏览器哪些特性缺乏支持从而返回这些特性的<code>Polyfill</code>.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> HtmlTagsPlugin <span class="keyword">from</span> <span class="string">"html-webpack-tags-plugin"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> HtmlTagsPlugin(&#123;</span><br><span class="line">            append: <span class="literal">false</span>, <span class="comment">// 在生成资源后插入</span></span><br><span class="line">            publicPath: <span class="literal">false</span>, <span class="comment">// 使用公共路径</span></span><br><span class="line">            tags: [<span class="string">"https://polyfill.alicdn.com/polyfill.min.js"</span>] <span class="comment">// 资源路径</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="按需加载-减少体积"><a href="#按需加载-减少体积" class="headerlink" title="按需加载,减少体积"></a>按需加载,减少体积</h2><p>将路由页面/触发性功能单独打包为一个文件,使用时才加载。好处是 <code>减轻首屏渲染的负担</code>。功能越多导致其打包的体积越大，会导致首屏渲染速度越慢。</p><p>首屏渲染时,只需要对应<code>js代码</code>而无需其他<code>js代码</code>。再webpack v4中,提供按需切割加载功能，配合<code>import()</code>做到首屏渲染减包的效果,从而加快首屏渲染。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Login = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span> (<span class="comment">/* wepackChunkName: "login" */</span><span class="string">"../..//views/login"</span>)</span><br></pre></td></tr></table></figure><p>运行起来可能会报错,需要再babel中接入<code>@babel/plugin-syntax-dynamic-import</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"babel"</span>: &#123;</span><br><span class="line">        <span class="string">"plugins"</span>: [</span><br><span class="line">            <span class="string">"@babel/plugin-syntax-dynamic-import"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="作用提升-减少体积"><a href="#作用提升-减少体积" class="headerlink" title="作用提升,减少体积"></a>作用提升,减少体积</h2><p>分析模块依赖,将打包好的模块合并到一个函数中。<br>减少函数声明和内存花销。</p><p>未开启<code>作用提升</code>前,构建后的代码会存在大量函数闭包。由于模块依赖,通过<code>webpack</code>打包后会转换成<code>IIFE</code>,大量闭包会导致打包后体积增大。</p><p>在开启后,构建代码会按照引入顺序放到一个函数作用域里，通过适当命名以防止变量名突变，从而减少函数声明和内存花销。</p><p>在<code>webpack</code>里只需要打包环境设置 <code>生产环境</code>或者显示设置 <code>concateateModules</code>;<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    optimzation: &#123;</span><br><span class="line">        concatenateModules: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="压缩资源-减少体积"><a href="#压缩资源-减少体积" class="headerlink" title="压缩资源,减少体积"></a>压缩资源,减少体积</h2><p>压缩HTML/CSS/JSS 字体/图像/音频/视频, 好处是 <code>更有效减少打包体积</code>。</p><p>针对 <code>HTML</code>: 使用<code>html-webpack-plugin</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> HtmlPlugin <span class="keyword">from</span> <span class="string">'html-webpack-plugin'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        htmlPlugin(&#123;</span><br><span class="line">            minify: &#123;</span><br><span class="line">                collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">                removeComments: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>针对<code>css/js</code>代码,分别使用插件开启压缩</p><pre><code>- optimize-css-assets-webpack-plugin: 压缩css代码- uglifyjs-webpack-plugin: ES5 js代码- terser-webpack-plugin: ES6 js代码</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> OptimizeCssAssetsPlugin <span class="keyword">from</span> <span class="string">"optimize-css-assets-webpack-plugin"</span>;</span><br><span class="line"><span class="keyword">import</span> TerserPlugin <span class="keyword">from</span> <span class="string">"terser-webpack-plugin"</span>;</span><br><span class="line"><span class="keyword">import</span> UglifyjsPlugin <span class="keyword">from</span> <span class="string">"uglifyjs-webpack-plugin"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> compressOpts = <span class="function"><span class="params">type</span> =&gt;</span> (&#123;</span><br><span class="line">    cache: <span class="literal">true</span>, <span class="comment">// 缓存文件</span></span><br><span class="line">    parallel: <span class="literal">true</span>, <span class="comment">// 并行处理</span></span><br><span class="line">    [<span class="string">`<span class="subst">$&#123;type&#125;</span>Options`</span>]: &#123;</span><br><span class="line">        beautify: <span class="literal">false</span>,</span><br><span class="line">        compress: &#123; <span class="attr">drop_console</span>: <span class="literal">true</span> &#125;</span><br><span class="line">    &#125; <span class="comment">// 压缩配置</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> compressCss = <span class="keyword">new</span> OptimizeCssAssetsPlugin(&#123;</span><br><span class="line">    cssProcessorOptions: &#123;</span><br><span class="line">        autoprefixer: &#123; <span class="attr">remove</span>: <span class="literal">false</span> &#125;, <span class="comment">// 设置autoprefixer保留过时样式</span></span><br><span class="line">        safe: <span class="literal">true</span> <span class="comment">// 避免cssnano重新计算z-index</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> compressJs = USE_ES6</span><br><span class="line">    ? <span class="keyword">new</span> TerserPlugin(compressOpts(<span class="string">"terser"</span>))</span><br><span class="line">    : <span class="keyword">new</span> UglifyjsPlugin(compressOpts(<span class="string">"uglify"</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    optimization: &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        minimizer: [compressCss, compressJs] <span class="comment">// 代码压缩</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><div class="table-container"><table><thead><tr><th style="text-align:left">减少时间</th><th style="text-align:left">减少体积</th></tr></thead><tbody><tr><td style="text-align:left">配置loader的属性include/exclude 减少构建的范围</td><td style="text-align:left">摇树优化，根据import/export 过滤的模块,生产环境模式下</td></tr><tr><td style="text-align:left">配置loader/plugin的cache去减少构建的时间</td><td style="text-align:left">公共代码提取，使用splitChunk，分割代码</td></tr><tr><td style="text-align:left">配置resolve定向搜索</td><td style="text-align:left">动态垫片，使用第三方polyfill服务</td></tr><tr><td style="text-align:left">配置DLL 提前打好第三方包<br />auto-webpack-plugin</td><td style="text-align:left">按需加载，使用@babel/plugin-syntax-dynamic-import,结合webpack-import()使用<br />减少路由功能组件加载首页</td></tr><tr><td style="text-align:left">配置thread-loader开启多线程</td><td style="text-align:left">作用提升，相同的依赖，打包好放置同一个函数中，配置生产环境或者显示设置concatenateModules:true</td></tr><tr><td style="text-align:left">配置webpack-bundle-analyzer可视化分析包问题</td><td style="text-align:left">压缩资源：html/css/js,相对应的plugin</td></tr></tbody></table></div><p>原文出处： <a href="https://juejin.cn/post/6981673766178783262" target="_blank" rel="noopener">https://juejin.cn/post/6981673766178783262</a></p>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>First-day</title>
      <link href="/2021/07/28/first-day/"/>
      <url>/2021/07/28/first-day/</url>
      
        <content type="html"><![CDATA[<h1 id="First-day"><a href="#First-day" class="headerlink" title="First day"></a>First day</h1><p>这是开始新的旅程,记录在web前端生涯的每个点,每个细小的放大!</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
