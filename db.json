{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/mic/source/css/backcss.css","path":"css/backcss.css","modified":0,"renderable":1},{"_id":"themes/mic/source/css/dropdownMenu.css","path":"css/dropdownMenu.css","modified":0,"renderable":1},{"_id":"themes/mic/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/mic/source/css/demo.css","path":"css/demo.css","modified":0,"renderable":1},{"_id":"themes/mic/source/css/gallery.min.css","path":"css/gallery.min.css","modified":0,"renderable":1},{"_id":"themes/mic/source/css/gallery.css","path":"css/gallery.css","modified":0,"renderable":1},{"_id":"themes/mic/source/css/mic_gallery.css","path":"css/mic_gallery.css","modified":0,"renderable":1},{"_id":"themes/mic/source/css/item.css","path":"css/item.css","modified":0,"renderable":1},{"_id":"themes/mic/source/css/mic_main.css","path":"css/mic_main.css","modified":0,"renderable":1},{"_id":"themes/mic/source/css/normalize.css","path":"css/normalize.css","modified":0,"renderable":1},{"_id":"themes/mic/source/css/my_link.css","path":"css/my_link.css","modified":0,"renderable":1},{"_id":"themes/mic/source/css/noscript.css","path":"css/noscript.css","modified":0,"renderable":1},{"_id":"themes/mic/source/css/ok_prism.css","path":"css/ok_prism.css","modified":0,"renderable":1},{"_id":"themes/mic/source/css/prism.css","path":"css/prism.css","modified":0,"renderable":1},{"_id":"themes/mic/source/css/prism_coy.css","path":"css/prism_coy.css","modified":0,"renderable":1},{"_id":"themes/mic/source/css/prism_dark.css","path":"css/prism_dark.css","modified":0,"renderable":1},{"_id":"themes/mic/source/css/prism_default.css","path":"css/prism_default.css","modified":0,"renderable":1},{"_id":"themes/mic/source/css/prism_funky.css","path":"css/prism_funky.css","modified":0,"renderable":1},{"_id":"themes/mic/source/css/prism_solarized.css","path":"css/prism_solarized.css","modified":0,"renderable":1},{"_id":"themes/mic/source/css/prism_okaidia.css","path":"css/prism_okaidia.css","modified":0,"renderable":1},{"_id":"themes/mic/source/css/typo.css","path":"css/typo.css","modified":0,"renderable":1},{"_id":"themes/mic/source/css/prism_twilight.css","path":"css/prism_twilight.css","modified":0,"renderable":1},{"_id":"themes/mic/source/images/12.jpg","path":"images/12.jpg","modified":0,"renderable":1},{"_id":"themes/mic/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/mic/source/images/21.jpg","path":"images/21.jpg","modified":0,"renderable":1},{"_id":"themes/mic/source/images/3123.jpg","path":"images/3123.jpg","modified":0,"renderable":1},{"_id":"themes/mic/source/images/me.jpg","path":"images/me.jpg","modified":0,"renderable":1},{"_id":"themes/mic/source/images/overlay.png","path":"images/overlay.png","modified":0,"renderable":1},{"_id":"themes/mic/source/images/pic03.jpg","path":"images/pic03.jpg","modified":0,"renderable":1},{"_id":"themes/mic/source/images/pic02.jpg","path":"images/pic02.jpg","modified":0,"renderable":1},{"_id":"themes/mic/source/images/pic01.jpg","path":"images/pic01.jpg","modified":0,"renderable":1},{"_id":"themes/mic/source/images/pic04.jpg","path":"images/pic04.jpg","modified":0,"renderable":1},{"_id":"themes/mic/source/images/pic05.jpg","path":"images/pic05.jpg","modified":0,"renderable":1},{"_id":"themes/mic/source/images/pic06.jpg","path":"images/pic06.jpg","modified":0,"renderable":1},{"_id":"themes/mic/source/images/pic09.jpg","path":"images/pic09.jpg","modified":0,"renderable":1},{"_id":"themes/mic/source/images/pic07.jpg","path":"images/pic07.jpg","modified":0,"renderable":1},{"_id":"themes/mic/source/images/pic08.jpg","path":"images/pic08.jpg","modified":0,"renderable":1},{"_id":"themes/mic/source/images/pic10.jpg","path":"images/pic10.jpg","modified":0,"renderable":1},{"_id":"themes/mic/source/images/pic11.jpg","path":"images/pic11.jpg","modified":0,"renderable":1},{"_id":"themes/mic/source/images/picx03.jpg","path":"images/picx03.jpg","modified":0,"renderable":1},{"_id":"themes/mic/source/images/pic12.jpg","path":"images/pic12.jpg","modified":0,"renderable":1},{"_id":"themes/mic/source/fonts/FZLT.ttf","path":"fonts/FZLT.ttf","modified":0,"renderable":1},{"_id":"themes/mic/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/mic/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/mic/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/mic/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/mic/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/mic/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/mic/source/img/bg.jpg","path":"img/bg.jpg","modified":0,"renderable":1},{"_id":"themes/mic/source/img/logo_miccall.png","path":"img/logo_miccall.png","modified":0,"renderable":1},{"_id":"themes/mic/source/js/jquery.scrollex.min.js","path":"js/jquery.scrollex.min.js","modified":0,"renderable":1},{"_id":"themes/mic/source/js/gallery_skel.min.js","path":"js/gallery_skel.min.js","modified":0,"renderable":1},{"_id":"themes/mic/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/mic/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":0,"renderable":1},{"_id":"themes/mic/source/js/jquery.scrolly.min.js","path":"js/jquery.scrolly.min.js","modified":0,"renderable":1},{"_id":"themes/mic/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/mic/source/js/mic_gallery.js","path":"js/mic_gallery.js","modified":0,"renderable":1},{"_id":"themes/mic/source/js/prism.js","path":"js/prism.js","modified":0,"renderable":1},{"_id":"themes/mic/source/js/skel.min.js","path":"js/skel.min.js","modified":0,"renderable":1},{"_id":"themes/mic/source/js/util.js","path":"js/util.js","modified":0,"renderable":1},{"_id":"themes/mic/source/css/images/arrow-small.svg","path":"css/images/arrow-small.svg","modified":0,"renderable":1},{"_id":"themes/mic/source/css/images/arrow.svg","path":"css/images/arrow.svg","modified":0,"renderable":1},{"_id":"themes/mic/source/css/images/close-small-alt.svg","path":"css/images/close-small-alt.svg","modified":0,"renderable":1},{"_id":"themes/mic/source/css/images/close-small.svg","path":"css/images/close-small.svg","modified":0,"renderable":1},{"_id":"themes/mic/source/css/images/close.svg","path":"css/images/close.svg","modified":0,"renderable":1},{"_id":"themes/mic/source/css/images/open-small.svg","path":"css/images/open-small.svg","modified":0,"renderable":1},{"_id":"themes/mic/source/css/images/open.svg","path":"css/images/open.svg","modified":0,"renderable":1},{"_id":"themes/mic/source/css/images/spinner.svg","path":"css/images/spinner.svg","modified":0,"renderable":1},{"_id":"themes/mic/source/images/fulls/01.jpg","path":"images/fulls/01.jpg","modified":0,"renderable":1},{"_id":"themes/mic/source/images/fulls/02.jpg","path":"images/fulls/02.jpg","modified":0,"renderable":1},{"_id":"themes/mic/source/images/fulls/04.jpg","path":"images/fulls/04.jpg","modified":0,"renderable":1},{"_id":"themes/mic/source/images/fulls/03.jpg","path":"images/fulls/03.jpg","modified":0,"renderable":1},{"_id":"themes/mic/source/images/fulls/06.jpg","path":"images/fulls/06.jpg","modified":0,"renderable":1},{"_id":"themes/mic/source/images/fulls/07.jpg","path":"images/fulls/07.jpg","modified":0,"renderable":1},{"_id":"themes/mic/source/images/fulls/08.jpg","path":"images/fulls/08.jpg","modified":0,"renderable":1},{"_id":"themes/mic/source/images/fulls/09.jpg","path":"images/fulls/09.jpg","modified":0,"renderable":1},{"_id":"themes/mic/source/images/fulls/10.jpg","path":"images/fulls/10.jpg","modified":0,"renderable":1},{"_id":"themes/mic/source/images/fulls/05.jpg","path":"images/fulls/05.jpg","modified":0,"renderable":1},{"_id":"themes/mic/source/images/fulls/11.jpg","path":"images/fulls/11.jpg","modified":0,"renderable":1},{"_id":"themes/mic/source/images/thumbs/01.jpg","path":"images/thumbs/01.jpg","modified":0,"renderable":1},{"_id":"themes/mic/source/images/fulls/12.jpg","path":"images/fulls/12.jpg","modified":0,"renderable":1},{"_id":"themes/mic/source/images/thumbs/02.jpg","path":"images/thumbs/02.jpg","modified":0,"renderable":1},{"_id":"themes/mic/source/images/thumbs/03.jpg","path":"images/thumbs/03.jpg","modified":0,"renderable":1},{"_id":"themes/mic/source/images/thumbs/04.jpg","path":"images/thumbs/04.jpg","modified":0,"renderable":1},{"_id":"themes/mic/source/images/thumbs/05.jpg","path":"images/thumbs/05.jpg","modified":0,"renderable":1},{"_id":"themes/mic/source/images/thumbs/06.jpg","path":"images/thumbs/06.jpg","modified":0,"renderable":1},{"_id":"themes/mic/source/images/thumbs/07.jpg","path":"images/thumbs/07.jpg","modified":0,"renderable":1},{"_id":"themes/mic/source/images/thumbs/08.jpg","path":"images/thumbs/08.jpg","modified":0,"renderable":1},{"_id":"themes/mic/source/images/thumbs/09.jpg","path":"images/thumbs/09.jpg","modified":0,"renderable":1},{"_id":"themes/mic/source/images/thumbs/10.jpg","path":"images/thumbs/10.jpg","modified":0,"renderable":1},{"_id":"themes/mic/source/images/thumbs/11.jpg","path":"images/thumbs/11.jpg","modified":0,"renderable":1},{"_id":"themes/mic/source/images/thumbs/12.jpg","path":"images/thumbs/12.jpg","modified":0,"renderable":1},{"_id":"themes/mic/source/js/gallery/gallery.js","path":"js/gallery/gallery.js","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"source/img/ironman-draw.png","path":"img/ironman-draw.png","modified":0,"renderable":0},{"_id":"source/img/404-bg.jpg","path":"img/404-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/signature/Just-do-it-white.png","path":"img/signature/Just-do-it-white.png","modified":0,"renderable":0},{"_id":"source/img/signature/dusign.png","path":"img/signature/dusign.png","modified":0,"renderable":0},{"_id":"themes/snail/source/css/archive.styl","path":"css/archive.styl","modified":0,"renderable":1},{"_id":"themes/snail/source/css/dusign-common-dark.css","path":"css/dusign-common-dark.css","modified":0,"renderable":1},{"_id":"themes/snail/source/css/dusign-common-light.css","path":"css/dusign-common-light.css","modified":0,"renderable":1},{"_id":"themes/snail/source/css/dusign-dark.css","path":"css/dusign-dark.css","modified":0,"renderable":1},{"_id":"themes/snail/source/css/dusign-light.css","path":"css/dusign-light.css","modified":0,"renderable":1},{"_id":"themes/snail/source/css/font-awesome.css","path":"css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/snail/source/css/font-awesome.star.css","path":"css/font-awesome.star.css","modified":0,"renderable":1},{"_id":"themes/snail/source/css/fonts.googleapis.css","path":"css/fonts.googleapis.css","modified":0,"renderable":1},{"_id":"themes/snail/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/snail/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/snail/source/css/photography.css","path":"css/photography.css","modified":0,"renderable":1},{"_id":"themes/snail/source/css/rocket.styl","path":"css/rocket.styl","modified":0,"renderable":1},{"_id":"themes/snail/source/css/signature.styl","path":"css/signature.styl","modified":0,"renderable":1},{"_id":"themes/snail/source/css/toc.styl","path":"css/toc.styl","modified":0,"renderable":1},{"_id":"themes/snail/source/css/widget.styl","path":"css/widget.styl","modified":0,"renderable":1},{"_id":"themes/snail/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/snail/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/snail/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/snail/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/snail/source/img/cd.png","path":"img/cd.png","modified":0,"renderable":1},{"_id":"themes/snail/source/img/cd_tou.png","path":"img/cd_tou.png","modified":0,"renderable":1},{"_id":"themes/snail/source/img/default.jpg","path":"img/default.jpg","modified":0,"renderable":1},{"_id":"themes/snail/source/img/notice.png","path":"img/notice.png","modified":0,"renderable":1},{"_id":"themes/snail/source/img/top-light.png","path":"img/top-light.png","modified":0,"renderable":1},{"_id":"themes/snail/source/img/tp.png","path":"img/tp.png","modified":0,"renderable":1},{"_id":"themes/snail/source/img/wave-dark.png","path":"img/wave-dark.png","modified":0,"renderable":1},{"_id":"themes/snail/source/img/wave-light.png","path":"img/wave-light.png","modified":0,"renderable":1},{"_id":"themes/snail/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/snail/source/js/canvas-nest.js","path":"js/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/snail/source/js/hux-blog.js","path":"js/hux-blog.js","modified":0,"renderable":1},{"_id":"themes/snail/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":0,"renderable":1},{"_id":"themes/snail/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":0,"renderable":1},{"_id":"themes/snail/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":0,"renderable":1},{"_id":"themes/snail/source/js/line.js","path":"js/line.js","modified":0,"renderable":1},{"_id":"themes/snail/source/js/mouse-click.js","path":"js/mouse-click.js","modified":0,"renderable":1},{"_id":"themes/snail/source/js/ribbonDynamic.js","path":"js/ribbonDynamic.js","modified":0,"renderable":1},{"_id":"themes/snail/source/js/ribbonStatic.js","path":"js/ribbonStatic.js","modified":0,"renderable":1},{"_id":"themes/snail/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/snail/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/snail/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"source/img/default.jpg","path":"img/default.jpg","modified":0,"renderable":0},{"_id":"themes/snail/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/snail/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/snail/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/snail/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/snail/source/js/bootstrap.js","path":"js/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/snail/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"source/img/header_img/categories-bg.jpg","path":"img/header_img/categories-bg.jpg","modified":0,"renderable":0},{"_id":"themes/snail/source/css/bootstrap.css","path":"css/bootstrap.css","modified":0,"renderable":1},{"_id":"themes/snail/source/css/images/ironman.png","path":"css/images/ironman.png","modified":0,"renderable":1},{"_id":"themes/snail/source/css/images/rocket.png","path":"css/images/rocket.png","modified":0,"renderable":1},{"_id":"themes/snail/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/snail/source/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3g3D_vx3rCubqg.woff2","path":"fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3g3D_vx3rCubqg.woff2","modified":0,"renderable":1},{"_id":"themes/snail/source/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gTD_vx3rCubqg.woff2","path":"fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gTD_vx3rCubqg.woff2","modified":0,"renderable":1},{"_id":"themes/snail/source/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gbD_vx3rCubqg.woff2","path":"fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gbD_vx3rCubqg.woff2","modified":0,"renderable":1},{"_id":"themes/snail/source/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gfD_vx3rCubqg.woff2","path":"fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gfD_vx3rCubqg.woff2","modified":0,"renderable":1},{"_id":"themes/snail/source/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gnD_vx3rCs.woff2","path":"fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gnD_vx3rCs.woff2","modified":0,"renderable":1},{"_id":"themes/snail/source/fonts/googleapis/JTUSjIg1_i6t8kCHKm459W1hyyTh89ZNpQ.woff2","path":"fonts/googleapis/JTUSjIg1_i6t8kCHKm459W1hyyTh89ZNpQ.woff2","modified":0,"renderable":1},{"_id":"themes/snail/source/fonts/googleapis/JTUSjIg1_i6t8kCHKm459WRhyyTh89ZNpQ.woff2","path":"fonts/googleapis/JTUSjIg1_i6t8kCHKm459WRhyyTh89ZNpQ.woff2","modified":0,"renderable":1},{"_id":"themes/snail/source/fonts/googleapis/JTUSjIg1_i6t8kCHKm459WZhyyTh89ZNpQ.woff2","path":"fonts/googleapis/JTUSjIg1_i6t8kCHKm459WZhyyTh89ZNpQ.woff2","modified":0,"renderable":1},{"_id":"themes/snail/source/fonts/googleapis/JTUSjIg1_i6t8kCHKm459WdhyyTh89ZNpQ.woff2","path":"fonts/googleapis/JTUSjIg1_i6t8kCHKm459WdhyyTh89ZNpQ.woff2","modified":0,"renderable":1},{"_id":"themes/snail/source/fonts/googleapis/JTUSjIg1_i6t8kCHKm459WlhyyTh89Y.woff2","path":"fonts/googleapis/JTUSjIg1_i6t8kCHKm459WlhyyTh89Y.woff2","modified":0,"renderable":1},{"_id":"themes/snail/source/js/gitment.js","path":"js/gitment.js","modified":0,"renderable":1},{"_id":"themes/snail/source/js/music-player/player.js","path":"js/music-player/player.js","modified":0,"renderable":1},{"_id":"themes/snail/source/js/music-player/utill.js","path":"js/music-player/utill.js","modified":0,"renderable":1},{"_id":"themes/snail/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"themes/snail/source/js/music-player/jquery.min.js","path":"js/music-player/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/snail/source/css/music-player/css/player.css","path":"css/music-player/css/player.css","modified":0,"renderable":1},{"_id":"themes/snail/source/css/music-player/css/reset.css","path":"css/music-player/css/reset.css","modified":0,"renderable":1},{"_id":"themes/snail/source/css/music-player/fonts/iconfont.css","path":"css/music-player/fonts/iconfont.css","modified":0,"renderable":1},{"_id":"source/photography/photo/yc.jpeg","path":"photography/photo/yc.jpeg","modified":0,"renderable":0},{"_id":"themes/snail/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/photography/photo/wx.jpeg","path":"photography/photo/wx.jpeg","modified":0,"renderable":0},{"_id":"source/img/header_img/tag-bg.jpg","path":"img/header_img/tag-bg.jpg","modified":0,"renderable":0},{"_id":"source/photography/photo/yjyj3.jpeg","path":"photography/photo/yjyj3.jpeg","modified":0,"renderable":0},{"_id":"source/img/header_img/photography-bg.jpeg","path":"img/header_img/photography-bg.jpeg","modified":0,"renderable":0},{"_id":"source/photography/photo/dfmz.jpeg","path":"photography/photo/dfmz.jpeg","modified":0,"renderable":0},{"_id":"source/photography/photo/yjyj2.jpeg","path":"photography/photo/yjyj2.jpeg","modified":0,"renderable":0},{"_id":"source/photography/photo/yjyj1.jpeg","path":"photography/photo/yjyj1.jpeg","modified":0,"renderable":0},{"_id":"source/photography/photo/ly.jpeg","path":"photography/photo/ly.jpeg","modified":0,"renderable":0},{"_id":"source/img/header_img/home-bg-1-dark.jpg","path":"img/header_img/home-bg-1-dark.jpg","modified":0,"renderable":0},{"_id":"source/photography/photo/lsqs.jpeg","path":"photography/photo/lsqs.jpeg","modified":0,"renderable":0},{"_id":"source/img/header_img/archive-bg.jpg","path":"img/header_img/archive-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/Iron-Man-3.jpg","path":"img/header_img/Iron-Man-3.jpg","modified":0,"renderable":0},{"_id":"source/img/ironman-draw1.png","path":"img/ironman-draw1.png","modified":0,"renderable":0},{"_id":"source/img/ironman-draw2.png","path":"img/ironman-draw2.png","modified":0,"renderable":0},{"_id":"source/img/signature/whitecute.png","path":"img/signature/whitecute.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/first.md","hash":"b54ff1058f7475269740246d2400dc3cd94b6589","modified":1627369236975},{"_id":"source/_posts/hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1627368813398},{"_id":"themes/mic/LICENSE","hash":"2ea9f02239dc6b5fdbfff01fcdf85bcc8c13667c","modified":1627368813508},{"_id":"themes/mic/_config.yml","hash":"89c4ec505013c08d716e5003358be319123ade5b","modified":1627368813510},{"_id":"themes/mic/readme.md","hash":"265b03fc7f82a391c34508857344df9bb1e11625","modified":1627368813539},{"_id":"themes/mic/layout/index.ejs","hash":"7478c414bc8eac98c335b61649b3d43e1cba5c6f","modified":1627368813537},{"_id":"themes/mic/layout/layout.ejs","hash":"b7134f32ae661f2bd7bfa6d14a2408b19eb288ef","modified":1627368813538},{"_id":"themes/mic/layout/post.ejs","hash":"1208744dfdb7f70ed64d3ddad1ef826898e2800a","modified":1627368813538},{"_id":"themes/mic/layout/_partial/copyright.ejs","hash":"1b900fcff36deef63d48b567b62427cbdfac2aad","modified":1627368813512},{"_id":"themes/mic/layout/_partial/comment.ejs","hash":"22c8ddb0d9033257664954bd2e2ee996a95e5dc3","modified":1627368813511},{"_id":"themes/mic/layout/_partial/footer.ejs","hash":"6f81a21679280023b329db2b729ea5fc902d32bf","modified":1627368813513},{"_id":"themes/mic/layout/_partial/gallery_head.ejs","hash":"6995a50e8648cfabff6d00ed6c3ffc33aeeb13bd","modified":1627368813513},{"_id":"themes/mic/layout/_partial/head.ejs","hash":"e224aba715d3f830db435501383559aba813dbb8","modified":1627368813515},{"_id":"themes/mic/layout/_partial/gallery_js.ejs","hash":"123c3b0e446ce6f00561195ccf06c3fa2bb9b67c","modified":1627368813514},{"_id":"themes/mic/layout/_partial/headerlogo.ejs","hash":"16755bfb4be7ad831ca951bb68ecd3cd2fe28106","modified":1627368813516},{"_id":"themes/mic/layout/_partial/importJS.ejs","hash":"d19ca227416d6b52aad5ee119b01cec04171e468","modified":1627368813516},{"_id":"themes/mic/layout/_partial/intro.ejs","hash":"2952def928e752064cf967ed4c3585455b159644","modified":1627368813518},{"_id":"themes/mic/layout/_partial/mainfirst.ejs","hash":"1c731e0c0aa6cea88e0185036da9e12b1c2ea2f6","modified":1627368813518},{"_id":"themes/mic/layout/_partial/mathjax.ejs","hash":"bc58e1e1cd56f53081b96e63ad2b21b60ce04cd4","modified":1627368813520},{"_id":"themes/mic/layout/_partial/nav.ejs","hash":"7aa4415f720084d457924314580b89ff710af424","modified":1627368813520},{"_id":"themes/mic/layout/_widget/page-gallery.ejs","hash":"13c1414ae48ede101902f589032bfd74487b40c8","modified":1627368813533},{"_id":"themes/mic/layout/_widget/page-links.ejs","hash":"c31b1ca6389ba2fd297fed8d8c32f2207c8510fa","modified":1627368813534},{"_id":"themes/mic/layout/_widget/page-tagcloud.ejs","hash":"bc891c99c4f2312ea8946dc401332ab82043f4fb","modified":1627368813535},{"_id":"themes/mic/source/css/backcss.css","hash":"cf72e1e50fd17bd69c15ed939b71fcede0ef6c14","modified":1627368813541},{"_id":"themes/mic/source/css/dropdownMenu.css","hash":"6198125bb51428ff612b62bab879409a1b4c73a9","modified":1627368813543},{"_id":"themes/mic/source/css/font-awesome.min.css","hash":"a715d31a96ccab32670e709082e40cbf11497d61","modified":1627368813544},{"_id":"themes/mic/source/css/demo.css","hash":"aafc11b3cb9910853ef26acb491e24f2880e3e3e","modified":1627368813542},{"_id":"themes/mic/source/css/gallery.min.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1627368813547},{"_id":"themes/mic/source/css/gallery.css","hash":"69eea5facb3a5991fe74d7fb9460bbedc3ffae86","modified":1627368813545},{"_id":"themes/mic/source/css/mic_gallery.css","hash":"6a85430e1b17ad13ad7f2ae45617899b2cb0dd56","modified":1627368813555},{"_id":"themes/mic/source/css/item.css","hash":"89ef8ad5c7c22476d4c8b53106072b4e593f5446","modified":1627368813554},{"_id":"themes/mic/source/css/normalize.css","hash":"a0ff1e2feee0b1bb7e54a88fd6367ba3e7435aaf","modified":1627368813559},{"_id":"themes/mic/source/css/my_link.css","hash":"3d89cfd70d9d50fcde140d818b5d8e82424c0497","modified":1627368813558},{"_id":"themes/mic/source/css/noscript.css","hash":"721fafde7779732ee13de81be1c1c5baa3655cd2","modified":1627368813560},{"_id":"themes/mic/source/css/ok_prism.css","hash":"54c6c07bbfdd4f677443b183166b87475dee2d74","modified":1627368813560},{"_id":"themes/mic/source/css/prism.css","hash":"4d824f5ffeca752156d1fbf96565be187f880ce2","modified":1627368813561},{"_id":"themes/mic/source/css/prism_coy.css","hash":"3608bd92724b39bc4e5307bfb3eb682e97be0ad8","modified":1627368813562},{"_id":"themes/mic/source/css/prism_dark.css","hash":"dd3166d33870e9a21550762c978b95331e0f20a3","modified":1627368813563},{"_id":"themes/mic/source/css/prism_default.css","hash":"7d18c8e21f463a7880c4d6a444cbf573494640e6","modified":1627368813564},{"_id":"themes/mic/source/css/prism_funky.css","hash":"59db786b898ed8aa067e64ad4e54dd94631b075b","modified":1627368813565},{"_id":"themes/mic/source/css/prism_solarized.css","hash":"554f4c2d24b1824211ffbaa3eb74b5b4db3dc34e","modified":1627368813566},{"_id":"themes/mic/source/css/prism_okaidia.css","hash":"54c6c07bbfdd4f677443b183166b87475dee2d74","modified":1627368813565},{"_id":"themes/mic/source/css/typo.css","hash":"843e6cc6b1004219a850781c58bab3d221b00ddb","modified":1627368813568},{"_id":"themes/mic/source/css/prism_twilight.css","hash":"3aec78eea4c35812bfac6b776f4fea79d4d7668e","modified":1627368813567},{"_id":"themes/mic/source/images/12.jpg","hash":"88d68b169744a76ca7b21a258fc0812bc03ee701","modified":1627368813615},{"_id":"themes/mic/source/images/3123.jpg","hash":"fc005184ff616231647c5dc85c63167040d810ba","modified":1627368813621},{"_id":"themes/mic/source/images/me.jpg","hash":"b520aa4d797fc0794d93104f260d18a523b67522","modified":1627368813650},{"_id":"themes/mic/source/images/overlay.png","hash":"e978d81201508e6fcbe0fe95485dae1a4b983a8d","modified":1627368813652},{"_id":"themes/mic/source/images/pic03.jpg","hash":"ec46b8b1490a794ea5d4c61058959b9a52ac262f","modified":1627368813656},{"_id":"themes/mic/source/images/pic02.jpg","hash":"ab77495fef5102f94e36b71d4308cd682dd4b1a8","modified":1627368813654},{"_id":"themes/mic/source/images/pic01.jpg","hash":"774db644cdac607e0d9d72ca65a4961f9a250c11","modified":1627368813653},{"_id":"themes/mic/source/images/pic05.jpg","hash":"b74d638c0aa9e90f94b056db4c0a886e382973f1","modified":1627368813658},{"_id":"themes/mic/source/images/pic04.jpg","hash":"ee299cd40108e50d7151333de525049f8ec4f150","modified":1627368813657},{"_id":"themes/mic/source/images/pic06.jpg","hash":"3d8572663edf8a77b99bdfd93491d4f6a7298aaf","modified":1627368813659},{"_id":"themes/mic/source/images/pic09.jpg","hash":"6aae76e8215e3a6e785ce2a65484e4df03ed5fe9","modified":1627368813661},{"_id":"themes/mic/source/images/pic07.jpg","hash":"de06b4eee3d0e42ddcac415adc8c83466f430253","modified":1627368813659},{"_id":"themes/mic/source/images/pic08.jpg","hash":"993e8ff91c20b6d28b6302d3a18367547610c58a","modified":1627368813661},{"_id":"themes/mic/source/images/pic10.jpg","hash":"814a661f2966a3c8fe2c89034f62e828f291d770","modified":1627368813662},{"_id":"themes/mic/source/images/pic11.jpg","hash":"a034beb80041d238f36685706a019a269f159ac1","modified":1627368813663},{"_id":"themes/mic/source/images/picx03.jpg","hash":"cffaa38c9489f131f6f37763b37b937811b316df","modified":1627368813665},{"_id":"themes/mic/source/images/pic12.jpg","hash":"ae93f2674a3b1f1dcbfe9692f2e172e106c02d96","modified":1627368813664},{"_id":"themes/mic/source/js/jquery.scrollex.min.js","hash":"ede14d2a018d6df0ffd13514dc4662724ad8f9c9","modified":1627368813697},{"_id":"themes/mic/source/js/gallery_skel.min.js","hash":"955b722a7638bb20970efbc79e12d8bb628a36a6","modified":1627368813693},{"_id":"themes/mic/source/js/jquery.scrolly.min.js","hash":"91ee4deda8189fde4432a8f58cfe3b5f2aed9dcf","modified":1627368813698},{"_id":"themes/mic/source/js/lazyload.min.js","hash":"bccbdcb5e5c13543dc5cc764073e3a454739d458","modified":1627368813699},{"_id":"themes/mic/source/js/main.js","hash":"8bffd0514ed17f52c76cedb4d4424660467d7879","modified":1627368813700},{"_id":"themes/mic/source/js/mic_gallery.js","hash":"344ae990dcac628af652badc4574b72bc416020c","modified":1627368813702},{"_id":"themes/mic/source/js/skel.min.js","hash":"955b722a7638bb20970efbc79e12d8bb628a36a6","modified":1627368813707},{"_id":"themes/mic/source/js/util.js","hash":"e32e958f74bd5edc4e1fbdd9fa6c30425d3c7954","modified":1627368813708},{"_id":"themes/mic/source/css/images/arrow-small.svg","hash":"ecc2016f117d725f156bdb60a81e4d09d88961e1","modified":1627368813547},{"_id":"themes/mic/source/css/images/arrow.svg","hash":"84dba9fe4dffab02e5e32f66cea1e38c12129a7c","modified":1627368813549},{"_id":"themes/mic/source/css/images/close-small-alt.svg","hash":"7908654ee26cd247d52fb4fae6ad6b8060a00598","modified":1627368813550},{"_id":"themes/mic/source/css/images/close-small.svg","hash":"92f0c906a7540f0bac4e4aad1387362f218ee02f","modified":1627368813550},{"_id":"themes/mic/source/css/images/close.svg","hash":"205739dd10d087f013583087e012ee7423a99c34","modified":1627368813551},{"_id":"themes/mic/source/css/images/open-small.svg","hash":"068e6e2c79172fc81d8f1471750fd6f0658c682f","modified":1627368813552},{"_id":"themes/mic/source/css/images/open.svg","hash":"5e61408876123f8a53a1491899b1c813934c299b","modified":1627368813552},{"_id":"themes/mic/source/css/images/spinner.svg","hash":"285d4c263d37d920d65a1c67c870a05dbbdbb7c3","modified":1627368813553},{"_id":"themes/mic/source/images/fulls/01.jpg","hash":"cfc928948301b97ab2873e837284cd83cc3c6cff","modified":1627368813625},{"_id":"themes/mic/source/images/fulls/02.jpg","hash":"1a729f597316a7483ebcf39b5984ced1612a0410","modified":1627368813627},{"_id":"themes/mic/source/images/fulls/04.jpg","hash":"806679d4c4398335413b6b53941709a4aef7c3cd","modified":1627368813630},{"_id":"themes/mic/source/images/fulls/03.jpg","hash":"0f8c8109f8b605aa46ef571df1d16e8bdd43d090","modified":1627368813628},{"_id":"themes/mic/source/images/fulls/06.jpg","hash":"e97b29127a50c69cf445d0591cd94daab0f50e33","modified":1627368813635},{"_id":"themes/mic/source/images/fulls/07.jpg","hash":"eb41675450650b613195806b154c6badbb7eca4d","modified":1627368813636},{"_id":"themes/mic/source/images/fulls/08.jpg","hash":"d31c389218f04bc7ec510ac236fbe343048e3cfc","modified":1627368813639},{"_id":"themes/mic/source/images/fulls/09.jpg","hash":"61fab3aa8ceee938efb4965042ce2b5f51d3a584","modified":1627368813640},{"_id":"themes/mic/source/images/fulls/10.jpg","hash":"9a284568752a54ab9e8e9cd19c41750e05975d2a","modified":1627368813642},{"_id":"themes/mic/source/images/fulls/05.jpg","hash":"232b0b9e3b6e751ebb2e6c4284651639526200e3","modified":1627368813632},{"_id":"themes/mic/source/images/fulls/11.jpg","hash":"cff6219163e3154c1263ee1d7f924c0ae3ccc9e7","modified":1627368813644},{"_id":"themes/mic/source/images/thumbs/01.jpg","hash":"4f5a2b9fdf44146d60f8dd3a32c81a8419b9148f","modified":1627368813667},{"_id":"themes/mic/source/images/fulls/12.jpg","hash":"a631491537584e2e23926d9d6f50ce60bb884b18","modified":1627368813646},{"_id":"themes/mic/source/images/thumbs/02.jpg","hash":"396a422cbc1b94b6c9b00f6a34c02b05913230ba","modified":1627368813668},{"_id":"themes/mic/source/images/thumbs/03.jpg","hash":"e3915b1cc3283b5ec33f49e2591ebf2e6be2362e","modified":1627368813669},{"_id":"themes/mic/source/images/thumbs/04.jpg","hash":"3c60445217b1b52b1fd6cae4578356c564d7624d","modified":1627368813670},{"_id":"themes/mic/source/images/thumbs/05.jpg","hash":"3e28c2253db93ba42d16ba9a1f451dbc452fd947","modified":1627368813671},{"_id":"themes/mic/source/images/thumbs/06.jpg","hash":"ffc80bb5fe28626d9462e06d9f01d2a5f99b0ae9","modified":1627368813672},{"_id":"themes/mic/source/images/thumbs/07.jpg","hash":"45194a98089345e4f135c0f0bfffeee7ccdd9c99","modified":1627368813673},{"_id":"themes/mic/source/images/thumbs/08.jpg","hash":"e0384120f6acfa64ad0b5bd0d7e114e9f239294e","modified":1627368813674},{"_id":"themes/mic/source/images/thumbs/09.jpg","hash":"bc8a02decf65e44657f02dcc11c7395bfa41ffdb","modified":1627368813676},{"_id":"themes/mic/source/images/thumbs/10.jpg","hash":"ccfee49fbca187bad971336cb8fda7dec05ab01e","modified":1627368813677},{"_id":"themes/mic/source/images/thumbs/11.jpg","hash":"66a7fb237824b1b2fd550a068bb6a32f5031ab8f","modified":1627368813678},{"_id":"themes/mic/source/images/thumbs/12.jpg","hash":"17ab685447ed06b6c12e4d42f38111c684221bc7","modified":1627368813679},{"_id":"themes/mic/source/js/gallery/gallery.js","hash":"79688611831faca31d5ef0c6d90397c29781fa98","modified":1627368813692},{"_id":"themes/mic/layout/_widget/comment/disqus_click/main.ejs","hash":"f4fb0405a22ec75caa75de6cc8804e26a00e52e3","modified":1627368813529},{"_id":"themes/mic/layout/_widget/comment/disqus_click/common.ejs","hash":"83605554328fc4456b88452247a4ba26b42bdcad","modified":1627368813527},{"_id":"themes/mic/layout/_widget/comment/disqus_click/enter.ejs","hash":"2af0b1276184decab109496e359cb81733c3fa27","modified":1627368813528},{"_id":"themes/mic/layout/_widget/comment/disqus/enter.ejs","hash":"69ef53a73be6827772f2b5e8cadf8a13cf6a938c","modified":1627368813525},{"_id":"themes/mic/layout/_widget/comment/disqus/common.ejs","hash":"c3e8ce6eb296b9b23836beaaf08b04d5e4ae5c11","modified":1627368813525},{"_id":"themes/mic/layout/_widget/comment/disqus/main.ejs","hash":"371884a4108219877c49563c0a07f0b9bc6363f8","modified":1627368813526},{"_id":"themes/mic/layout/_widget/comment/changyan/common.ejs","hash":"49f6580a358c75d152ec98c3e064e202ca188528","modified":1627368813522},{"_id":"themes/mic/layout/_widget/comment/changyan/main.ejs","hash":"720b1fd954577382ebdb60de6a93fb875843a9bb","modified":1627368813524},{"_id":"themes/mic/layout/_widget/comment/changyan/enter.ejs","hash":"f2728b174b12c3dc62b0199f540473ffb2a03ad8","modified":1627368813523},{"_id":"themes/mic/layout/_widget/comment/valine/enter.ejs","hash":"691bdffce98b55d89977e610400a8a416c3b8750","modified":1627368813531},{"_id":"themes/mic/layout/_widget/comment/valine/main.ejs","hash":"a2a8441a533bdb60848f9b6da92b9b79fb6ea0de","modified":1627368813532},{"_id":"themes/mic/source/css/mic_main.css","hash":"630edeb7a261f85b8cf77c7b80f333852024fec3","modified":1627368813557},{"_id":"themes/mic/source/images/logo.png","hash":"ee2cf634d838f8acab5b826400edb0b42c8ce52b","modified":1627368813649},{"_id":"themes/mic/source/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1627368813600},{"_id":"themes/mic/source/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1627368813599},{"_id":"themes/mic/source/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1627368813611},{"_id":"themes/mic/source/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1627368813613},{"_id":"themes/mic/source/img/logo_miccall.png","hash":"ee2cf634d838f8acab5b826400edb0b42c8ce52b","modified":1627368813690},{"_id":"themes/mic/source/js/jquery.min.js","hash":"e6082a7b52db82604ac446d2e6a32cb5af263781","modified":1627368813696},{"_id":"themes/mic/source/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1627368813609},{"_id":"source/images/bg.jpg","hash":"af7fe6067d0c21f558502613eed86d8246000bba","modified":1627368813688},{"_id":"themes/mic/source/js/prism.js","hash":"21582bba61751fe137d814b9f6ecd77e74655330","modified":1627368813706},{"_id":"themes/mic/source/fonts/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1627368813605},{"_id":"themes/mic/source/images/21.jpg","hash":"0b2570df0e6d9b79a0c50d0b4ce8799bd40ea421","modified":1627368813620},{"_id":"themes/mic/source/img/bg.jpg","hash":"af7fe6067d0c21f558502613eed86d8246000bba","modified":1627368813688},{"_id":"themes/mic/source/fonts/FZLT.ttf","hash":"24dfab81236612d596c97eb38b3adf5de99f669c","modified":1627368813595},{"_id":"public/2021/07/27/first/index.html","hash":"ed40d06415cbb34e344f32a74163b9fa6c0da5b6","modified":1627369070208},{"_id":"public/2021/07/27/hello-world/index.html","hash":"5ad958c1fdeca4fcd44e2af1dceac25fb74903d8","modified":1627369070208},{"_id":"public/archives/index.html","hash":"89380cf2244777613e965853646ba2165d95886c","modified":1670395329127},{"_id":"public/archives/2021/index.html","hash":"08504b9817f32f0c25a4ec29bfa0e635f0b34383","modified":1670395329127},{"_id":"public/archives/2021/07/index.html","hash":"5b5123c7f61cc3e67c57a436fcc9c1bf21156697","modified":1670395329127},{"_id":"public/index.html","hash":"b0ec57a18c295940d50ea9ec1ca5205ae4ee0b8a","modified":1670395329127},{"_id":"public/images/12.jpg","hash":"88d68b169744a76ca7b21a258fc0812bc03ee701","modified":1670395329127},{"_id":"public/images/3123.jpg","hash":"fc005184ff616231647c5dc85c63167040d810ba","modified":1670395329127},{"_id":"public/images/me.jpg","hash":"b520aa4d797fc0794d93104f260d18a523b67522","modified":1670395329127},{"_id":"public/images/overlay.png","hash":"e978d81201508e6fcbe0fe95485dae1a4b983a8d","modified":1670395329127},{"_id":"public/images/pic03.jpg","hash":"ec46b8b1490a794ea5d4c61058959b9a52ac262f","modified":1670395329127},{"_id":"public/images/pic02.jpg","hash":"ab77495fef5102f94e36b71d4308cd682dd4b1a8","modified":1670395329127},{"_id":"public/images/pic01.jpg","hash":"774db644cdac607e0d9d72ca65a4961f9a250c11","modified":1670395329127},{"_id":"public/images/pic04.jpg","hash":"ee299cd40108e50d7151333de525049f8ec4f150","modified":1670395329127},{"_id":"public/images/pic05.jpg","hash":"b74d638c0aa9e90f94b056db4c0a886e382973f1","modified":1670395329127},{"_id":"public/images/pic06.jpg","hash":"3d8572663edf8a77b99bdfd93491d4f6a7298aaf","modified":1670395329127},{"_id":"public/images/pic09.jpg","hash":"6aae76e8215e3a6e785ce2a65484e4df03ed5fe9","modified":1670395329127},{"_id":"public/images/pic07.jpg","hash":"de06b4eee3d0e42ddcac415adc8c83466f430253","modified":1670395329127},{"_id":"public/images/pic08.jpg","hash":"993e8ff91c20b6d28b6302d3a18367547610c58a","modified":1670395329127},{"_id":"public/images/pic10.jpg","hash":"814a661f2966a3c8fe2c89034f62e828f291d770","modified":1670395329127},{"_id":"public/images/pic11.jpg","hash":"a034beb80041d238f36685706a019a269f159ac1","modified":1670395329127},{"_id":"public/images/picx03.jpg","hash":"cffaa38c9489f131f6f37763b37b937811b316df","modified":1670395329127},{"_id":"public/images/pic12.jpg","hash":"ae93f2674a3b1f1dcbfe9692f2e172e106c02d96","modified":1670395329127},{"_id":"public/css/images/arrow-small.svg","hash":"ecc2016f117d725f156bdb60a81e4d09d88961e1","modified":1670395329127},{"_id":"public/css/images/arrow.svg","hash":"84dba9fe4dffab02e5e32f66cea1e38c12129a7c","modified":1670395329127},{"_id":"public/css/images/close-small-alt.svg","hash":"7908654ee26cd247d52fb4fae6ad6b8060a00598","modified":1670395329127},{"_id":"public/css/images/close-small.svg","hash":"92f0c906a7540f0bac4e4aad1387362f218ee02f","modified":1670395329127},{"_id":"public/css/images/close.svg","hash":"205739dd10d087f013583087e012ee7423a99c34","modified":1670395329127},{"_id":"public/css/images/open-small.svg","hash":"068e6e2c79172fc81d8f1471750fd6f0658c682f","modified":1670395329127},{"_id":"public/css/images/open.svg","hash":"5e61408876123f8a53a1491899b1c813934c299b","modified":1670395329127},{"_id":"public/css/images/spinner.svg","hash":"285d4c263d37d920d65a1c67c870a05dbbdbb7c3","modified":1670395329127},{"_id":"public/images/fulls/01.jpg","hash":"cfc928948301b97ab2873e837284cd83cc3c6cff","modified":1670395329127},{"_id":"public/images/fulls/02.jpg","hash":"1a729f597316a7483ebcf39b5984ced1612a0410","modified":1670395329127},{"_id":"public/images/fulls/04.jpg","hash":"806679d4c4398335413b6b53941709a4aef7c3cd","modified":1670395329127},{"_id":"public/images/fulls/03.jpg","hash":"0f8c8109f8b605aa46ef571df1d16e8bdd43d090","modified":1670395329127},{"_id":"public/images/fulls/06.jpg","hash":"e97b29127a50c69cf445d0591cd94daab0f50e33","modified":1670395329127},{"_id":"public/images/fulls/07.jpg","hash":"eb41675450650b613195806b154c6badbb7eca4d","modified":1670395329127},{"_id":"public/images/fulls/08.jpg","hash":"d31c389218f04bc7ec510ac236fbe343048e3cfc","modified":1670395329127},{"_id":"public/images/fulls/09.jpg","hash":"61fab3aa8ceee938efb4965042ce2b5f51d3a584","modified":1670395329127},{"_id":"public/images/fulls/05.jpg","hash":"232b0b9e3b6e751ebb2e6c4284651639526200e3","modified":1670395329127},{"_id":"public/images/fulls/11.jpg","hash":"cff6219163e3154c1263ee1d7f924c0ae3ccc9e7","modified":1670395329127},{"_id":"public/images/fulls/10.jpg","hash":"9a284568752a54ab9e8e9cd19c41750e05975d2a","modified":1670395329127},{"_id":"public/images/thumbs/01.jpg","hash":"4f5a2b9fdf44146d60f8dd3a32c81a8419b9148f","modified":1670395329127},{"_id":"public/images/fulls/12.jpg","hash":"a631491537584e2e23926d9d6f50ce60bb884b18","modified":1670395329127},{"_id":"public/images/thumbs/02.jpg","hash":"396a422cbc1b94b6c9b00f6a34c02b05913230ba","modified":1670395329127},{"_id":"public/images/thumbs/03.jpg","hash":"e3915b1cc3283b5ec33f49e2591ebf2e6be2362e","modified":1670395329127},{"_id":"public/images/thumbs/04.jpg","hash":"3c60445217b1b52b1fd6cae4578356c564d7624d","modified":1670395329127},{"_id":"public/images/thumbs/05.jpg","hash":"3e28c2253db93ba42d16ba9a1f451dbc452fd947","modified":1670395329127},{"_id":"public/images/thumbs/06.jpg","hash":"ffc80bb5fe28626d9462e06d9f01d2a5f99b0ae9","modified":1670395329127},{"_id":"public/images/thumbs/07.jpg","hash":"45194a98089345e4f135c0f0bfffeee7ccdd9c99","modified":1670395329127},{"_id":"public/images/thumbs/08.jpg","hash":"e0384120f6acfa64ad0b5bd0d7e114e9f239294e","modified":1670395329127},{"_id":"public/images/thumbs/09.jpg","hash":"bc8a02decf65e44657f02dcc11c7395bfa41ffdb","modified":1670395329127},{"_id":"public/images/thumbs/10.jpg","hash":"ccfee49fbca187bad971336cb8fda7dec05ab01e","modified":1670395329127},{"_id":"public/images/thumbs/11.jpg","hash":"66a7fb237824b1b2fd550a068bb6a32f5031ab8f","modified":1670395329127},{"_id":"public/images/thumbs/12.jpg","hash":"17ab685447ed06b6c12e4d42f38111c684221bc7","modified":1670395329127},{"_id":"public/images/logo.png","hash":"ee2cf634d838f8acab5b826400edb0b42c8ce52b","modified":1670395329127},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1670395329127},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1670395329127},{"_id":"public/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1670395329127},{"_id":"public/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1670395329127},{"_id":"public/img/logo_miccall.png","hash":"ee2cf634d838f8acab5b826400edb0b42c8ce52b","modified":1670395329127},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1670395329127},{"_id":"public/css/backcss.css","hash":"65db154a14ccb0e773a14e1d1262553e6f30aec5","modified":1670395329127},{"_id":"public/css/dropdownMenu.css","hash":"3e44ce25f19c28dcf2c12db1938ccce7a081c10f","modified":1670395329127},{"_id":"public/css/demo.css","hash":"99b020fe28a276c2b128a5048ab1325fc3303b96","modified":1670395329127},{"_id":"public/css/my_link.css","hash":"c9535592792f2271df88c39e4baf8c849e23db17","modified":1670395329127},{"_id":"public/css/normalize.css","hash":"a0ff1e2feee0b1bb7e54a88fd6367ba3e7435aaf","modified":1670395329127},{"_id":"public/css/ok_prism.css","hash":"e20586e80aeef3192c727e20d2efe4bd23846d29","modified":1670395329127},{"_id":"public/css/noscript.css","hash":"5579ccdecc63139609db824704331d8d4af61538","modified":1670395329127},{"_id":"public/css/prism.css","hash":"b39768264f9923a770bcc3f289be0a2bd8e64268","modified":1670395329127},{"_id":"public/css/prism_coy.css","hash":"24ebf5f3e5f68341522204dcaaf33f429d3c3718","modified":1670395329127},{"_id":"public/css/prism_dark.css","hash":"8085542cdb4583ffb78b2edd146ebe9511bf668c","modified":1670395329127},{"_id":"public/css/prism_default.css","hash":"3600bee175b309662e306b50e494ac73495619c2","modified":1670395329127},{"_id":"public/css/prism_funky.css","hash":"aa0e3a37fb8ccce44457d7805a13d7c6094d1f5e","modified":1670395329127},{"_id":"public/css/prism_solarized.css","hash":"73759f72dc43870aaf76dca7ef4e61a142b6b4f0","modified":1670395329127},{"_id":"public/css/prism_okaidia.css","hash":"e20586e80aeef3192c727e20d2efe4bd23846d29","modified":1670395329127},{"_id":"public/css/typo.css","hash":"768004dae4204dfbda865d412229feaa618ec3b7","modified":1670395329127},{"_id":"public/css/prism_twilight.css","hash":"17498435f6d964243c1a50deb563e6003aebe0e6","modified":1670395329127},{"_id":"public/js/jquery.scrollex.min.js","hash":"57fa1d1de2eca4fabbe75d6d160edc45cc398075","modified":1670395329127},{"_id":"public/js/gallery_skel.min.js","hash":"475a99682e46ad061915a11a9adb3fad82258d3c","modified":1670395329127},{"_id":"public/js/lazyload.min.js","hash":"5348fd7aa4dbefac9d21091c9fd5e263563b5540","modified":1670395329127},{"_id":"public/js/jquery.scrolly.min.js","hash":"6807fda8e44d95117e7007563a4db951818df82b","modified":1670395329127},{"_id":"public/js/main.js","hash":"509935fbbf5896ee1e8f2047e961dd58894ae74d","modified":1670395329127},{"_id":"public/js/mic_gallery.js","hash":"9f5d540f90fcef501df7a9f8272203d1604cd507","modified":1670395329127},{"_id":"public/js/skel.min.js","hash":"475a99682e46ad061915a11a9adb3fad82258d3c","modified":1670395329127},{"_id":"public/js/util.js","hash":"3ece9010adc07dd3dc27ced0e22e7ac8bcd16e14","modified":1670395329127},{"_id":"public/css/gallery.css","hash":"4c0178ea898cdc5e010346b56d1c9845fe8da53e","modified":1670395329127},{"_id":"public/css/gallery.min.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1670395329127},{"_id":"public/css/mic_gallery.css","hash":"5c75b8ab2670599538a1250957cf7c44d0e4cbec","modified":1670395329127},{"_id":"public/css/item.css","hash":"da1277164b611ccba56beda47960f9075c61dbab","modified":1670395329127},{"_id":"public/js/gallery/gallery.js","hash":"8ee48312a183b42a9886211a0ec825ea0d041301","modified":1670395329127},{"_id":"public/css/font-awesome.min.css","hash":"03eb0a6b53db2655f3ded9bb1a4e4af07cc1efa6","modified":1670395329127},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"550ef5c1253c8376f2ead32b654eb58d3c106ca3","modified":1670395329127},{"_id":"public/images/21.jpg","hash":"0b2570df0e6d9b79a0c50d0b4ce8799bd40ea421","modified":1670395329127},{"_id":"public/css/mic_main.css","hash":"152cca3d857f0184a99d1e8ac54dcb1d19945b3e","modified":1670395329127},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1670395329127},{"_id":"public/images/bg.jpg","hash":"af7fe6067d0c21f558502613eed86d8246000bba","modified":1627369070208},{"_id":"public/img/bg.jpg","hash":"af7fe6067d0c21f558502613eed86d8246000bba","modified":1670395329127},{"_id":"public/js/prism.js","hash":"0868d642f4661649a37dfb45b93fa30b4d92d4e4","modified":1670395329127},{"_id":"public/fonts/FZLT.ttf","hash":"24dfab81236612d596c97eb38b3adf5de99f669c","modified":1670395329127},{"_id":"source/.DS_Store","hash":"690fed92322a4e9bf00266b0d7af4e0a6066031e","modified":1627466372360},{"_id":"source/404.md","hash":"8d0d831a77fe92a9e1530366ed90dec6d73d3aef","modified":1627466372361},{"_id":"source/CNAME","hash":"55d5b0b4757a7d65ee4966dd161f394d06d257b7","modified":1627466372361},{"_id":"source/robots.txt","hash":"fd106e7f420198b3f106e68984be9fa8b23e596b","modified":1627466372643},{"_id":"themes/snail/.DS_Store","hash":"783a3e27be97b986d0aa6bcc8e7334c52d17961c","modified":1627466372285},{"_id":"themes/snail/LICENSE","hash":"c48eaae47a703282e0ffe7b91d69366452046214","modified":1627466372285},{"_id":"themes/snail/_config.yml","hash":"3c458e042f452e22ad3aa87001bc30970f5aa077","modified":1627466372285},{"_id":"source/.vscode/settings.json","hash":"ba7cd1c4d9258631c2dd525ff797cbb78da8250e","modified":1627466372361},{"_id":"source/about/index.md","hash":"ae8dde58b5c1d8308d93f0efcfb3ad0d15c75c3b","modified":1627466372393},{"_id":"source/archive/index.md","hash":"6cf168ac4a91c66bdacabc60d80f7c06e6f7a77d","modified":1627466372394},{"_id":"source/_posts/.DS_Store","hash":"a04ebe66fb85ce923d4ac52d351b7da0babaa3bd","modified":1627466372362},{"_id":"source/_posts/.Ulysses-Group.plist","hash":"e2318240f9a732bf99f74e24b5e7ea5999e6d694","modified":1627466372362},{"_id":"source/_posts/.Ulysses-favorites.plist","hash":"bde00bd2101f49564c3eaf7e75bbede55995a608","modified":1627466372364},{"_id":"source/_posts/2019-11-01-Hexo-Theme-Snail.md","hash":"24fa7f773085a5266482402732a4bfadacb6b749","modified":1627466372365},{"_id":"source/categories/index.md","hash":"40e18cd00dd34ca057d5ceadd4316341049013ba","modified":1627466372395},{"_id":"source/img/.DS_Store","hash":"c8eb7d4770d557f07789af0d7d33bebba448f5a8","modified":1627466372396},{"_id":"source/img/ironman-draw.png","hash":"996c1240f86a24b357fffefc8ad1096100de8b12","modified":1627472700302},{"_id":"source/photography/.DS_Store","hash":"c32d51d0256164cf945e248f1d562d88ebf08b44","modified":1627466372521},{"_id":"source/photography/index.md","hash":"abbc870bdb0cb0f8c97cad7d96b3763110cae9d1","modified":1627466372521},{"_id":"source/tags/index.md","hash":"b9b0b7d47d61d123a5cdac189886c0d36a7172d2","modified":1627466372644},{"_id":"themes/snail/languages_to_be_added/de.yml","hash":"02a98ba2b93e30a00ae7979fbe90b767a27290f0","modified":1627466372286},{"_id":"themes/snail/languages_to_be_added/en.yml","hash":"3cd0873b310cbf2fe022ee18d55a6113b347ea09","modified":1627466372287},{"_id":"themes/snail/languages_to_be_added/default.yml","hash":"3cd0873b310cbf2fe022ee18d55a6113b347ea09","modified":1627466372286},{"_id":"themes/snail/languages_to_be_added/es.yml","hash":"fb089145368422ac47da9eb00fed05b15c904aa2","modified":1627466372287},{"_id":"themes/snail/languages_to_be_added/no.yml","hash":"5ce3a1043ff85cecf83f3b5b0cdad2df44fa0192","modified":1627466372287},{"_id":"themes/snail/languages_to_be_added/pl.yml","hash":"6dc5d1b2aa75ae4c527089a770f43bafb91d80f4","modified":1627466372287},{"_id":"themes/snail/languages_to_be_added/ru.yml","hash":"2cfaf93704ea4ac3f374c69bab89ca31916faa33","modified":1627466372289},{"_id":"themes/snail/languages_to_be_added/zh-CN.yml","hash":"6d712d9eb6ba12213dcd76b532cd86e9da83cfa3","modified":1627466372289},{"_id":"themes/snail/languages_to_be_added/zh-TW.yml","hash":"45c84384a05fdb7e32a3e2d498ea180be7dccfa9","modified":1627466372289},{"_id":"themes/snail/layout/.DS_Store","hash":"e45cdab01049822593cf65f23f18a828ea573ab9","modified":1627466372290},{"_id":"themes/snail/layout/404.ejs","hash":"c9b488d74c21fe9f35f642a5d19a138099ddf8a8","modified":1627466372290},{"_id":"themes/snail/layout/about.ejs","hash":"43117d1c0d3009c62e8d41977cc754a119ac9c16","modified":1627466372300},{"_id":"themes/snail/layout/archive.ejs","hash":"2027f2ec3940c74650ed96ce0eaa293a8dc94e00","modified":1627466372300},{"_id":"themes/snail/layout/keynote.ejs","hash":"9b8f227afc2326a27130f5411e4972b03e187a8e","modified":1627466372302},{"_id":"themes/snail/layout/categories.ejs","hash":"e534899bff3be38436e2577721208c74661dbe95","modified":1627466372301},{"_id":"themes/snail/layout/index.ejs","hash":"f28110a35372a38bb09b194aebe2758831534e89","modified":1627466372302},{"_id":"themes/snail/layout/layout.ejs","hash":"890e04042991a0b12f10aecdf33be83f5937143a","modified":1627466372302},{"_id":"themes/snail/layout/page.ejs","hash":"6c40003e223feed2007902c3cc2b62e11b72ccfd","modified":1627466372303},{"_id":"themes/snail/layout/photography.ejs","hash":"be745422c9e999c570caf3bd4dddaac4bf90da06","modified":1627466372303},{"_id":"themes/snail/layout/post.ejs","hash":"bdfc91c2a7eb351ccce7f5fa99e6957db51038d2","modified":1627466372304},{"_id":"themes/snail/layout/tags.ejs","hash":"67b089ce27df21fff7310ed2257dacaa8c852b4a","modified":1627466372304},{"_id":"themes/snail/source/.DS_Store","hash":"ed06a70def8b481e44815adacc512b1dd1ca9d08","modified":1627466372305},{"_id":"source/_posts/.vscode/settings.json","hash":"ba7cd1c4d9258631c2dd525ff797cbb78da8250e","modified":1627466372364},{"_id":"source/_posts/2019-11-01-Hexo-Theme-Snail/.DS_Store","hash":"6418817d2a63f0fdf6742804966dcf7c8929b803","modified":1627466372365},{"_id":"source/img/404-bg.jpg","hash":"dded479a06d5165d1f87c63677442aecdf1ac748","modified":1627466372397},{"_id":"source/img/header_img/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1627466372401},{"_id":"source/img/signature/.DS_Store","hash":"5d4742a3eec02334dd2df5ab57fea2a143933757","modified":1627466372519},{"_id":"source/img/signature/Just-do-it-white.png","hash":"c66314974b30c23ae9da2f7e57ca1ead65f00e28","modified":1627466372520},{"_id":"source/img/signature/dusign.png","hash":"cbfb2ac6910c0ad4263f300afcdaf13060257976","modified":1627466372520},{"_id":"source/photography/photo/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1627466372522},{"_id":"themes/snail/layout/_partial/.DS_Store","hash":"b67df80bf88e0f64ba66ad760f724d8c44d2c390","modified":1627466372291},{"_id":"themes/snail/layout/_partial/comment.ejs","hash":"16ca508c3307042fbbc33d99753464f873fcb8a1","modified":1627466372291},{"_id":"themes/snail/layout/_partial/footer.ejs","hash":"a562320ac0fc6f4c6668045df9dffe497f85506e","modified":1627466372292},{"_id":"themes/snail/layout/_partial/head.ejs","hash":"e805a8f6054fce2b94d46f749a631f845000bab7","modified":1627466372292},{"_id":"themes/snail/layout/_partial/header.ejs","hash":"9330265e86eee91b3d1207a2dc0f1869f64d70df","modified":1627466372293},{"_id":"themes/snail/layout/_partial/music.ejs","hash":"f94375bf9326cbed6ca4cd71d6c696df67cfa231","modified":1627466372294},{"_id":"themes/snail/layout/_partial/nav.ejs","hash":"1e256e28b5c312b1d0b94024707a483411f804d9","modified":1627466372294},{"_id":"themes/snail/layout/_partial/pagination.ejs","hash":"cd61e4dbbf6020ad094c8e66ec06e8c38ebcd122","modified":1627466372295},{"_id":"themes/snail/layout/_partial/sidebar.ejs","hash":"bc7834dd769eeac94a76ffd9cfbb13a622861b62","modified":1627466372295},{"_id":"themes/snail/layout/_partial/star.ejs","hash":"3fb3c72ed099f73ec77f10d7cc697126360a11f9","modified":1627466372296},{"_id":"themes/snail/layout/_widget/.DS_Store","hash":"9c0d84234456e5db3004fe76dd78d0d93efe3fc5","modified":1627466372297},{"_id":"themes/snail/layout/_partial/toc.ejs","hash":"10037bc30454728fb9f2b778968bd3d54576d838","modified":1627466372296},{"_id":"themes/snail/layout/_widget/archive.ejs","hash":"ad9fb0073d40fe90bfe3a1e3246e0b07e12b3ecf","modified":1627466372297},{"_id":"themes/snail/layout/_widget/category.ejs","hash":"c29dba452543b24d16abd27ec44edd3de82750b9","modified":1627466372298},{"_id":"themes/snail/layout/_widget/featured-tags.ejs","hash":"e29431fa78c81d7c521bb1f7be356651fcde959c","modified":1627466372298},{"_id":"themes/snail/layout/_widget/friends-blog.ejs","hash":"b185fcffb0d181ddd9eb2259af38cf7d82fb2846","modified":1627466372298},{"_id":"themes/snail/layout/_widget/recent-posts.ejs","hash":"93e540ddc0c606fc546cbe9798c1c034b760a11a","modified":1627466372299},{"_id":"themes/snail/layout/_widget/search.ejs","hash":"22d0b1e7282e3995b56ca5b69681c6ac3d02b68a","modified":1627466372299},{"_id":"themes/snail/layout/_widget/short-about.ejs","hash":"7785a5bd9543d60b9c40ba6580a0feab97313024","modified":1627466372299},{"_id":"themes/snail/layout/_widget/visitor.ejs","hash":"a66ed5221a74e8a3c0eb36e2066ea197d0b4e138","modified":1627466372300},{"_id":"themes/snail/source/css/.DS_Store","hash":"0cff62c01dffa557aea8139bec65d19bab1a406b","modified":1627466372305},{"_id":"themes/snail/source/css/archive.styl","hash":"bcb216ef65804c97b1a5dbe5f519fc171a13aaf1","modified":1627466372306},{"_id":"themes/snail/source/css/dusign-common-dark.css","hash":"d37f483208e9885bf7e65c13ea4149f6c5cabc12","modified":1627466372309},{"_id":"themes/snail/source/css/dusign-common-light.css","hash":"5f2607a1f57de5935858e5ab4179f5940e54eca2","modified":1627466372310},{"_id":"themes/snail/source/css/dusign-dark.css","hash":"4a07f94bb929442466082ca317e8ab221a18ded9","modified":1627466372311},{"_id":"themes/snail/source/css/dusign-light.css","hash":"ab011269575c021647fe8ac3d610fc11f99b2430","modified":1627466372311},{"_id":"themes/snail/source/css/font-awesome.css","hash":"6d39a08bc85169eca450978f895f85d5d3451c0a","modified":1627466372312},{"_id":"themes/snail/source/css/font-awesome.star.css","hash":"94cc78af06d9f9dbf6f881a8033f96f7031d7215","modified":1627466372313},{"_id":"themes/snail/source/css/fonts.googleapis.css","hash":"d252d72be801d92bdee7ee2eea3b3f16a3b0714a","modified":1627466372313},{"_id":"themes/snail/source/css/gitment.css","hash":"b41d95120f9e64fd4530ae00ceaef09c7ea20818","modified":1627466372314},{"_id":"themes/snail/source/css/highlight.styl","hash":"831f8195f3577ba5bea374f2e24b90054d445055","modified":1627466372314},{"_id":"themes/snail/source/css/photography.css","hash":"e5d5df46ab4ca779980e554dcff3a8d1c234fe25","modified":1627466372318},{"_id":"themes/snail/source/css/rocket.styl","hash":"28a31dbfad250fb93c41692ba34bc6ded6764845","modified":1627466372319},{"_id":"themes/snail/source/css/signature.styl","hash":"355234287655a3cce9aea411df0ee09cbffe6b45","modified":1627524682844},{"_id":"themes/snail/source/css/toc.styl","hash":"4498ca499543aa56285a67e38be7af9bdaded101","modified":1627466372320},{"_id":"themes/snail/source/css/widget.styl","hash":"f996466e299c68274145ba5afaca9b6d1dd83114","modified":1627466372320},{"_id":"themes/snail/source/fonts/.DS_Store","hash":"c62411b1d7033164ffeac47a5c5091716b1ef0ed","modified":1627466372321},{"_id":"themes/snail/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1627466372329},{"_id":"themes/snail/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1627466372332},{"_id":"themes/snail/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1627466372331},{"_id":"themes/snail/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1627466372332},{"_id":"themes/snail/source/img/.DS_Store","hash":"946c77b313a0b54b7752989d970d116de33897e1","modified":1627466372338},{"_id":"themes/snail/source/img/cd.png","hash":"9e2948f8fcdd6a33d4d88be26c26cc5a3f284a39","modified":1627466372339},{"_id":"themes/snail/source/img/cd_tou.png","hash":"f3be731e88699b3221349f154675f23efe6bbcaf","modified":1627466372339},{"_id":"themes/snail/source/img/default.jpg","hash":"22910d296bc4d2a687e1d2c3583d984d77ff119b","modified":1627466372340},{"_id":"themes/snail/source/img/notice.png","hash":"7dd33804c5db9ce303c6518defb0fab36ac443c5","modified":1627466372340},{"_id":"themes/snail/source/img/top-light.png","hash":"35795d86dc6bd0fe217ed9ac5a84c69fe3d89bbc","modified":1627466372340},{"_id":"themes/snail/source/img/tp.png","hash":"4d2a36c85473c8cdbbf0cc8f5930baf27be7af9b","modified":1627466372341},{"_id":"themes/snail/source/img/wave-dark.png","hash":"af6e4c8e6923e2ecbcd8118698c826559a3410f2","modified":1627466372342},{"_id":"themes/snail/source/img/wave-light.png","hash":"876873f352f953ea90b1d428f563572291052f65","modified":1627466372342},{"_id":"themes/snail/source/js/.DS_Store","hash":"2ab9cda44457d3ffbac70955968c866c2ab41d12","modified":1627466372344},{"_id":"themes/snail/source/js/bootstrap.min.js","hash":"313da686ebbe387064f2d1899c64ea562b81eb40","modified":1627466372345},{"_id":"themes/snail/source/js/canvas-nest.js","hash":"7e82393a99bf6607a1f656405cc234dedb9cbe35","modified":1627466372346},{"_id":"themes/snail/source/js/hux-blog.js","hash":"3d3c93e42a9990b2a2e6df5a08e9816f9a221e0f","modified":1627466372348},{"_id":"themes/snail/source/js/hux-blog.min.js","hash":"ee99af17a1a69ac8d85a695fed0349ba202789ae","modified":1627466372350},{"_id":"themes/snail/source/js/jquery.nav.js","hash":"bc6383fa2aa8f437978cf044a3b6f10a65114398","modified":1627466372353},{"_id":"themes/snail/source/js/jquery.tagcloud.js","hash":"448017ff32f75f444ed7985d10a21b3ad92ab100","modified":1627466372353},{"_id":"themes/snail/source/js/line.js","hash":"058e3e7f223ceb9db1f8976490af11750a3d4828","modified":1627466372354},{"_id":"themes/snail/source/js/mouse-click.js","hash":"90ac6d2581eca1ffeb2a640c5f221d8a190004c3","modified":1627466372354},{"_id":"themes/snail/source/js/ribbonDynamic.js","hash":"bf796849201d7fd03a08f8888a0ae2efd3031ec3","modified":1627466372357},{"_id":"themes/snail/source/js/ribbonStatic.js","hash":"1e53789eaf62c1bcc40c5c48df2f0c2d54e0191e","modified":1627466372358},{"_id":"themes/snail/source/js/search.js","hash":"23540998584c24f8c65fcf7998a66547b737b5c4","modified":1627466372358},{"_id":"themes/snail/source/js/toc.js","hash":"4ffe95b7755b035ee1b41664fa72b0ebea29c3f8","modified":1627466372359},{"_id":"themes/snail/source/js/totop.js","hash":"f796b09b4f6177c3674a8c1542a8c92e8590cb5c","modified":1627466372359},{"_id":"source/img/default.jpg","hash":"98f09a1ade3bfec44c3e3185017986cc76b08796","modified":1627466372400},{"_id":"themes/snail/source/css/bootstrap.min.css","hash":"1818a346630e7133a1f194669f613f613fcfa97c","modified":1627466372308},{"_id":"themes/snail/source/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1627466372327},{"_id":"themes/snail/source/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1627466372328},{"_id":"themes/snail/source/fonts/glyphicons-halflings-regular.svg","hash":"4dcf0ab896f5417047f881de91bad10dcbda48c6","modified":1627466372330},{"_id":"themes/snail/source/js/bootstrap.js","hash":"5d69034fb6eded2e5961ea54dd47129a88cd5182","modified":1627466372345},{"_id":"themes/snail/source/js/jquery.min.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1627466372352},{"_id":"source/img/header_img/categories-bg.jpg","hash":"ba837d1b99c73c857e221989d1f34f994f552b03","modified":1627466372472},{"_id":"themes/snail/source/css/bootstrap.css","hash":"d1a24afac31222d70b4e001e0361ef045aa42043","modified":1627466372307},{"_id":"themes/snail/source/css/images/ironman.png","hash":"ed4cfd8d6cb29fe389768e78701c1e704de0a4b4","modified":1627466372315},{"_id":"themes/snail/source/css/images/rocket.png","hash":"76f4a29befec0558eba79e91d494b8186ac83bd9","modified":1627466372316},{"_id":"themes/snail/source/css/music-player/.DS_Store","hash":"c222d4075bfee4e45d6724c1973ae854c0faa544","modified":1627466372316},{"_id":"themes/snail/source/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1627466372326},{"_id":"themes/snail/source/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3g3D_vx3rCubqg.woff2","hash":"7e70fcb471e56b2a19f2252930953b3e60fe1a9f","modified":1627466372333},{"_id":"themes/snail/source/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gTD_vx3rCubqg.woff2","hash":"72816c753b283b3073922e0dbaf43b7b0eca084a","modified":1627466372334},{"_id":"themes/snail/source/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gbD_vx3rCubqg.woff2","hash":"5978679d456a2caa60c4577d88015f6287541558","modified":1627466372334},{"_id":"themes/snail/source/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gfD_vx3rCubqg.woff2","hash":"080ec6814b7c0524080725bb14771f6acaea1f81","modified":1627466372335},{"_id":"themes/snail/source/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gnD_vx3rCs.woff2","hash":"aadbddac4c13b6104b7c1e8734388b8236d21986","modified":1627466372335},{"_id":"themes/snail/source/fonts/googleapis/JTUSjIg1_i6t8kCHKm459W1hyyTh89ZNpQ.woff2","hash":"2b17a95811ba31d575f51bc355e64a5fea5bb7ee","modified":1627466372336},{"_id":"themes/snail/source/fonts/googleapis/JTUSjIg1_i6t8kCHKm459WRhyyTh89ZNpQ.woff2","hash":"87a7218891499b54fc511fba5788d6c571c530da","modified":1627466372336},{"_id":"themes/snail/source/fonts/googleapis/JTUSjIg1_i6t8kCHKm459WZhyyTh89ZNpQ.woff2","hash":"28d5bef0604f6ff6605018bf5cb0c39becf8ee7d","modified":1627466372337},{"_id":"themes/snail/source/fonts/googleapis/JTUSjIg1_i6t8kCHKm459WdhyyTh89ZNpQ.woff2","hash":"8569fb80b97a650e8af5e3617e784f9d70759a6a","modified":1627466372337},{"_id":"themes/snail/source/fonts/googleapis/JTUSjIg1_i6t8kCHKm459WlhyyTh89Y.woff2","hash":"513e3f0c1faabe03d220a4482b770b0d7b0c6c15","modified":1627466372337},{"_id":"themes/snail/source/js/gitment.js","hash":"132443f1a54eb5bd13ac80d45cab6abb29166eae","modified":1627466372348},{"_id":"themes/snail/source/js/music-player/.DS_Store","hash":"af71753e216d93f6e18351e06e7c1fea76198ba5","modified":1627466372355},{"_id":"themes/snail/source/js/music-player/player.js","hash":"7b20324fb4011203eabc99d992bd85e9bbd5fda9","modified":1627466372357},{"_id":"themes/snail/source/js/music-player/utill.js","hash":"9ebf6aa9fd481305a0aa2f78d9beed3fc0949e8d","modified":1627466372357},{"_id":"themes/snail/source/js/jquery.js","hash":"4bb763dc96da604aed08ac024a1a3f5de73eea39","modified":1627466372352},{"_id":"themes/snail/source/js/music-player/jquery.min.js","hash":"77e9eed704c96c3eb0180d35c6ba430b3f69a43a","modified":1627466372356},{"_id":"themes/snail/source/css/music-player/css/player.css","hash":"46a1c32c6148bb2a3e017f707fd45cb4b2419237","modified":1627466372317},{"_id":"themes/snail/source/css/music-player/css/reset.css","hash":"939d5d57d6589ee7bd9d0d0b6a4009eec35a8652","modified":1627466372317},{"_id":"themes/snail/source/css/music-player/fonts/iconfont.css","hash":"db41f1684045df93674eb85f33eec65dc2d90d79","modified":1627466372318},{"_id":"source/_posts/2019-11-01-Hexo-Theme-Snail/snail-bg.jpg","hash":"91b8cdf0418c78dc45fd736c5185f96c8c4817ae","modified":1627466372370},{"_id":"source/photography/photo/yc.jpeg","hash":"89f97217bbe2cb01429fcbf3699349446c16c971","modified":1627466372608},{"_id":"themes/snail/source/fonts/fontawesome-webfont.svg","hash":"550ef5c1253c8376f2ead32b654eb58d3c106ca3","modified":1627466372324},{"_id":"source/photography/photo/wx.jpeg","hash":"2ce216e2bf8f652b16a340486f6177ba9c8b951f","modified":1627466372604},{"_id":"source/img/header_img/tag-bg.jpg","hash":"abc6dd1036b1abb9f040e7fcabeb5fecca63f59f","modified":1627466372518},{"_id":"source/photography/photo/yjyj3.jpeg","hash":"ecdee68745d94231d4dd8c1bade75e8cb62092fc","modified":1627466372642},{"_id":"source/img/header_img/photography-bg.jpeg","hash":"a2d79feac358d68c8e9b2dd96afd69f7ba31bb7b","modified":1627466372513},{"_id":"source/photography/photo/dfmz.jpeg","hash":"e1bbfe0c2ecba12c936ba31066b92fafcd934bca","modified":1627466372534},{"_id":"source/photography/photo/yjyj2.jpeg","hash":"a2d79feac358d68c8e9b2dd96afd69f7ba31bb7b","modified":1627466372633},{"_id":"source/photography/photo/yjyj1.jpeg","hash":"17e1c0b8b3732130c011b216a0569a52ddd78f4b","modified":1627466372622},{"_id":"source/photography/photo/ly.jpeg","hash":"ae4d91d457ee3d4930335655d85e12055842b684","modified":1627466372599},{"_id":"source/img/header_img/home-bg-1-dark.jpg","hash":"73afc05be88af73c70f3e736a057169b3c08ef31","modified":1627466372502},{"_id":"source/photography/photo/lsqs.jpeg","hash":"60e16189fc372bafcd1c1b3ff5938e65cda084a0","modified":1627466372583},{"_id":"source/img/header_img/archive-bg.jpg","hash":"d023ca58c2d02214788fc3499a74ebdfd5c645f5","modified":1627466372470},{"_id":"source/img/header_img/Iron-Man-3.jpg","hash":"157de39599633984edaf15dd6ece681e7e55dd65","modified":1627466372439},{"_id":"source/_posts/2019-11-01-Hexo-Theme-Snail/snail.png","hash":"9741ada00e6f5684efce9649c0631590f5ffe4a2","modified":1627466372392},{"_id":"source/_posts/2021-07-28-first-md.md","hash":"a69895e21f8abbf88dad2690c1e569cb4360e18d","modified":1627469959895},{"_id":"source/_posts/2021-07-28-first-md-1.md","hash":"0c8564d653538d867ddbca61e333010c95df43e2","modified":1627469974582},{"_id":"source/_posts/2021-07-28-first-md/first-day.png","hash":"d68a41a2c30693c5d9c0f34dc4341a0605b20d3e","modified":1627469945516},{"_id":"source/_posts/2021-07-28-first-day.md","hash":"178a62f2307b432037cbbb9a2a03516b47a5f553","modified":1659594593701},{"_id":"source/_posts/2021-07-28-first-day/first-day.jpg","hash":"c984967722f2cea9775440a017b1fb0466a0cfcf","modified":1627470212815},{"_id":"public/search.xml","hash":"6de985cd6090bc92313790a4188c72a31201e132","modified":1670395329127},{"_id":"public/baidusitemap.xml","hash":"7cc7e7bf0a75683380fb5535d00a71f5a0a0e65b","modified":1670395329127},{"_id":"public/sitemap.xml","hash":"656446690ef7f413032ebdd2214c9fa1cacb86c3","modified":1670395329127},{"_id":"public/404.html","hash":"55b307a80932d89507a9dd1d20be36ff431ae3d1","modified":1670395329127},{"_id":"public/categories/index.html","hash":"9da73a1d7dc6ab786b0292f3e3ba312e78dadcd2","modified":1670395329127},{"_id":"public/photography/index.html","hash":"9c37a58a4a96ddcfb2f7cfddbe7be288f3258d95","modified":1670395329127},{"_id":"public/tags/index.html","hash":"53ccdfb211b24ad8fa79cb4fd7edae5e6f871f7a","modified":1670395329127},{"_id":"public/2021/07/28/first-day/index.html","hash":"3afa498558b096e921bb1351893d904e6113ce01","modified":1670395329127},{"_id":"public/2019/11/01/Hexo-Theme-Snail/index.html","hash":"f63d66fb2a37f9ff3171aa7ebb06706aef822260","modified":1627470927153},{"_id":"public/archive/index.html","hash":"bd22b25e7ee4731c45a95123aa9996bb9b5c65ef","modified":1670395329127},{"_id":"public/about/index.html","hash":"5e6dca29beaea5c7fcf187cf7c3fd446c3c658b0","modified":1670395329127},{"_id":"public/archives/2019/index.html","hash":"ec7925846afe203dbcd8510d0275565db143effa","modified":1627470927153},{"_id":"public/archives/2019/11/index.html","hash":"995f057e2c734ed7bec1931cf64b2d9637360e10","modified":1627470927153},{"_id":"public/categories/hexo/index.html","hash":"92284d652e3a1412e20a89f3da3dc1b42e1ee628","modified":1627470927153},{"_id":"public/tags/hexo-theme-snail/index.html","hash":"6de856b8db9ba7c820913581dbe16d640145401c","modified":1627470927153},{"_id":"public/robots.txt","hash":"fd106e7f420198b3f106e68984be9fa8b23e596b","modified":1670395329127},{"_id":"public/CNAME","hash":"55d5b0b4757a7d65ee4966dd161f394d06d257b7","modified":1670395329127},{"_id":"public/img/ironman-draw.png","hash":"996c1240f86a24b357fffefc8ad1096100de8b12","modified":1670395329127},{"_id":"public/img/signature/Just-do-it-white.png","hash":"c66314974b30c23ae9da2f7e57ca1ead65f00e28","modified":1670395329127},{"_id":"public/img/signature/dusign.png","hash":"cbfb2ac6910c0ad4263f300afcdaf13060257976","modified":1670395329127},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1670395329127},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1670395329127},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1670395329127},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1670395329127},{"_id":"public/img/cd.png","hash":"9e2948f8fcdd6a33d4d88be26c26cc5a3f284a39","modified":1670395329127},{"_id":"public/img/cd_tou.png","hash":"f3be731e88699b3221349f154675f23efe6bbcaf","modified":1670395329127},{"_id":"public/img/notice.png","hash":"7dd33804c5db9ce303c6518defb0fab36ac443c5","modified":1670395329127},{"_id":"public/img/top-light.png","hash":"35795d86dc6bd0fe217ed9ac5a84c69fe3d89bbc","modified":1670395329127},{"_id":"public/img/tp.png","hash":"4d2a36c85473c8cdbbf0cc8f5930baf27be7af9b","modified":1670395329127},{"_id":"public/img/wave-dark.png","hash":"af6e4c8e6923e2ecbcd8118698c826559a3410f2","modified":1670395329127},{"_id":"public/img/wave-light.png","hash":"876873f352f953ea90b1d428f563572291052f65","modified":1670395329127},{"_id":"public/css/images/ironman.png","hash":"ed4cfd8d6cb29fe389768e78701c1e704de0a4b4","modified":1670395329127},{"_id":"public/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gbD_vx3rCubqg.woff2","hash":"5978679d456a2caa60c4577d88015f6287541558","modified":1670395329127},{"_id":"public/css/images/rocket.png","hash":"76f4a29befec0558eba79e91d494b8186ac83bd9","modified":1670395329127},{"_id":"public/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gTD_vx3rCubqg.woff2","hash":"72816c753b283b3073922e0dbaf43b7b0eca084a","modified":1670395329127},{"_id":"public/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3g3D_vx3rCubqg.woff2","hash":"7e70fcb471e56b2a19f2252930953b3e60fe1a9f","modified":1670395329127},{"_id":"public/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gfD_vx3rCubqg.woff2","hash":"080ec6814b7c0524080725bb14771f6acaea1f81","modified":1670395329127},{"_id":"public/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gnD_vx3rCs.woff2","hash":"aadbddac4c13b6104b7c1e8734388b8236d21986","modified":1670395329127},{"_id":"public/fonts/googleapis/JTUSjIg1_i6t8kCHKm459W1hyyTh89ZNpQ.woff2","hash":"2b17a95811ba31d575f51bc355e64a5fea5bb7ee","modified":1670395329127},{"_id":"public/fonts/googleapis/JTUSjIg1_i6t8kCHKm459WRhyyTh89ZNpQ.woff2","hash":"87a7218891499b54fc511fba5788d6c571c530da","modified":1670395329127},{"_id":"public/fonts/googleapis/JTUSjIg1_i6t8kCHKm459WZhyyTh89ZNpQ.woff2","hash":"28d5bef0604f6ff6605018bf5cb0c39becf8ee7d","modified":1670395329127},{"_id":"public/fonts/googleapis/JTUSjIg1_i6t8kCHKm459WdhyyTh89ZNpQ.woff2","hash":"8569fb80b97a650e8af5e3617e784f9d70759a6a","modified":1670395329127},{"_id":"public/fonts/googleapis/JTUSjIg1_i6t8kCHKm459WlhyyTh89Y.woff2","hash":"513e3f0c1faabe03d220a4482b770b0d7b0c6c15","modified":1670395329127},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"4dcf0ab896f5417047f881de91bad10dcbda48c6","modified":1670395329127},{"_id":"public/css/archive.css","hash":"8db895ebaeff19ac145c961abcfd5d4a8d67a8ea","modified":1670395329127},{"_id":"public/css/dusign-common-light.css","hash":"11f0d1a854b0ef803a0f0d9c6b744b3ed74253bf","modified":1670395329127},{"_id":"public/css/dusign-common-dark.css","hash":"09c1d5e4d5d623ca1b0f27975860625c48332b92","modified":1670395329127},{"_id":"public/css/fonts.googleapis.css","hash":"61735f2f7925a9a90d55475a6c33b6b94d39ba2e","modified":1670395329127},{"_id":"public/css/highlight.css","hash":"8bc5e670b028eda8097f58bdc85269c5124c2951","modified":1670395329127},{"_id":"public/css/rocket.css","hash":"ff363acbf4d07259228a37738221033665b28794","modified":1670395329127},{"_id":"public/css/photography.css","hash":"29426628144eb10ec3c0e42aaacc03ee5de1809f","modified":1670395329127},{"_id":"public/css/signature.css","hash":"bf1606bf895942070df3b08b61349f47d6b6c9af","modified":1670395329127},{"_id":"public/css/toc.css","hash":"ed5bba697adcbf9d050a7d489e85fe9034b6693a","modified":1670395329127},{"_id":"public/css/widget.css","hash":"da95ad3f1938f24d20f1fa77d7a38f0c392b5ec8","modified":1670395329127},{"_id":"public/js/canvas-nest.js","hash":"ccfef66760b1490ebf7d510c8a3a78d7a753601a","modified":1670395329127},{"_id":"public/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1670395329127},{"_id":"public/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1670395329127},{"_id":"public/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1670395329127},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1670395329127},{"_id":"public/js/line.js","hash":"f43e647e938bcc51d043b1d64ddbfb847f9fee96","modified":1670395329127},{"_id":"public/js/ribbonDynamic.js","hash":"f37800912f97ae4c9d375608c5aad462847c8e43","modified":1670395329127},{"_id":"public/js/search.js","hash":"7e780c538d23147e4fdc5c19eba5747a137234f3","modified":1670395329127},{"_id":"public/js/ribbonStatic.js","hash":"552f5b67778ff6282090cf06b33aaeb1a95eca37","modified":1670395329127},{"_id":"public/js/toc.js","hash":"41e52551731854224c249d53010c1bae5aa92ffa","modified":1670395329127},{"_id":"public/js/mouse-click.js","hash":"19836369f0c47643e5e2e78edd3d75c43f1717c6","modified":1670395329127},{"_id":"public/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1670395329127},{"_id":"public/js/music-player/player.js","hash":"8c45db99c0606c20622a9588960c059cec8196e3","modified":1670395329127},{"_id":"public/js/music-player/utill.js","hash":"8155c50df624cf908a0aea51461686d7f5fed2e4","modified":1670395329127},{"_id":"public/css/music-player/css/player.css","hash":"8676c8a79a31ab1872cc07c05a6d5c7e4625e195","modified":1670395329127},{"_id":"public/css/music-player/css/reset.css","hash":"7ed29eb21b446c2c062b27197757de156588aa9f","modified":1670395329127},{"_id":"public/css/music-player/fonts/iconfont.css","hash":"bc74788146361682bc17cba3058c62bb7b89fa11","modified":1670395329127},{"_id":"public/css/font-awesome.css","hash":"b488600451227b445414796e9b8550e7c1bd6d29","modified":1670395329127},{"_id":"public/css/dusign-dark.css","hash":"3ec81e310cb5c469e2540649d1632e581d24ca48","modified":1670395329127},{"_id":"public/css/font-awesome.star.css","hash":"5e536c20b1633dd798b27b1860292edb00bdc5e4","modified":1670395329127},{"_id":"public/css/dusign-light.css","hash":"9e47d827447b4141672543bb2d3b4382fc4b2973","modified":1670395329127},{"_id":"public/css/gitment.css","hash":"7fbb18b73b44ed11193739c55fce53a6f173cf68","modified":1670395329127},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1670395329127},{"_id":"public/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1670395329127},{"_id":"public/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1670395329127},{"_id":"public/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1670395329127},{"_id":"public/js/gitment.js","hash":"db4ceb1a87f2353ed378f72bdb56a4be3c976425","modified":1670395329127},{"_id":"public/js/music-player/jquery.min.js","hash":"e2f3603e23711f6446f278a411d905623d65201e","modified":1670395329127},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1670395329127},{"_id":"public/img/404-bg.jpg","hash":"dded479a06d5165d1f87c63677442aecdf1ac748","modified":1670395329127},{"_id":"public/img/header_img/categories-bg.jpg","hash":"ba837d1b99c73c857e221989d1f34f994f552b03","modified":1670395329127},{"_id":"public/2021/07/28/first-day/first-day.jpg","hash":"c984967722f2cea9775440a017b1fb0466a0cfcf","modified":1670395329127},{"_id":"public/img/default.jpg","hash":"98f09a1ade3bfec44c3e3185017986cc76b08796","modified":1670395329127},{"_id":"public/photography/photo/yc.jpeg","hash":"89f97217bbe2cb01429fcbf3699349446c16c971","modified":1670395329127},{"_id":"public/2019/11/01/Hexo-Theme-Snail/snail-bg.jpg","hash":"91b8cdf0418c78dc45fd736c5185f96c8c4817ae","modified":1627470927153},{"_id":"public/photography/photo/wx.jpeg","hash":"2ce216e2bf8f652b16a340486f6177ba9c8b951f","modified":1670395329127},{"_id":"public/img/header_img/tag-bg.jpg","hash":"abc6dd1036b1abb9f040e7fcabeb5fecca63f59f","modified":1670395329127},{"_id":"public/photography/photo/yjyj3.jpeg","hash":"ecdee68745d94231d4dd8c1bade75e8cb62092fc","modified":1670395329127},{"_id":"public/img/header_img/photography-bg.jpeg","hash":"a2d79feac358d68c8e9b2dd96afd69f7ba31bb7b","modified":1670395329127},{"_id":"public/photography/photo/dfmz.jpeg","hash":"e1bbfe0c2ecba12c936ba31066b92fafcd934bca","modified":1670395329127},{"_id":"public/photography/photo/yjyj2.jpeg","hash":"a2d79feac358d68c8e9b2dd96afd69f7ba31bb7b","modified":1670395329127},{"_id":"public/photography/photo/yjyj1.jpeg","hash":"17e1c0b8b3732130c011b216a0569a52ddd78f4b","modified":1670395329127},{"_id":"public/photography/photo/ly.jpeg","hash":"ae4d91d457ee3d4930335655d85e12055842b684","modified":1670395329127},{"_id":"public/img/header_img/home-bg-1-dark.jpg","hash":"73afc05be88af73c70f3e736a057169b3c08ef31","modified":1670395329127},{"_id":"public/photography/photo/lsqs.jpeg","hash":"60e16189fc372bafcd1c1b3ff5938e65cda084a0","modified":1670395329127},{"_id":"public/img/header_img/archive-bg.jpg","hash":"d023ca58c2d02214788fc3499a74ebdfd5c645f5","modified":1670395329127},{"_id":"public/img/header_img/Iron-Man-3.jpg","hash":"157de39599633984edaf15dd6ece681e7e55dd65","modified":1670395329127},{"_id":"public/2019/11/01/Hexo-Theme-Snail/snail.png","hash":"9741ada00e6f5684efce9649c0631590f5ffe4a2","modified":1627470927153},{"_id":"source/img/ironman-draw1.png","hash":"bf6b382fe359ae325b72c485c1eb73ee024b4dc1","modified":1627472952080},{"_id":"source/img/ironman-draw2.png","hash":"59888ba100aeb84063e0aa4f4f0decbe086dbe9d","modified":1627473008346},{"_id":"public/post-sitemap.xml","hash":"a59b759e5016ba25ae54b1648b53ce3beb0f589c","modified":1630648868607},{"_id":"public/page-sitemap.xml","hash":"deb52fffe88c0eb44c3b08a397bdb142548a2468","modified":1630648868607},{"_id":"public/category-sitemap.xml","hash":"4f1c617e01ab82833e940ea8ad50e1eb56b53a78","modified":1630648868607},{"_id":"public/tag-sitemap.xml","hash":"ca1dfdd6b30e7d1abea94e541ab1e054fb99ccb1","modified":1630648868607},{"_id":"public/sitemap.xsl","hash":"4321fa69dc1b8811d32b7a1478e5603e038cea1a","modified":1630648868607},{"_id":"public/img/ironman-draw1.png","hash":"bf6b382fe359ae325b72c485c1eb73ee024b4dc1","modified":1670395329127},{"_id":"public/img/ironman-draw2.png","hash":"59888ba100aeb84063e0aa4f4f0decbe086dbe9d","modified":1670395329127},{"_id":"source/new/index.md","hash":"b9b0b7d47d61d123a5cdac189886c0d36a7172d2","modified":1627474051292},{"_id":"source/img/signature/whitecute.png","hash":"09afe651b7f0ca111a44bf8ec8cde9dcb98b9ab4","modified":1627524342500},{"_id":"public/img/signature/whitecute.png","hash":"09afe651b7f0ca111a44bf8ec8cde9dcb98b9ab4","modified":1670395329127},{"_id":"source/_posts/2021-08-04-性能优化-webpack优化.md","hash":"e21a6bd70d7edc8635d7c19d1cb80c2502d45b5c","modified":1659594593701},{"_id":"public/2021/08/04/性能优化-webpack优化/index.html","hash":"96d7e9060759d77cb05cfaed2954f5630477d1c3","modified":1670395329127},{"_id":"public/archives/2021/08/index.html","hash":"2253f401bae6038d7fbfba771fd467900481124b","modified":1670395329127},{"_id":"source/_posts/2021-08-16-设计模式-策略模式.md","hash":"1ff18c207be21c1abbfadde6e2ef73c9a02c7b75","modified":1659594593701},{"_id":"source/_posts/2021-08-04-性能优化-webpack优化/cover.png","hash":"a2f12437a7f9374724a61032daba7a1046e03e55","modified":1629170542160},{"_id":"source/_posts/2021-08-16-设计模式-策略模式/shutterstock.jpg","hash":"89b1e9784ed088cc4f210f6ff869667219162273","modified":1629170687269},{"_id":"public/2021/08/16/设计模式-策略模式/index.html","hash":"e9ba61a7421e65a4fcb1d1028fa2c21b1efe54b4","modified":1670395329127},{"_id":"public/categories/性能优化/index.html","hash":"951f3eca0ce6383427f0ef46f0768cafd9a2e477","modified":1670395329127},{"_id":"public/tags/设计模式/index.html","hash":"6a171aaeb8caffd38bcd26ebe6293ad5166d6b3c","modified":1670395329127},{"_id":"public/tags/webpack/index.html","hash":"372e44418f531ff77610b566f79c247301f47b8a","modified":1670395329127},{"_id":"public/tags/性能优化/index.html","hash":"a163e621378679c7958db209d13486555825e29f","modified":1670395329127},{"_id":"public/2021/08/04/性能优化-webpack优化/cover.png","hash":"a2f12437a7f9374724a61032daba7a1046e03e55","modified":1670395329127},{"_id":"public/2021/08/16/设计模式-策略模式/shutterstock.jpg","hash":"89b1e9784ed088cc4f210f6ff869667219162273","modified":1670395329127},{"_id":"source/_posts/2021-08-18-设计模式-观察者模式.md","hash":"7b73678748639ab44b2c81557d6124ed5e4ec6b8","modified":1659594593717},{"_id":"source/_posts/2021-08-18-设计模式-观察者模式/viewing.jpg","hash":"6073abbe8de362b5185b8e1161e9ca36940f2b33","modified":1629266441487},{"_id":"public/2021/08/18/设计模式-观察者模式/index.html","hash":"27576124670c6baf10b58147ee8814e5dd4db7c7","modified":1670395329127},{"_id":"public/2021/08/18/设计模式-观察者模式/viewing.jpg","hash":"6073abbe8de362b5185b8e1161e9ca36940f2b33","modified":1670395329127},{"_id":"source/_posts/2021-08-18-设计模式-状态模式.md","hash":"921c2153965031f131e411f2f839fa399cdbc2f4","modified":1659594593717},{"_id":"source/_posts/2021-08-18-设计模式-设计模式原则.md","hash":"82391d2ffecaa69c2cd44fd030b51c9286163564","modified":1659594593717},{"_id":"source/_posts/2021-08-18-设计模式-设计模式原则/ISP-1.png","hash":"e25ff275ea97f91e69ba5591461ee64f13efa564","modified":1629358268905},{"_id":"source/_posts/2021-08-18-设计模式-设计模式原则/ISP-2.png","hash":"9c24e218790707e32ce4450bc2c0241042319858","modified":1629358361397},{"_id":"public/2021/08/18/设计模式-设计模式原则/index.html","hash":"4279b741beddbed0203ddcbff32d216bac1a1b29","modified":1670395329127},{"_id":"public/2021/08/18/设计模式-状态模式/index.html","hash":"d76525d3e42858398ee78c6eb54bfb24151abe36","modified":1670395329127},{"_id":"public/2021/08/18/设计模式-设计模式原则/ISP-1.png","hash":"e25ff275ea97f91e69ba5591461ee64f13efa564","modified":1670395329127},{"_id":"public/2021/08/18/设计模式-设计模式原则/ISP-2.png","hash":"9c24e218790707e32ce4450bc2c0241042319858","modified":1670395329127},{"_id":"source/_posts/2021-08-18-设计模式-设计模式原则/rules.jpg","hash":"dbe2f62377dc2ff138deabd05b78b1997de5744d","modified":1629365682401},{"_id":"public/2021/08/18/设计模式-设计模式原则/rules.jpg","hash":"dbe2f62377dc2ff138deabd05b78b1997de5744d","modified":1670395329127},{"_id":"source/_posts/2021-08-31-框架-vue和react的应用场景.md","hash":"7efa4305d2ab2ad27456a3ed7f7d0afa0f38fb8c","modified":1659594593717},{"_id":"source/_posts/2021-08-31-跨域.md","hash":"c18ffe58c73468f7f5174252f86165c27c8aa9a5","modified":1659594593717},{"_id":"public/2021/08/31/跨域/index.html","hash":"c0a666bd300268e58d54a499b1df476fd00682e3","modified":1670395329127},{"_id":"public/2021/08/31/框架-vue和react的应用场景/index.html","hash":"93f0d574dbc86c7c429f82ae2ad052a477f1e45b","modified":1670395329127},{"_id":"public/tags/框架/index.html","hash":"dc57f006c54309a7cf33ea767897bbb04fe835cc","modified":1670395329127},{"_id":"source/_posts/2021-09-08-设计模式-中介者模式.md","hash":"1dfc735762099795c6768ea9e76404f4ae95a3f4","modified":1659594593717},{"_id":"public/2021/09/08/设计模式-中介者模式/index.html","hash":"17ff02267acba50ec4cd6c1b8dbe455ba6706ada","modified":1670395329127},{"_id":"public/archives/2021/09/index.html","hash":"8829dce806f1aeffc9a4839a4fac8ad2f4e0384b","modified":1670395329127},{"_id":"source/_posts/2021-10-20-设计模式-迭代器模式.md","hash":"c3210efec84d8fc744e28bf08f69f0fb05b64667","modified":1659594593717},{"_id":"source/_posts/2022-01-11-算法-深度优先-广度优先.md","hash":"2417b31430b137e133733043dccb12cbd2decd29","modified":1659594593717},{"_id":"source/_posts/2022-12-02-vue3-composition-api.md","hash":"35b921390178501a31b3fcf9fddf5f2af0d75520","modified":1670395279624},{"_id":"public/2022/12/02/vue3-composition-api/index.html","hash":"1d7f2c76a504710c5877656f19701e5de52f5e44","modified":1670395329127},{"_id":"public/2022/01/11/算法-深度优先-广度优先/index.html","hash":"f2ceac1b618bda48d2a3638fe69b45d1dc0b78e5","modified":1670395329127},{"_id":"public/2021/10/20/设计模式-迭代器模式/index.html","hash":"f36d08838a8d8ee6fae67704425dd86abc9b416a","modified":1670395329127},{"_id":"public/archives/2/index.html","hash":"7f3aa6b5c27a1aaa6086f65c53b50abd0b8dfd67","modified":1670395329127},{"_id":"public/archives/archives/2/index.html","hash":"4912edda19381d7537b667fe14e155374a7fc2be","modified":1670395329127},{"_id":"public/archives/2021/10/index.html","hash":"004824ead85135df4282998602429bb82bd20c37","modified":1670395329127},{"_id":"public/archives/2022/index.html","hash":"9503c271f81d2630f42f564cd02c37e41dbae34f","modified":1670395329127},{"_id":"public/archives/2022/01/index.html","hash":"58d22be895af140a59b400cfa536dc90ffc6fdd6","modified":1670395329127},{"_id":"public/archives/2022/12/index.html","hash":"a5536cb4b42f9f528e610a65d47f8895cfe2bcad","modified":1670395329127},{"_id":"public/categories/composition/index.html","hash":"3295f5a92f8395e9e9aa1956d40cd4f1d65f24e3","modified":1670395329127},{"_id":"public/tags/算法/index.html","hash":"06f1de609482655f73b22ddf0d7c23eec5e2cbd1","modified":1670395329127},{"_id":"public/tags/vue3/index.html","hash":"d75091f6b6fcb5754b37d2725363335fa66f6a52","modified":1670395329127}],"Category":[{"name":"hexo","_id":"ckrnbizsq0006skv427h3bwdy"},{"name":"性能优化","_id":"cksfp8m3e000ecwv4cbjygpqk"},{"name":"composition","_id":"clb5vg2fh00002gv4e76h5as0"}],"Data":[],"Page":[{"layout":"404","description":"你来到了没有知识的荒原 :(","header-img":"img/404-bg.jpg","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"你来到了没有知识的荒原 :(\"\nheader-img: \"img/404-bg.jpg\"\n---\n","date":"2021-07-28T09:59:32.361Z","updated":"2021-07-28T09:59:32.361Z","path":"404.html","title":"","comments":1,"_id":"ckrnbizql0000skv4bsub22uj","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"archive","title":"Archives","header-img":"img/header_img/archive-bg.jpg","comments":0,"date":"2017-03-20T12:49:56.000Z","description":"Have goals that are actually meaningful to all of your brain, not just a piece, and immerse yourself in whatever it is you do.","_content":"","source":"archive/index.md","raw":"---\nlayout: \"archive\"\ntitle: \"Archives\"\nheader-img: \"img/header_img/archive-bg.jpg\"\ncomments: false\ndate: 2017-03-20 20:49:56\ndescription: \"Have goals that are actually meaningful to all of your brain, not just a piece, and immerse yourself in whatever it is you do.\"\n---\n","updated":"2021-07-28T09:59:32.394Z","path":"archive/index.html","_id":"ckrnbizsb0001skv4dkswg5z5","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"about","title":"About","date":"2016-04-20T20:48:33.000Z","description":"When you get up early and work hard, when you stay up late, when you feel too tired to stand up again, but still support the night when you get up, that is the power of dreams.","header-img":"img/header_img/Iron-Man-3.jpg","comments":1,"_content":"\n> The scenery we often see is that a person always looks up and envy the happiness of others, but finds that he is being looked up and envious. In fact, everyone is happy, but your happiness is often in the eyes of others.\n> &nbsp;\n> Life is a one-way trip. Even if there are some regrets, we have no chance to start all over again. It is better to smile and cherish the future than to confuse the past, because life is not as if.\n> &nbsp;\n> Don't think too much, just do it now.","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2016-04-21 04:48:33\ndescription: \"When you get up early and work hard, when you stay up late, when you feel too tired to stand up again, but still support the night when you get up, that is the power of dreams.\"\nheader-img: \"img/header_img/Iron-Man-3.jpg\"\ncomments: true\n---\n\n> The scenery we often see is that a person always looks up and envy the happiness of others, but finds that he is being looked up and envious. In fact, everyone is happy, but your happiness is often in the eyes of others.\n> &nbsp;\n> Life is a one-way trip. Even if there are some regrets, we have no chance to start all over again. It is better to smile and cherish the future than to confuse the past, because life is not as if.\n> &nbsp;\n> Don't think too much, just do it now.","updated":"2021-07-28T09:59:32.393Z","path":"about/index.html","_id":"ckrnbizsc0002skv4ea3sbrc5","content":"<blockquote>\n<p>The scenery we often see is that a person always looks up and envy the happiness of others, but finds that he is being looked up and envious. In fact, everyone is happy, but your happiness is often in the eyes of others.<br>&nbsp;<br>Life is a one-way trip. Even if there are some regrets, we have no chance to start all over again. It is better to smile and cherish the future than to confuse the past, because life is not as if.<br>&nbsp;<br>Don’t think too much, just do it now.</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>The scenery we often see is that a person always looks up and envy the happiness of others, but finds that he is being looked up and envious. In fact, everyone is happy, but your happiness is often in the eyes of others.<br>&nbsp;<br>Life is a one-way trip. Even if there are some regrets, we have no chance to start all over again. It is better to smile and cherish the future than to confuse the past, because life is not as if.<br>&nbsp;<br>Don’t think too much, just do it now.</p>\n</blockquote>\n"},{"layout":"categories","title":"Categories","header-img":"img/header_img/categories-bg.jpg","comments":0,"date":"2017-03-20T12:49:56.000Z","description":"Approach the New Year with resolve to find the opportunities hidden in each new day.","_content":"","source":"categories/index.md","raw":"---\nlayout: \"categories\"\ntitle: \"Categories\"\nheader-img: \"img/header_img/categories-bg.jpg\"\ncomments: false\ndate: 2017-03-20 20:49:56\ndescription: \"Approach the New Year with resolve to find the opportunities hidden in each new day.\"\n---\n","updated":"2021-07-28T09:59:32.395Z","path":"categories/index.html","_id":"ckrnbizso0004skv45r0xbdpu","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"photography","title":"Photography","date":"2019-12-08T12:48:22.000Z","description":"The greatness of photography is to fix the moment into eternity, Attach importance to surprise you inadvertently, this is one of the photography's charm!","header-img":"img/header_img/photography-bg.jpeg","comments":1,"_content":"\n![甬江夜景](photo/yjyj1.jpeg)\n<strong>甬江夜景</strong>\n<em>Shoot by 程仁松 on 2019-12-08</em>\n<span>拍摄于宁波，暂无说明</span>\n\n![甬江夜景](photo/yjyj2.jpeg)\n<strong>甬江夜景</strong>\n<em>Shoot by 程仁松 on 2019-12-08</em>\n<span>拍摄于宁波，暂无说明</span>\n\n![甬江夜景](photo/yjyj3.jpeg)\n<strong>甬江夜景</strong>\n<em>Shoot by 程仁松 on 2019-12-08</em>\n<span>拍摄于宁波，暂无说明</span>\n\n![晚霞](photo/wx.jpeg)\n<strong>晚霞</strong>\n<em>Shoot by dusign on 2019-12-08</em>\n<span>拍摄于宁波，暂无说明</span>\n\n![云彩](photo/yc.jpeg)\n<strong>云彩</strong>\n<em>Shoot by dusign on 2019-12-08</em>\n<span>拍摄于宁波，暂无说明</span>\n\n![绿水青山](photo/lsqs.jpeg)\n<strong>绿水青山</strong>\n<em>Shoot by dusign on 2019-12-08</em>\n<span>拍摄于宁波，暂无说明</span>\n\n![涟漪](photo/ly.jpeg)\n<strong>涟漪</strong>\n<em>Shoot by dusign on 2019-12-08</em>\n<span>拍摄于宁波，暂无说明</span>\n\n![东方明珠](photo/dfmz.jpeg)\n<strong>东方明珠</strong>\n<em>Shoot by dusign on 2019-12-08</em>\n<span>拍摄于上海，暂无说明</span>\n\n","source":"photography/index.md","raw":"---\nlayout: \"photography\"\ntitle: \"Photography\"\ndate: 2019-12-08 20:48:22\ndescription: \"The greatness of photography is to fix the moment into eternity, Attach importance to surprise you inadvertently, this is one of the photography's charm!\"\nheader-img: \"img/header_img/photography-bg.jpeg\"\ncomments: true\n---\n\n![甬江夜景](photo/yjyj1.jpeg)\n<strong>甬江夜景</strong>\n<em>Shoot by 程仁松 on 2019-12-08</em>\n<span>拍摄于宁波，暂无说明</span>\n\n![甬江夜景](photo/yjyj2.jpeg)\n<strong>甬江夜景</strong>\n<em>Shoot by 程仁松 on 2019-12-08</em>\n<span>拍摄于宁波，暂无说明</span>\n\n![甬江夜景](photo/yjyj3.jpeg)\n<strong>甬江夜景</strong>\n<em>Shoot by 程仁松 on 2019-12-08</em>\n<span>拍摄于宁波，暂无说明</span>\n\n![晚霞](photo/wx.jpeg)\n<strong>晚霞</strong>\n<em>Shoot by dusign on 2019-12-08</em>\n<span>拍摄于宁波，暂无说明</span>\n\n![云彩](photo/yc.jpeg)\n<strong>云彩</strong>\n<em>Shoot by dusign on 2019-12-08</em>\n<span>拍摄于宁波，暂无说明</span>\n\n![绿水青山](photo/lsqs.jpeg)\n<strong>绿水青山</strong>\n<em>Shoot by dusign on 2019-12-08</em>\n<span>拍摄于宁波，暂无说明</span>\n\n![涟漪](photo/ly.jpeg)\n<strong>涟漪</strong>\n<em>Shoot by dusign on 2019-12-08</em>\n<span>拍摄于宁波，暂无说明</span>\n\n![东方明珠](photo/dfmz.jpeg)\n<strong>东方明珠</strong>\n<em>Shoot by dusign on 2019-12-08</em>\n<span>拍摄于上海，暂无说明</span>\n\n","updated":"2021-07-28T09:59:32.521Z","path":"photography/index.html","_id":"ckrnbizsp0005skv4brl359l4","content":"<p><img src=\"photo/yjyj1.jpeg\" alt=\"甬江夜景\"><br><strong>甬江夜景</strong><br><em>Shoot by 程仁松 on 2019-12-08</em><br><span>拍摄于宁波，暂无说明</span></p>\n<p><img src=\"photo/yjyj2.jpeg\" alt=\"甬江夜景\"><br><strong>甬江夜景</strong><br><em>Shoot by 程仁松 on 2019-12-08</em><br><span>拍摄于宁波，暂无说明</span></p>\n<p><img src=\"photo/yjyj3.jpeg\" alt=\"甬江夜景\"><br><strong>甬江夜景</strong><br><em>Shoot by 程仁松 on 2019-12-08</em><br><span>拍摄于宁波，暂无说明</span></p>\n<p><img src=\"photo/wx.jpeg\" alt=\"晚霞\"><br><strong>晚霞</strong><br><em>Shoot by dusign on 2019-12-08</em><br><span>拍摄于宁波，暂无说明</span></p>\n<p><img src=\"photo/yc.jpeg\" alt=\"云彩\"><br><strong>云彩</strong><br><em>Shoot by dusign on 2019-12-08</em><br><span>拍摄于宁波，暂无说明</span></p>\n<p><img src=\"photo/lsqs.jpeg\" alt=\"绿水青山\"><br><strong>绿水青山</strong><br><em>Shoot by dusign on 2019-12-08</em><br><span>拍摄于宁波，暂无说明</span></p>\n<p><img src=\"photo/ly.jpeg\" alt=\"涟漪\"><br><strong>涟漪</strong><br><em>Shoot by dusign on 2019-12-08</em><br><span>拍摄于宁波，暂无说明</span></p>\n<p><img src=\"photo/dfmz.jpeg\" alt=\"东方明珠\"><br><strong>东方明珠</strong><br><em>Shoot by dusign on 2019-12-08</em><br><span>拍摄于上海，暂无说明</span></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"photo/yjyj1.jpeg\" alt=\"甬江夜景\"><br><strong>甬江夜景</strong><br><em>Shoot by 程仁松 on 2019-12-08</em><br><span>拍摄于宁波，暂无说明</span></p>\n<p><img src=\"photo/yjyj2.jpeg\" alt=\"甬江夜景\"><br><strong>甬江夜景</strong><br><em>Shoot by 程仁松 on 2019-12-08</em><br><span>拍摄于宁波，暂无说明</span></p>\n<p><img src=\"photo/yjyj3.jpeg\" alt=\"甬江夜景\"><br><strong>甬江夜景</strong><br><em>Shoot by 程仁松 on 2019-12-08</em><br><span>拍摄于宁波，暂无说明</span></p>\n<p><img src=\"photo/wx.jpeg\" alt=\"晚霞\"><br><strong>晚霞</strong><br><em>Shoot by dusign on 2019-12-08</em><br><span>拍摄于宁波，暂无说明</span></p>\n<p><img src=\"photo/yc.jpeg\" alt=\"云彩\"><br><strong>云彩</strong><br><em>Shoot by dusign on 2019-12-08</em><br><span>拍摄于宁波，暂无说明</span></p>\n<p><img src=\"photo/lsqs.jpeg\" alt=\"绿水青山\"><br><strong>绿水青山</strong><br><em>Shoot by dusign on 2019-12-08</em><br><span>拍摄于宁波，暂无说明</span></p>\n<p><img src=\"photo/ly.jpeg\" alt=\"涟漪\"><br><strong>涟漪</strong><br><em>Shoot by dusign on 2019-12-08</em><br><span>拍摄于宁波，暂无说明</span></p>\n<p><img src=\"photo/dfmz.jpeg\" alt=\"东方明珠\"><br><strong>东方明珠</strong><br><em>Shoot by dusign on 2019-12-08</em><br><span>拍摄于上海，暂无说明</span></p>\n"},{"layout":"tags","title":"Tags","description":"One way to get the most out of life is to look upon it as an adventure.","header-img":"img/header_img/tag-bg.jpg","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"One way to get the most out of life is to look upon it as an adventure.\"\nheader-img: \"img/header_img/tag-bg.jpg\"\n---\n","date":"2021-07-28T09:59:32.644Z","updated":"2021-07-28T09:59:32.644Z","path":"tags/index.html","comments":1,"_id":"ckrnbizst0008skv4gzv2htsg","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"First-day","catalog":true,"comments":1,"indexing":true,"header-img":"first-day.jpg","top":false,"tocnum":true,"date":"2021-07-28T11:01:23.000Z","subtitle":null,"_content":"# First day\n\n这是开始新的旅程,记录在web前端生涯的每个点,每个细小的放大!","source":"_posts/2021-07-28-first-day.md","raw":"---\ntitle: First-day\ncatalog: true\ncomments: true\nindexing: true\nheader-img: first-day.jpg\ntop: false\ntocnum: true\ndate: 2021-07-28 19:01:23\nsubtitle:\ntags:\ncategories:\n---\n# First day\n\n这是开始新的旅程,记录在web前端生涯的每个点,每个细小的放大!","slug":"first-day","published":1,"updated":"2022-08-04T06:29:53.701Z","_id":"ckrndr93y0000f0v4b2l626aq","layout":"post","photos":[],"link":"","content":"<h1 id=\"First-day\"><a href=\"#First-day\" class=\"headerlink\" title=\"First day\"></a>First day</h1><p>这是开始新的旅程,记录在web前端生涯的每个点,每个细小的放大!</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"First-day\"><a href=\"#First-day\" class=\"headerlink\" title=\"First day\"></a>First day</h1><p>这是开始新的旅程,记录在web前端生涯的每个点,每个细小的放大!</p>\n"},{"title":"性能优化-webpack优化","catalog":true,"comments":1,"indexing":true,"header-img":"cover.png","top":false,"tocnum":true,"date":"2021-08-04T06:28:31.000Z","subtitle":null,"_content":"\n# 性能优化 - webpack\n\n## 缩小范围,节约时间\n支撑点：缩小loader对文件的搜索范围,避免对不必要的文件进行转义。\n方法：通过对include/exclude 进行设置\n```js\nmodule:{\n    rules: [{\n        exclude: /node_modules/,\n        include: /src/,\n        test: /\\.js$/,\n        user: \"babel-loader\"\n    }]\n}\n```\n\n## 缓存副本,节约时间\n支撑点：配置cache缓存loader对文件的编译副本,未做修改的文件,不会重新编译。\n方法：大部分的loader/plugin都支持cache功能。\n```js\nmodule: {\n    rules: [{\n        test: /\\.js/,\n        us: [{\n            loader: \"babel-loader\",\n            options: { cacheDirectory: true }\n        }]\n    }]\n},\nplugin: [\n    new EslintPlugin({cache: true})\n]\n```\n\n## 配置resolve,提高搜索速度,节约时间\n支撑点：配置了resolve,webpack不用层层查找。\n方法：\n    - alias: 映射模块路径\n    - extensive: 表明文件后缀\n    - noParse: 过滤无依赖文件\n```js\n  resolve: {\n      alias: {\n          '#': '',\n          '@': 'src',\n          'swiper': 'swiper/js/swiper.min.js',\n      },\n      extensive: ['.js','.ts','.tsx', '.jsx', '.vue']\n  }\n```\n## 提前构建,节约时间\n支撑点：配置DLLPlugin将第三方依赖提前打好包。\n方法：\n    - 首先配置那些依赖作为DLL,生成DLL与DLL映射表文件\n  ```js\n    export default {\n        entry: {\n            vendor: [\"react\", \"react-dom\", \"react-router-dom\"]\n        },\n        mode: \"production\",\n        optimization: {\n            splitChunks: {\n                cacheGroups: {\n                    vendor: {\n                        chunks: \"all\",\n                        name: \"vendor\",\n                        test: \"/node_modules/\"\n                    }\n                }\n            }\n        },\n        output: {\n            filename:\"[name].all.js\",\n            library: \"[name]\",\n            path: AbsPath(\"dist/static\")\n        },\n        plugins: [\n            new DefinePlugin({\n                \"process.env.NODE_ENV\": JSON.stringify(\"development\")\n            }),\n            new DLLPLugin({\n                name: \"[name]\",\n                path: AbsPath(\"dist/static/[name]-manifest.json\")\n            });\n        ]\n    }\n  ```\n  然后再 `package.json` 里配置执行脚本且每次构建前硬执行该脚本\n```js\n    {\n        \"scripts\": {\n            \"dll\": \"webpack --config webpack.dll.js\"\n        }\n    }\n```\n\n最后链接`DLL文件`并告知`webpack`可命中的`DLL文件`让其自行读取。\nplugin 在打包时自动插入`DLL文件`。\n```js\n    import { DLLReferencePlugin } from \"webpack\";\n    import HtmlTagsPlugin from \"html-webpack-tags-plugin\";\n    export default {\n        plugins: [\n            new DllReferencePlugin({\n                manifest: AbsPath(\"dist/static/vendor-manifest.json\")\n            }),\n            new HtmlTagsPlugin({\n                append: false,\n                publicPath: \"/\",\n                tags: [\"static/vendor.all.js\"]\n            })\n        ]\n    }\n```\n配置后可节约几秒钟，当然也可以使用`autodll-webpack-plugin`,自动配置。\n\n## 并行构建,节约时间\n配置Thread将Loader单进程转换为多进程,好处是`释放CPU多核并发的优势`。在使用`webpack`构建项目时，webpack构建项目时需要大量的处理文件，构建过程时密集型的计算，随着构建程度的加深，文件会越来越多，后期会越来越慢。\n并且，在nodejs环境中，webpack是单线程的，待处理的任务是需要一件一件的去处理。\n`文件读写`和`计算操作`是不可避免的，充分利用多线程的能力，去开启新的THread节约时间。\n注意：多线程的开启是会消耗性能的。\n```js\nimport Os from 'os';\n\nexport default {\n    module: {\n        rules: [{\n            test: /\\.js$/,\n            use: [{\n                loader: \"thread-loader\",\n                options: {workers: Os.cpus().length}\n            },{\n                loader: \"babel-loader\",\n                options: {cacheDirectory: true}\n            }]\n        }]\n    }\n}\n\n```\n\n## 可视结构,分析依赖,节约时间\n配置BundleAnalyzer分析打包文件结构,通过可视化分析那么包打包体积过大，从而分析出原因，提高打包时间。\nBundleAnalyzer是webpack官方提供的一款插件，可视化的显示出 打包后的体积，相互依赖关系，文件是否重复，压缩后的体积等数据。\n```js\nimport BundleAnalyzerPlugin from 'webpack-bundle-analyzer';\nexport default {\n    plugin: [\n        new BundleAnalyzerPlugin()\n    ]\n}\n```\n\n## 分割代码，提高利用率，减少体积\n分割各个模块,减少重复代码,提高利用率。\n`webpack v4`中已经使用`splitChunks`来代替`CommonsChunkPlugin`实现代码分割\n```js\nexport default {\n    optimization: {\n        runtimeChunk: {name: \"manifest\"},\n        splitChunks: {\n            cacheGroups: {\n                common: {\n                    minchunks: 2,\n                    name: \"common\",\n                    priority: 5,\n                    reuseExistingChunk: true, // 重用以存在的代码\n                    test: AbsPath(\"src\")\n                },\n                vendor: {\n                    chunks: \"inital\", //代码分割类型\n                    name: \"vendor\", // 代码名称\n                    priority: 10, // 优先级\n                    test: /node_modules/ // 校验文件正则\n                }\n            }, // 缓存组\n            chunks: \"all\" // 代码分割类型：all 全部，async 异步， initial 入口\n        } // 代码块分割\n    }\n}\n\n```\n\n## 摇树优化,减小体积\n删除项目中未被引用的代码,移除重复的代码,移除未被引用的代码。\n`摇树优化`只是对`ECM规范`生效,针对静态数据进行解析,只有`import/export`才支持静态解析,`import`会在编译过程中执行,即在执行过程前,并且具有提升效果,会在整个代码前执行。\nwebpack 将环境设置为生产环境才会生效。\n```js\n    export default {\n        mode: {\n            production\n        }\n    }\n```\n\n## 动态垫片,减少体积\n通过垫片服务根据UA返回当前浏览器代码垫片,好处：`无需将繁重的代码垫片打包进去`。每次构建都配置`@babel\\preset-env`和`core-js`根据需求将`polyfill`打包进来。\n`@babel\\preset-env`提供的`useBuiltIns`可按需导`Polyfill`。\n    - false: 无视`target.browsers`将所有Polyfill加载进来。\n    - entry: 根据 `target.browsers`将部分Polyfill加载进来，需要载入口文件中引入 `import \"core-js/stable\"`;\n    - usage: 根据`target.browsers`和检测代码里ES6的使用情况部分`Polyfill`加载进来(无需在入口文件中引入 `import \"core-js/stable\"`);\n\n`动态垫片`可根据浏览器`UserAgent`从`browserlist`查找出当前浏览器哪些特性缺乏支持从而返回这些特性的`Polyfill`.\n```js\nimport HtmlTagsPlugin from \"html-webpack-tags-plugin\";\n\nexport default {\n    plugins: [\n        new HtmlTagsPlugin({\n            append: false, // 在生成资源后插入\n            publicPath: false, // 使用公共路径\n            tags: [\"https://polyfill.alicdn.com/polyfill.min.js\"] // 资源路径\n        })\n    ]\n};\n```\n\n## 按需加载,减少体积\n将路由页面/触发性功能单独打包为一个文件,使用时才加载。好处是 `减轻首屏渲染的负担`。功能越多导致其打包的体积越大，会导致首屏渲染速度越慢。\n\n首屏渲染时,只需要对应`js代码`而无需其他`js代码`。再webpack v4中,提供按需切割加载功能，配合`import()`做到首屏渲染减包的效果,从而加快首屏渲染。\n\n```js\n    const Login = () => import (/* wepackChunkName: \"login\" */\"../..//views/login\")\n\n```\n运行起来可能会报错,需要再babel中接入`@babel/plugin-syntax-dynamic-import`\n```js\n    {\n        \"babel\": {\n            \"plugins\": [\n                \"@babel/plugin-syntax-dynamic-import\"\n            ]\n        }\n    }\n```\n\n\n## 作用提升,减少体积\n分析模块依赖,将打包好的模块合并到一个函数中。\n减少函数声明和内存花销。\n\n未开启`作用提升`前,构建后的代码会存在大量函数闭包。由于模块依赖,通过`webpack`打包后会转换成`IIFE`,大量闭包会导致打包后体积增大。\n\n在开启后,构建代码会按照引入顺序放到一个函数作用域里，通过适当命名以防止变量名突变，从而减少函数声明和内存花销。\n\n在`webpack`里只需要打包环境设置 `生产环境`或者显示设置 `concateateModules`;\n```js\nexport default {\n    optimzation: {\n        concatenateModules: true\n    }\n}\n```\n\n## 压缩资源,减少体积\n压缩HTML/CSS/JSS 字体/图像/音频/视频, 好处是 `更有效减少打包体积`。\n\n针对 `HTML`: 使用`html-webpack-plugin`\n```js\n    import HtmlPlugin from 'html-webpack-plugin'\n\n    export default {\n        plugins: [\n            htmlPlugin({\n                minify: {\n                    collapseWhitespace: true,\n                    removeComments: true\n                }\n            })\n        ]\n    }\n```\n针对`css/js`代码,分别使用插件开启压缩\n    - optimize-css-assets-webpack-plugin: 压缩css代码\n    - uglifyjs-webpack-plugin: ES5 js代码\n    - terser-webpack-plugin: ES6 js代码\n```js\nimport OptimizeCssAssetsPlugin from \"optimize-css-assets-webpack-plugin\";\nimport TerserPlugin from \"terser-webpack-plugin\";\nimport UglifyjsPlugin from \"uglifyjs-webpack-plugin\";\n\nconst compressOpts = type => ({\n    cache: true, // 缓存文件\n    parallel: true, // 并行处理\n    [`${type}Options`]: {\n        beautify: false,\n        compress: { drop_console: true }\n    } // 压缩配置\n});\nconst compressCss = new OptimizeCssAssetsPlugin({\n    cssProcessorOptions: {\n        autoprefixer: { remove: false }, // 设置autoprefixer保留过时样式\n        safe: true // 避免cssnano重新计算z-index\n    }\n});\nconst compressJs = USE_ES6\n    ? new TerserPlugin(compressOpts(\"terser\"))\n    : new UglifyjsPlugin(compressOpts(\"uglify\"));\n\nexport default {\n    // ...\n    optimization: {\n        // ...\n        minimizer: [compressCss, compressJs] // 代码压缩\n    }\n};\n```\n\n## 总结\n\n| 减少时间                                          | 减少体积                                                     |\n| :------------------------------------------------ | :----------------------------------------------------------- |\n| 配置loader的属性include/exclude 减少构建的范围    | 摇树优化，根据import/export 过滤的模块,生产环境模式下        |\n| 配置loader/plugin的cache去减少构建的时间          | 公共代码提取，使用splitChunk，分割代码                       |\n| 配置resolve定向搜索                               | 动态垫片，使用第三方polyfill服务                             |\n| 配置DLL 提前打好第三方包<br />auto-webpack-plugin | 按需加载，使用@babel/plugin-syntax-dynamic-import,结合webpack-import()使用<br />减少路由功能组件加载首页 |\n| 配置thread-loader开启多线程                       | 作用提升，相同的依赖，打包好放置同一个函数中，配置生产环境或者显示设置concatenateModules:true |\n| 配置webpack-bundle-analyzer可视化分析包问题       | 压缩资源：html/css/js,相对应的plugin                         |\n\n\n\n原文出处： https://juejin.cn/post/6981673766178783262","source":"_posts/2021-08-04-性能优化-webpack优化.md","raw":"---\ntitle: 性能优化-webpack优化\ncatalog: true\ncomments: true\nindexing: true\nheader-img: cover.png\ntop: false\ntocnum: true\ndate: 2021-08-04 14:28:31\nsubtitle:\ntags: \n- webpack  \n- 性能优化\ncategories: 性能优化\n---\n\n# 性能优化 - webpack\n\n## 缩小范围,节约时间\n支撑点：缩小loader对文件的搜索范围,避免对不必要的文件进行转义。\n方法：通过对include/exclude 进行设置\n```js\nmodule:{\n    rules: [{\n        exclude: /node_modules/,\n        include: /src/,\n        test: /\\.js$/,\n        user: \"babel-loader\"\n    }]\n}\n```\n\n## 缓存副本,节约时间\n支撑点：配置cache缓存loader对文件的编译副本,未做修改的文件,不会重新编译。\n方法：大部分的loader/plugin都支持cache功能。\n```js\nmodule: {\n    rules: [{\n        test: /\\.js/,\n        us: [{\n            loader: \"babel-loader\",\n            options: { cacheDirectory: true }\n        }]\n    }]\n},\nplugin: [\n    new EslintPlugin({cache: true})\n]\n```\n\n## 配置resolve,提高搜索速度,节约时间\n支撑点：配置了resolve,webpack不用层层查找。\n方法：\n    - alias: 映射模块路径\n    - extensive: 表明文件后缀\n    - noParse: 过滤无依赖文件\n```js\n  resolve: {\n      alias: {\n          '#': '',\n          '@': 'src',\n          'swiper': 'swiper/js/swiper.min.js',\n      },\n      extensive: ['.js','.ts','.tsx', '.jsx', '.vue']\n  }\n```\n## 提前构建,节约时间\n支撑点：配置DLLPlugin将第三方依赖提前打好包。\n方法：\n    - 首先配置那些依赖作为DLL,生成DLL与DLL映射表文件\n  ```js\n    export default {\n        entry: {\n            vendor: [\"react\", \"react-dom\", \"react-router-dom\"]\n        },\n        mode: \"production\",\n        optimization: {\n            splitChunks: {\n                cacheGroups: {\n                    vendor: {\n                        chunks: \"all\",\n                        name: \"vendor\",\n                        test: \"/node_modules/\"\n                    }\n                }\n            }\n        },\n        output: {\n            filename:\"[name].all.js\",\n            library: \"[name]\",\n            path: AbsPath(\"dist/static\")\n        },\n        plugins: [\n            new DefinePlugin({\n                \"process.env.NODE_ENV\": JSON.stringify(\"development\")\n            }),\n            new DLLPLugin({\n                name: \"[name]\",\n                path: AbsPath(\"dist/static/[name]-manifest.json\")\n            });\n        ]\n    }\n  ```\n  然后再 `package.json` 里配置执行脚本且每次构建前硬执行该脚本\n```js\n    {\n        \"scripts\": {\n            \"dll\": \"webpack --config webpack.dll.js\"\n        }\n    }\n```\n\n最后链接`DLL文件`并告知`webpack`可命中的`DLL文件`让其自行读取。\nplugin 在打包时自动插入`DLL文件`。\n```js\n    import { DLLReferencePlugin } from \"webpack\";\n    import HtmlTagsPlugin from \"html-webpack-tags-plugin\";\n    export default {\n        plugins: [\n            new DllReferencePlugin({\n                manifest: AbsPath(\"dist/static/vendor-manifest.json\")\n            }),\n            new HtmlTagsPlugin({\n                append: false,\n                publicPath: \"/\",\n                tags: [\"static/vendor.all.js\"]\n            })\n        ]\n    }\n```\n配置后可节约几秒钟，当然也可以使用`autodll-webpack-plugin`,自动配置。\n\n## 并行构建,节约时间\n配置Thread将Loader单进程转换为多进程,好处是`释放CPU多核并发的优势`。在使用`webpack`构建项目时，webpack构建项目时需要大量的处理文件，构建过程时密集型的计算，随着构建程度的加深，文件会越来越多，后期会越来越慢。\n并且，在nodejs环境中，webpack是单线程的，待处理的任务是需要一件一件的去处理。\n`文件读写`和`计算操作`是不可避免的，充分利用多线程的能力，去开启新的THread节约时间。\n注意：多线程的开启是会消耗性能的。\n```js\nimport Os from 'os';\n\nexport default {\n    module: {\n        rules: [{\n            test: /\\.js$/,\n            use: [{\n                loader: \"thread-loader\",\n                options: {workers: Os.cpus().length}\n            },{\n                loader: \"babel-loader\",\n                options: {cacheDirectory: true}\n            }]\n        }]\n    }\n}\n\n```\n\n## 可视结构,分析依赖,节约时间\n配置BundleAnalyzer分析打包文件结构,通过可视化分析那么包打包体积过大，从而分析出原因，提高打包时间。\nBundleAnalyzer是webpack官方提供的一款插件，可视化的显示出 打包后的体积，相互依赖关系，文件是否重复，压缩后的体积等数据。\n```js\nimport BundleAnalyzerPlugin from 'webpack-bundle-analyzer';\nexport default {\n    plugin: [\n        new BundleAnalyzerPlugin()\n    ]\n}\n```\n\n## 分割代码，提高利用率，减少体积\n分割各个模块,减少重复代码,提高利用率。\n`webpack v4`中已经使用`splitChunks`来代替`CommonsChunkPlugin`实现代码分割\n```js\nexport default {\n    optimization: {\n        runtimeChunk: {name: \"manifest\"},\n        splitChunks: {\n            cacheGroups: {\n                common: {\n                    minchunks: 2,\n                    name: \"common\",\n                    priority: 5,\n                    reuseExistingChunk: true, // 重用以存在的代码\n                    test: AbsPath(\"src\")\n                },\n                vendor: {\n                    chunks: \"inital\", //代码分割类型\n                    name: \"vendor\", // 代码名称\n                    priority: 10, // 优先级\n                    test: /node_modules/ // 校验文件正则\n                }\n            }, // 缓存组\n            chunks: \"all\" // 代码分割类型：all 全部，async 异步， initial 入口\n        } // 代码块分割\n    }\n}\n\n```\n\n## 摇树优化,减小体积\n删除项目中未被引用的代码,移除重复的代码,移除未被引用的代码。\n`摇树优化`只是对`ECM规范`生效,针对静态数据进行解析,只有`import/export`才支持静态解析,`import`会在编译过程中执行,即在执行过程前,并且具有提升效果,会在整个代码前执行。\nwebpack 将环境设置为生产环境才会生效。\n```js\n    export default {\n        mode: {\n            production\n        }\n    }\n```\n\n## 动态垫片,减少体积\n通过垫片服务根据UA返回当前浏览器代码垫片,好处：`无需将繁重的代码垫片打包进去`。每次构建都配置`@babel\\preset-env`和`core-js`根据需求将`polyfill`打包进来。\n`@babel\\preset-env`提供的`useBuiltIns`可按需导`Polyfill`。\n    - false: 无视`target.browsers`将所有Polyfill加载进来。\n    - entry: 根据 `target.browsers`将部分Polyfill加载进来，需要载入口文件中引入 `import \"core-js/stable\"`;\n    - usage: 根据`target.browsers`和检测代码里ES6的使用情况部分`Polyfill`加载进来(无需在入口文件中引入 `import \"core-js/stable\"`);\n\n`动态垫片`可根据浏览器`UserAgent`从`browserlist`查找出当前浏览器哪些特性缺乏支持从而返回这些特性的`Polyfill`.\n```js\nimport HtmlTagsPlugin from \"html-webpack-tags-plugin\";\n\nexport default {\n    plugins: [\n        new HtmlTagsPlugin({\n            append: false, // 在生成资源后插入\n            publicPath: false, // 使用公共路径\n            tags: [\"https://polyfill.alicdn.com/polyfill.min.js\"] // 资源路径\n        })\n    ]\n};\n```\n\n## 按需加载,减少体积\n将路由页面/触发性功能单独打包为一个文件,使用时才加载。好处是 `减轻首屏渲染的负担`。功能越多导致其打包的体积越大，会导致首屏渲染速度越慢。\n\n首屏渲染时,只需要对应`js代码`而无需其他`js代码`。再webpack v4中,提供按需切割加载功能，配合`import()`做到首屏渲染减包的效果,从而加快首屏渲染。\n\n```js\n    const Login = () => import (/* wepackChunkName: \"login\" */\"../..//views/login\")\n\n```\n运行起来可能会报错,需要再babel中接入`@babel/plugin-syntax-dynamic-import`\n```js\n    {\n        \"babel\": {\n            \"plugins\": [\n                \"@babel/plugin-syntax-dynamic-import\"\n            ]\n        }\n    }\n```\n\n\n## 作用提升,减少体积\n分析模块依赖,将打包好的模块合并到一个函数中。\n减少函数声明和内存花销。\n\n未开启`作用提升`前,构建后的代码会存在大量函数闭包。由于模块依赖,通过`webpack`打包后会转换成`IIFE`,大量闭包会导致打包后体积增大。\n\n在开启后,构建代码会按照引入顺序放到一个函数作用域里，通过适当命名以防止变量名突变，从而减少函数声明和内存花销。\n\n在`webpack`里只需要打包环境设置 `生产环境`或者显示设置 `concateateModules`;\n```js\nexport default {\n    optimzation: {\n        concatenateModules: true\n    }\n}\n```\n\n## 压缩资源,减少体积\n压缩HTML/CSS/JSS 字体/图像/音频/视频, 好处是 `更有效减少打包体积`。\n\n针对 `HTML`: 使用`html-webpack-plugin`\n```js\n    import HtmlPlugin from 'html-webpack-plugin'\n\n    export default {\n        plugins: [\n            htmlPlugin({\n                minify: {\n                    collapseWhitespace: true,\n                    removeComments: true\n                }\n            })\n        ]\n    }\n```\n针对`css/js`代码,分别使用插件开启压缩\n    - optimize-css-assets-webpack-plugin: 压缩css代码\n    - uglifyjs-webpack-plugin: ES5 js代码\n    - terser-webpack-plugin: ES6 js代码\n```js\nimport OptimizeCssAssetsPlugin from \"optimize-css-assets-webpack-plugin\";\nimport TerserPlugin from \"terser-webpack-plugin\";\nimport UglifyjsPlugin from \"uglifyjs-webpack-plugin\";\n\nconst compressOpts = type => ({\n    cache: true, // 缓存文件\n    parallel: true, // 并行处理\n    [`${type}Options`]: {\n        beautify: false,\n        compress: { drop_console: true }\n    } // 压缩配置\n});\nconst compressCss = new OptimizeCssAssetsPlugin({\n    cssProcessorOptions: {\n        autoprefixer: { remove: false }, // 设置autoprefixer保留过时样式\n        safe: true // 避免cssnano重新计算z-index\n    }\n});\nconst compressJs = USE_ES6\n    ? new TerserPlugin(compressOpts(\"terser\"))\n    : new UglifyjsPlugin(compressOpts(\"uglify\"));\n\nexport default {\n    // ...\n    optimization: {\n        // ...\n        minimizer: [compressCss, compressJs] // 代码压缩\n    }\n};\n```\n\n## 总结\n\n| 减少时间                                          | 减少体积                                                     |\n| :------------------------------------------------ | :----------------------------------------------------------- |\n| 配置loader的属性include/exclude 减少构建的范围    | 摇树优化，根据import/export 过滤的模块,生产环境模式下        |\n| 配置loader/plugin的cache去减少构建的时间          | 公共代码提取，使用splitChunk，分割代码                       |\n| 配置resolve定向搜索                               | 动态垫片，使用第三方polyfill服务                             |\n| 配置DLL 提前打好第三方包<br />auto-webpack-plugin | 按需加载，使用@babel/plugin-syntax-dynamic-import,结合webpack-import()使用<br />减少路由功能组件加载首页 |\n| 配置thread-loader开启多线程                       | 作用提升，相同的依赖，打包好放置同一个函数中，配置生产环境或者显示设置concatenateModules:true |\n| 配置webpack-bundle-analyzer可视化分析包问题       | 压缩资源：html/css/js,相对应的plugin                         |\n\n\n\n原文出处： https://juejin.cn/post/6981673766178783262","slug":"性能优化-webpack优化","published":1,"updated":"2022-08-04T06:29:53.701Z","_id":"ckrx47cas0000e4v41dwo1v6z","layout":"post","photos":[],"link":"","content":"<h1 id=\"性能优化-webpack\"><a href=\"#性能优化-webpack\" class=\"headerlink\" title=\"性能优化 - webpack\"></a>性能优化 - webpack</h1><h2 id=\"缩小范围-节约时间\"><a href=\"#缩小范围-节约时间\" class=\"headerlink\" title=\"缩小范围,节约时间\"></a>缩小范围,节约时间</h2><p>支撑点：缩小loader对文件的搜索范围,避免对不必要的文件进行转义。<br>方法：通过对include/exclude 进行设置<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>:&#123;</span><br><span class=\"line\">    rules: [&#123;</span><br><span class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">        include: <span class=\"regexp\">/src/</span>,</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">        user: <span class=\"string\">\"babel-loader\"</span></span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"缓存副本-节约时间\"><a href=\"#缓存副本-节约时间\" class=\"headerlink\" title=\"缓存副本,节约时间\"></a>缓存副本,节约时间</h2><p>支撑点：配置cache缓存loader对文件的编译副本,未做修改的文件,不会重新编译。<br>方法：大部分的loader/plugin都支持cache功能。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [&#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.js/</span>,</span><br><span class=\"line\">        us: [&#123;</span><br><span class=\"line\">            loader: <span class=\"string\">\"babel-loader\"</span>,</span><br><span class=\"line\">            options: &#123; <span class=\"attr\">cacheDirectory</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">plugin: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> EslintPlugin(&#123;<span class=\"attr\">cache</span>: <span class=\"literal\">true</span>&#125;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"配置resolve-提高搜索速度-节约时间\"><a href=\"#配置resolve-提高搜索速度-节约时间\" class=\"headerlink\" title=\"配置resolve,提高搜索速度,节约时间\"></a>配置resolve,提高搜索速度,节约时间</h2><p>支撑点：配置了resolve,webpack不用层层查找。<br>方法：</p>\n<pre><code>- alias: 映射模块路径\n- extensive: 表明文件后缀\n- noParse: 过滤无依赖文件\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolve: &#123;</span><br><span class=\"line\">    alias: &#123;</span><br><span class=\"line\">        <span class=\"string\">'#'</span>: <span class=\"string\">''</span>,</span><br><span class=\"line\">        <span class=\"string\">'@'</span>: <span class=\"string\">'src'</span>,</span><br><span class=\"line\">        <span class=\"string\">'swiper'</span>: <span class=\"string\">'swiper/js/swiper.min.js'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    extensive: [<span class=\"string\">'.js'</span>,<span class=\"string\">'.ts'</span>,<span class=\"string\">'.tsx'</span>, <span class=\"string\">'.jsx'</span>, <span class=\"string\">'.vue'</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"提前构建-节约时间\"><a href=\"#提前构建-节约时间\" class=\"headerlink\" title=\"提前构建,节约时间\"></a>提前构建,节约时间</h2><p>支撑点：配置DLLPlugin将第三方依赖提前打好包。<br>方法：</p>\n<pre><code>- 首先配置那些依赖作为DLL,生成DLL与DLL映射表文件\n</code></pre>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        vendor: [<span class=\"string\">\"react\"</span>, <span class=\"string\">\"react-dom\"</span>, <span class=\"string\">\"react-router-dom\"</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mode: <span class=\"string\">\"production\"</span>,</span><br><span class=\"line\">    optimization: &#123;</span><br><span class=\"line\">        splitChunks: &#123;</span><br><span class=\"line\">            cacheGroups: &#123;</span><br><span class=\"line\">                vendor: &#123;</span><br><span class=\"line\">                    chunks: <span class=\"string\">\"all\"</span>,</span><br><span class=\"line\">                    name: <span class=\"string\">\"vendor\"</span>,</span><br><span class=\"line\">                    test: <span class=\"string\">\"/node_modules/\"</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename:<span class=\"string\">\"[name].all.js\"</span>,</span><br><span class=\"line\">        library: <span class=\"string\">\"[name]\"</span>,</span><br><span class=\"line\">        path: AbsPath(<span class=\"string\">\"dist/static\"</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> DefinePlugin(&#123;</span><br><span class=\"line\">            <span class=\"string\">\"process.env.NODE_ENV\"</span>: <span class=\"built_in\">JSON</span>.stringify(<span class=\"string\">\"development\"</span>)</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> DLLPLugin(&#123;</span><br><span class=\"line\">            name: <span class=\"string\">\"[name]\"</span>,</span><br><span class=\"line\">            path: AbsPath(<span class=\"string\">\"dist/static/[name]-manifest.json\"</span>)</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  然后再 <code>package.json</code> 里配置执行脚本且每次构建前硬执行该脚本<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"dll\"</span>: <span class=\"string\">\"webpack --config webpack.dll.js\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最后链接<code>DLL文件</code>并告知<code>webpack</code>可命中的<code>DLL文件</code>让其自行读取。<br>plugin 在打包时自动插入<code>DLL文件</code>。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; DLLReferencePlugin &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"webpack\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> HtmlTagsPlugin <span class=\"keyword\">from</span> <span class=\"string\">\"html-webpack-tags-plugin\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> DllReferencePlugin(&#123;</span><br><span class=\"line\">            manifest: AbsPath(<span class=\"string\">\"dist/static/vendor-manifest.json\"</span>)</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> HtmlTagsPlugin(&#123;</span><br><span class=\"line\">            append: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            publicPath: <span class=\"string\">\"/\"</span>,</span><br><span class=\"line\">            tags: [<span class=\"string\">\"static/vendor.all.js\"</span>]</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>配置后可节约几秒钟，当然也可以使用<code>autodll-webpack-plugin</code>,自动配置。</p>\n<h2 id=\"并行构建-节约时间\"><a href=\"#并行构建-节约时间\" class=\"headerlink\" title=\"并行构建,节约时间\"></a>并行构建,节约时间</h2><p>配置Thread将Loader单进程转换为多进程,好处是<code>释放CPU多核并发的优势</code>。在使用<code>webpack</code>构建项目时，webpack构建项目时需要大量的处理文件，构建过程时密集型的计算，随着构建程度的加深，文件会越来越多，后期会越来越慢。<br>并且，在nodejs环境中，webpack是单线程的，待处理的任务是需要一件一件的去处理。<br><code>文件读写</code>和<code>计算操作</code>是不可避免的，充分利用多线程的能力，去开启新的THread节约时间。<br>注意：多线程的开启是会消耗性能的。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Os <span class=\"keyword\">from</span> <span class=\"string\">'os'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        rules: [&#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">            use: [&#123;</span><br><span class=\"line\">                loader: <span class=\"string\">\"thread-loader\"</span>,</span><br><span class=\"line\">                options: &#123;<span class=\"attr\">workers</span>: Os.cpus().length&#125;</span><br><span class=\"line\">            &#125;,&#123;</span><br><span class=\"line\">                loader: <span class=\"string\">\"babel-loader\"</span>,</span><br><span class=\"line\">                options: &#123;<span class=\"attr\">cacheDirectory</span>: <span class=\"literal\">true</span>&#125;</span><br><span class=\"line\">            &#125;]</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"可视结构-分析依赖-节约时间\"><a href=\"#可视结构-分析依赖-节约时间\" class=\"headerlink\" title=\"可视结构,分析依赖,节约时间\"></a>可视结构,分析依赖,节约时间</h2><p>配置BundleAnalyzer分析打包文件结构,通过可视化分析那么包打包体积过大，从而分析出原因，提高打包时间。<br>BundleAnalyzer是webpack官方提供的一款插件，可视化的显示出 打包后的体积，相互依赖关系，文件是否重复，压缩后的体积等数据。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> BundleAnalyzerPlugin <span class=\"keyword\">from</span> <span class=\"string\">'webpack-bundle-analyzer'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    plugin: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> BundleAnalyzerPlugin()</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"分割代码，提高利用率，减少体积\"><a href=\"#分割代码，提高利用率，减少体积\" class=\"headerlink\" title=\"分割代码，提高利用率，减少体积\"></a>分割代码，提高利用率，减少体积</h2><p>分割各个模块,减少重复代码,提高利用率。<br><code>webpack v4</code>中已经使用<code>splitChunks</code>来代替<code>CommonsChunkPlugin</code>实现代码分割<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    optimization: &#123;</span><br><span class=\"line\">        runtimeChunk: &#123;<span class=\"attr\">name</span>: <span class=\"string\">\"manifest\"</span>&#125;,</span><br><span class=\"line\">        splitChunks: &#123;</span><br><span class=\"line\">            cacheGroups: &#123;</span><br><span class=\"line\">                common: &#123;</span><br><span class=\"line\">                    minchunks: <span class=\"number\">2</span>,</span><br><span class=\"line\">                    name: <span class=\"string\">\"common\"</span>,</span><br><span class=\"line\">                    priority: <span class=\"number\">5</span>,</span><br><span class=\"line\">                    reuseExistingChunk: <span class=\"literal\">true</span>, <span class=\"comment\">// 重用以存在的代码</span></span><br><span class=\"line\">                    test: AbsPath(<span class=\"string\">\"src\"</span>)</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                vendor: &#123;</span><br><span class=\"line\">                    chunks: <span class=\"string\">\"inital\"</span>, <span class=\"comment\">//代码分割类型</span></span><br><span class=\"line\">                    name: <span class=\"string\">\"vendor\"</span>, <span class=\"comment\">// 代码名称</span></span><br><span class=\"line\">                    priority: <span class=\"number\">10</span>, <span class=\"comment\">// 优先级</span></span><br><span class=\"line\">                    test: <span class=\"regexp\">/node_modules/</span> <span class=\"comment\">// 校验文件正则</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;, <span class=\"comment\">// 缓存组</span></span><br><span class=\"line\">            chunks: <span class=\"string\">\"all\"</span> <span class=\"comment\">// 代码分割类型：all 全部，async 异步， initial 入口</span></span><br><span class=\"line\">        &#125; <span class=\"comment\">// 代码块分割</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"摇树优化-减小体积\"><a href=\"#摇树优化-减小体积\" class=\"headerlink\" title=\"摇树优化,减小体积\"></a>摇树优化,减小体积</h2><p>删除项目中未被引用的代码,移除重复的代码,移除未被引用的代码。<br><code>摇树优化</code>只是对<code>ECM规范</code>生效,针对静态数据进行解析,只有<code>import/export</code>才支持静态解析,<code>import</code>会在编译过程中执行,即在执行过程前,并且具有提升效果,会在整个代码前执行。<br>webpack 将环境设置为生产环境才会生效。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    mode: &#123;</span><br><span class=\"line\">        production</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"动态垫片-减少体积\"><a href=\"#动态垫片-减少体积\" class=\"headerlink\" title=\"动态垫片,减少体积\"></a>动态垫片,减少体积</h2><p>通过垫片服务根据UA返回当前浏览器代码垫片,好处：<code>无需将繁重的代码垫片打包进去</code>。每次构建都配置<code>@babel\\preset-env</code>和<code>core-js</code>根据需求将<code>polyfill</code>打包进来。<br><code>@babel\\preset-env</code>提供的<code>useBuiltIns</code>可按需导<code>Polyfill</code>。</p>\n<pre><code>- false: 无视`target.browsers`将所有Polyfill加载进来。\n- entry: 根据 `target.browsers`将部分Polyfill加载进来，需要载入口文件中引入 `import &quot;core-js/stable&quot;`;\n- usage: 根据`target.browsers`和检测代码里ES6的使用情况部分`Polyfill`加载进来(无需在入口文件中引入 `import &quot;core-js/stable&quot;`);\n</code></pre><p><code>动态垫片</code>可根据浏览器<code>UserAgent</code>从<code>browserlist</code>查找出当前浏览器哪些特性缺乏支持从而返回这些特性的<code>Polyfill</code>.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> HtmlTagsPlugin <span class=\"keyword\">from</span> <span class=\"string\">\"html-webpack-tags-plugin\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> HtmlTagsPlugin(&#123;</span><br><span class=\"line\">            append: <span class=\"literal\">false</span>, <span class=\"comment\">// 在生成资源后插入</span></span><br><span class=\"line\">            publicPath: <span class=\"literal\">false</span>, <span class=\"comment\">// 使用公共路径</span></span><br><span class=\"line\">            tags: [<span class=\"string\">\"https://polyfill.alicdn.com/polyfill.min.js\"</span>] <span class=\"comment\">// 资源路径</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"按需加载-减少体积\"><a href=\"#按需加载-减少体积\" class=\"headerlink\" title=\"按需加载,减少体积\"></a>按需加载,减少体积</h2><p>将路由页面/触发性功能单独打包为一个文件,使用时才加载。好处是 <code>减轻首屏渲染的负担</code>。功能越多导致其打包的体积越大，会导致首屏渲染速度越慢。</p>\n<p>首屏渲染时,只需要对应<code>js代码</code>而无需其他<code>js代码</code>。再webpack v4中,提供按需切割加载功能，配合<code>import()</code>做到首屏渲染减包的效果,从而加快首屏渲染。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Login = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span> (<span class=\"comment\">/* wepackChunkName: \"login\" */</span><span class=\"string\">\"../..//views/login\"</span>)</span><br></pre></td></tr></table></figure>\n<p>运行起来可能会报错,需要再babel中接入<code>@babel/plugin-syntax-dynamic-import</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"babel\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"plugins\"</span>: [</span><br><span class=\"line\">            <span class=\"string\">\"@babel/plugin-syntax-dynamic-import\"</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"作用提升-减少体积\"><a href=\"#作用提升-减少体积\" class=\"headerlink\" title=\"作用提升,减少体积\"></a>作用提升,减少体积</h2><p>分析模块依赖,将打包好的模块合并到一个函数中。<br>减少函数声明和内存花销。</p>\n<p>未开启<code>作用提升</code>前,构建后的代码会存在大量函数闭包。由于模块依赖,通过<code>webpack</code>打包后会转换成<code>IIFE</code>,大量闭包会导致打包后体积增大。</p>\n<p>在开启后,构建代码会按照引入顺序放到一个函数作用域里，通过适当命名以防止变量名突变，从而减少函数声明和内存花销。</p>\n<p>在<code>webpack</code>里只需要打包环境设置 <code>生产环境</code>或者显示设置 <code>concateateModules</code>;<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    optimzation: &#123;</span><br><span class=\"line\">        concatenateModules: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"压缩资源-减少体积\"><a href=\"#压缩资源-减少体积\" class=\"headerlink\" title=\"压缩资源,减少体积\"></a>压缩资源,减少体积</h2><p>压缩HTML/CSS/JSS 字体/图像/音频/视频, 好处是 <code>更有效减少打包体积</code>。</p>\n<p>针对 <code>HTML</code>: 使用<code>html-webpack-plugin</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> HtmlPlugin <span class=\"keyword\">from</span> <span class=\"string\">'html-webpack-plugin'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        htmlPlugin(&#123;</span><br><span class=\"line\">            minify: &#123;</span><br><span class=\"line\">                collapseWhitespace: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                removeComments: <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>针对<code>css/js</code>代码,分别使用插件开启压缩</p>\n<pre><code>- optimize-css-assets-webpack-plugin: 压缩css代码\n- uglifyjs-webpack-plugin: ES5 js代码\n- terser-webpack-plugin: ES6 js代码\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> OptimizeCssAssetsPlugin <span class=\"keyword\">from</span> <span class=\"string\">\"optimize-css-assets-webpack-plugin\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> TerserPlugin <span class=\"keyword\">from</span> <span class=\"string\">\"terser-webpack-plugin\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> UglifyjsPlugin <span class=\"keyword\">from</span> <span class=\"string\">\"uglifyjs-webpack-plugin\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> compressOpts = <span class=\"function\"><span class=\"params\">type</span> =&gt;</span> (&#123;</span><br><span class=\"line\">    cache: <span class=\"literal\">true</span>, <span class=\"comment\">// 缓存文件</span></span><br><span class=\"line\">    parallel: <span class=\"literal\">true</span>, <span class=\"comment\">// 并行处理</span></span><br><span class=\"line\">    [<span class=\"string\">`<span class=\"subst\">$&#123;type&#125;</span>Options`</span>]: &#123;</span><br><span class=\"line\">        beautify: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        compress: &#123; <span class=\"attr\">drop_console</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">    &#125; <span class=\"comment\">// 压缩配置</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> compressCss = <span class=\"keyword\">new</span> OptimizeCssAssetsPlugin(&#123;</span><br><span class=\"line\">    cssProcessorOptions: &#123;</span><br><span class=\"line\">        autoprefixer: &#123; <span class=\"attr\">remove</span>: <span class=\"literal\">false</span> &#125;, <span class=\"comment\">// 设置autoprefixer保留过时样式</span></span><br><span class=\"line\">        safe: <span class=\"literal\">true</span> <span class=\"comment\">// 避免cssnano重新计算z-index</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> compressJs = USE_ES6</span><br><span class=\"line\">    ? <span class=\"keyword\">new</span> TerserPlugin(compressOpts(<span class=\"string\">\"terser\"</span>))</span><br><span class=\"line\">    : <span class=\"keyword\">new</span> UglifyjsPlugin(compressOpts(<span class=\"string\">\"uglify\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    optimization: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        minimizer: [compressCss, compressJs] <span class=\"comment\">// 代码压缩</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">减少时间</th>\n<th style=\"text-align:left\">减少体积</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">配置loader的属性include/exclude 减少构建的范围</td>\n<td style=\"text-align:left\">摇树优化，根据import/export 过滤的模块,生产环境模式下</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">配置loader/plugin的cache去减少构建的时间</td>\n<td style=\"text-align:left\">公共代码提取，使用splitChunk，分割代码</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">配置resolve定向搜索</td>\n<td style=\"text-align:left\">动态垫片，使用第三方polyfill服务</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">配置DLL 提前打好第三方包<br />auto-webpack-plugin</td>\n<td style=\"text-align:left\">按需加载，使用@babel/plugin-syntax-dynamic-import,结合webpack-import()使用<br />减少路由功能组件加载首页</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">配置thread-loader开启多线程</td>\n<td style=\"text-align:left\">作用提升，相同的依赖，打包好放置同一个函数中，配置生产环境或者显示设置concatenateModules:true</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">配置webpack-bundle-analyzer可视化分析包问题</td>\n<td style=\"text-align:left\">压缩资源：html/css/js,相对应的plugin</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>原文出处： <a href=\"https://juejin.cn/post/6981673766178783262\" target=\"_blank\" rel=\"noopener\">https://juejin.cn/post/6981673766178783262</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"性能优化-webpack\"><a href=\"#性能优化-webpack\" class=\"headerlink\" title=\"性能优化 - webpack\"></a>性能优化 - webpack</h1><h2 id=\"缩小范围-节约时间\"><a href=\"#缩小范围-节约时间\" class=\"headerlink\" title=\"缩小范围,节约时间\"></a>缩小范围,节约时间</h2><p>支撑点：缩小loader对文件的搜索范围,避免对不必要的文件进行转义。<br>方法：通过对include/exclude 进行设置<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>:&#123;</span><br><span class=\"line\">    rules: [&#123;</span><br><span class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">        include: <span class=\"regexp\">/src/</span>,</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">        user: <span class=\"string\">\"babel-loader\"</span></span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"缓存副本-节约时间\"><a href=\"#缓存副本-节约时间\" class=\"headerlink\" title=\"缓存副本,节约时间\"></a>缓存副本,节约时间</h2><p>支撑点：配置cache缓存loader对文件的编译副本,未做修改的文件,不会重新编译。<br>方法：大部分的loader/plugin都支持cache功能。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [&#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.js/</span>,</span><br><span class=\"line\">        us: [&#123;</span><br><span class=\"line\">            loader: <span class=\"string\">\"babel-loader\"</span>,</span><br><span class=\"line\">            options: &#123; <span class=\"attr\">cacheDirectory</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">plugin: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> EslintPlugin(&#123;<span class=\"attr\">cache</span>: <span class=\"literal\">true</span>&#125;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"配置resolve-提高搜索速度-节约时间\"><a href=\"#配置resolve-提高搜索速度-节约时间\" class=\"headerlink\" title=\"配置resolve,提高搜索速度,节约时间\"></a>配置resolve,提高搜索速度,节约时间</h2><p>支撑点：配置了resolve,webpack不用层层查找。<br>方法：</p>\n<pre><code>- alias: 映射模块路径\n- extensive: 表明文件后缀\n- noParse: 过滤无依赖文件\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resolve: &#123;</span><br><span class=\"line\">    alias: &#123;</span><br><span class=\"line\">        <span class=\"string\">'#'</span>: <span class=\"string\">''</span>,</span><br><span class=\"line\">        <span class=\"string\">'@'</span>: <span class=\"string\">'src'</span>,</span><br><span class=\"line\">        <span class=\"string\">'swiper'</span>: <span class=\"string\">'swiper/js/swiper.min.js'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    extensive: [<span class=\"string\">'.js'</span>,<span class=\"string\">'.ts'</span>,<span class=\"string\">'.tsx'</span>, <span class=\"string\">'.jsx'</span>, <span class=\"string\">'.vue'</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"提前构建-节约时间\"><a href=\"#提前构建-节约时间\" class=\"headerlink\" title=\"提前构建,节约时间\"></a>提前构建,节约时间</h2><p>支撑点：配置DLLPlugin将第三方依赖提前打好包。<br>方法：</p>\n<pre><code>- 首先配置那些依赖作为DLL,生成DLL与DLL映射表文件\n</code></pre>  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        vendor: [<span class=\"string\">\"react\"</span>, <span class=\"string\">\"react-dom\"</span>, <span class=\"string\">\"react-router-dom\"</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mode: <span class=\"string\">\"production\"</span>,</span><br><span class=\"line\">    optimization: &#123;</span><br><span class=\"line\">        splitChunks: &#123;</span><br><span class=\"line\">            cacheGroups: &#123;</span><br><span class=\"line\">                vendor: &#123;</span><br><span class=\"line\">                    chunks: <span class=\"string\">\"all\"</span>,</span><br><span class=\"line\">                    name: <span class=\"string\">\"vendor\"</span>,</span><br><span class=\"line\">                    test: <span class=\"string\">\"/node_modules/\"</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename:<span class=\"string\">\"[name].all.js\"</span>,</span><br><span class=\"line\">        library: <span class=\"string\">\"[name]\"</span>,</span><br><span class=\"line\">        path: AbsPath(<span class=\"string\">\"dist/static\"</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> DefinePlugin(&#123;</span><br><span class=\"line\">            <span class=\"string\">\"process.env.NODE_ENV\"</span>: <span class=\"built_in\">JSON</span>.stringify(<span class=\"string\">\"development\"</span>)</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> DLLPLugin(&#123;</span><br><span class=\"line\">            name: <span class=\"string\">\"[name]\"</span>,</span><br><span class=\"line\">            path: AbsPath(<span class=\"string\">\"dist/static/[name]-manifest.json\"</span>)</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  然后再 <code>package.json</code> 里配置执行脚本且每次构建前硬执行该脚本<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"dll\"</span>: <span class=\"string\">\"webpack --config webpack.dll.js\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最后链接<code>DLL文件</code>并告知<code>webpack</code>可命中的<code>DLL文件</code>让其自行读取。<br>plugin 在打包时自动插入<code>DLL文件</code>。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; DLLReferencePlugin &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"webpack\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> HtmlTagsPlugin <span class=\"keyword\">from</span> <span class=\"string\">\"html-webpack-tags-plugin\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> DllReferencePlugin(&#123;</span><br><span class=\"line\">            manifest: AbsPath(<span class=\"string\">\"dist/static/vendor-manifest.json\"</span>)</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> HtmlTagsPlugin(&#123;</span><br><span class=\"line\">            append: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            publicPath: <span class=\"string\">\"/\"</span>,</span><br><span class=\"line\">            tags: [<span class=\"string\">\"static/vendor.all.js\"</span>]</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>配置后可节约几秒钟，当然也可以使用<code>autodll-webpack-plugin</code>,自动配置。</p>\n<h2 id=\"并行构建-节约时间\"><a href=\"#并行构建-节约时间\" class=\"headerlink\" title=\"并行构建,节约时间\"></a>并行构建,节约时间</h2><p>配置Thread将Loader单进程转换为多进程,好处是<code>释放CPU多核并发的优势</code>。在使用<code>webpack</code>构建项目时，webpack构建项目时需要大量的处理文件，构建过程时密集型的计算，随着构建程度的加深，文件会越来越多，后期会越来越慢。<br>并且，在nodejs环境中，webpack是单线程的，待处理的任务是需要一件一件的去处理。<br><code>文件读写</code>和<code>计算操作</code>是不可避免的，充分利用多线程的能力，去开启新的THread节约时间。<br>注意：多线程的开启是会消耗性能的。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Os <span class=\"keyword\">from</span> <span class=\"string\">'os'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        rules: [&#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">            use: [&#123;</span><br><span class=\"line\">                loader: <span class=\"string\">\"thread-loader\"</span>,</span><br><span class=\"line\">                options: &#123;<span class=\"attr\">workers</span>: Os.cpus().length&#125;</span><br><span class=\"line\">            &#125;,&#123;</span><br><span class=\"line\">                loader: <span class=\"string\">\"babel-loader\"</span>,</span><br><span class=\"line\">                options: &#123;<span class=\"attr\">cacheDirectory</span>: <span class=\"literal\">true</span>&#125;</span><br><span class=\"line\">            &#125;]</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"可视结构-分析依赖-节约时间\"><a href=\"#可视结构-分析依赖-节约时间\" class=\"headerlink\" title=\"可视结构,分析依赖,节约时间\"></a>可视结构,分析依赖,节约时间</h2><p>配置BundleAnalyzer分析打包文件结构,通过可视化分析那么包打包体积过大，从而分析出原因，提高打包时间。<br>BundleAnalyzer是webpack官方提供的一款插件，可视化的显示出 打包后的体积，相互依赖关系，文件是否重复，压缩后的体积等数据。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> BundleAnalyzerPlugin <span class=\"keyword\">from</span> <span class=\"string\">'webpack-bundle-analyzer'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    plugin: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> BundleAnalyzerPlugin()</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"分割代码，提高利用率，减少体积\"><a href=\"#分割代码，提高利用率，减少体积\" class=\"headerlink\" title=\"分割代码，提高利用率，减少体积\"></a>分割代码，提高利用率，减少体积</h2><p>分割各个模块,减少重复代码,提高利用率。<br><code>webpack v4</code>中已经使用<code>splitChunks</code>来代替<code>CommonsChunkPlugin</code>实现代码分割<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    optimization: &#123;</span><br><span class=\"line\">        runtimeChunk: &#123;<span class=\"attr\">name</span>: <span class=\"string\">\"manifest\"</span>&#125;,</span><br><span class=\"line\">        splitChunks: &#123;</span><br><span class=\"line\">            cacheGroups: &#123;</span><br><span class=\"line\">                common: &#123;</span><br><span class=\"line\">                    minchunks: <span class=\"number\">2</span>,</span><br><span class=\"line\">                    name: <span class=\"string\">\"common\"</span>,</span><br><span class=\"line\">                    priority: <span class=\"number\">5</span>,</span><br><span class=\"line\">                    reuseExistingChunk: <span class=\"literal\">true</span>, <span class=\"comment\">// 重用以存在的代码</span></span><br><span class=\"line\">                    test: AbsPath(<span class=\"string\">\"src\"</span>)</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                vendor: &#123;</span><br><span class=\"line\">                    chunks: <span class=\"string\">\"inital\"</span>, <span class=\"comment\">//代码分割类型</span></span><br><span class=\"line\">                    name: <span class=\"string\">\"vendor\"</span>, <span class=\"comment\">// 代码名称</span></span><br><span class=\"line\">                    priority: <span class=\"number\">10</span>, <span class=\"comment\">// 优先级</span></span><br><span class=\"line\">                    test: <span class=\"regexp\">/node_modules/</span> <span class=\"comment\">// 校验文件正则</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;, <span class=\"comment\">// 缓存组</span></span><br><span class=\"line\">            chunks: <span class=\"string\">\"all\"</span> <span class=\"comment\">// 代码分割类型：all 全部，async 异步， initial 入口</span></span><br><span class=\"line\">        &#125; <span class=\"comment\">// 代码块分割</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"摇树优化-减小体积\"><a href=\"#摇树优化-减小体积\" class=\"headerlink\" title=\"摇树优化,减小体积\"></a>摇树优化,减小体积</h2><p>删除项目中未被引用的代码,移除重复的代码,移除未被引用的代码。<br><code>摇树优化</code>只是对<code>ECM规范</code>生效,针对静态数据进行解析,只有<code>import/export</code>才支持静态解析,<code>import</code>会在编译过程中执行,即在执行过程前,并且具有提升效果,会在整个代码前执行。<br>webpack 将环境设置为生产环境才会生效。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    mode: &#123;</span><br><span class=\"line\">        production</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"动态垫片-减少体积\"><a href=\"#动态垫片-减少体积\" class=\"headerlink\" title=\"动态垫片,减少体积\"></a>动态垫片,减少体积</h2><p>通过垫片服务根据UA返回当前浏览器代码垫片,好处：<code>无需将繁重的代码垫片打包进去</code>。每次构建都配置<code>@babel\\preset-env</code>和<code>core-js</code>根据需求将<code>polyfill</code>打包进来。<br><code>@babel\\preset-env</code>提供的<code>useBuiltIns</code>可按需导<code>Polyfill</code>。</p>\n<pre><code>- false: 无视`target.browsers`将所有Polyfill加载进来。\n- entry: 根据 `target.browsers`将部分Polyfill加载进来，需要载入口文件中引入 `import &quot;core-js/stable&quot;`;\n- usage: 根据`target.browsers`和检测代码里ES6的使用情况部分`Polyfill`加载进来(无需在入口文件中引入 `import &quot;core-js/stable&quot;`);\n</code></pre><p><code>动态垫片</code>可根据浏览器<code>UserAgent</code>从<code>browserlist</code>查找出当前浏览器哪些特性缺乏支持从而返回这些特性的<code>Polyfill</code>.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> HtmlTagsPlugin <span class=\"keyword\">from</span> <span class=\"string\">\"html-webpack-tags-plugin\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> HtmlTagsPlugin(&#123;</span><br><span class=\"line\">            append: <span class=\"literal\">false</span>, <span class=\"comment\">// 在生成资源后插入</span></span><br><span class=\"line\">            publicPath: <span class=\"literal\">false</span>, <span class=\"comment\">// 使用公共路径</span></span><br><span class=\"line\">            tags: [<span class=\"string\">\"https://polyfill.alicdn.com/polyfill.min.js\"</span>] <span class=\"comment\">// 资源路径</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"按需加载-减少体积\"><a href=\"#按需加载-减少体积\" class=\"headerlink\" title=\"按需加载,减少体积\"></a>按需加载,减少体积</h2><p>将路由页面/触发性功能单独打包为一个文件,使用时才加载。好处是 <code>减轻首屏渲染的负担</code>。功能越多导致其打包的体积越大，会导致首屏渲染速度越慢。</p>\n<p>首屏渲染时,只需要对应<code>js代码</code>而无需其他<code>js代码</code>。再webpack v4中,提供按需切割加载功能，配合<code>import()</code>做到首屏渲染减包的效果,从而加快首屏渲染。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Login = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span> (<span class=\"comment\">/* wepackChunkName: \"login\" */</span><span class=\"string\">\"../..//views/login\"</span>)</span><br></pre></td></tr></table></figure>\n<p>运行起来可能会报错,需要再babel中接入<code>@babel/plugin-syntax-dynamic-import</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"babel\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"plugins\"</span>: [</span><br><span class=\"line\">            <span class=\"string\">\"@babel/plugin-syntax-dynamic-import\"</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"作用提升-减少体积\"><a href=\"#作用提升-减少体积\" class=\"headerlink\" title=\"作用提升,减少体积\"></a>作用提升,减少体积</h2><p>分析模块依赖,将打包好的模块合并到一个函数中。<br>减少函数声明和内存花销。</p>\n<p>未开启<code>作用提升</code>前,构建后的代码会存在大量函数闭包。由于模块依赖,通过<code>webpack</code>打包后会转换成<code>IIFE</code>,大量闭包会导致打包后体积增大。</p>\n<p>在开启后,构建代码会按照引入顺序放到一个函数作用域里，通过适当命名以防止变量名突变，从而减少函数声明和内存花销。</p>\n<p>在<code>webpack</code>里只需要打包环境设置 <code>生产环境</code>或者显示设置 <code>concateateModules</code>;<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    optimzation: &#123;</span><br><span class=\"line\">        concatenateModules: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"压缩资源-减少体积\"><a href=\"#压缩资源-减少体积\" class=\"headerlink\" title=\"压缩资源,减少体积\"></a>压缩资源,减少体积</h2><p>压缩HTML/CSS/JSS 字体/图像/音频/视频, 好处是 <code>更有效减少打包体积</code>。</p>\n<p>针对 <code>HTML</code>: 使用<code>html-webpack-plugin</code><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> HtmlPlugin <span class=\"keyword\">from</span> <span class=\"string\">'html-webpack-plugin'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        htmlPlugin(&#123;</span><br><span class=\"line\">            minify: &#123;</span><br><span class=\"line\">                collapseWhitespace: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                removeComments: <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>针对<code>css/js</code>代码,分别使用插件开启压缩</p>\n<pre><code>- optimize-css-assets-webpack-plugin: 压缩css代码\n- uglifyjs-webpack-plugin: ES5 js代码\n- terser-webpack-plugin: ES6 js代码\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> OptimizeCssAssetsPlugin <span class=\"keyword\">from</span> <span class=\"string\">\"optimize-css-assets-webpack-plugin\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> TerserPlugin <span class=\"keyword\">from</span> <span class=\"string\">\"terser-webpack-plugin\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> UglifyjsPlugin <span class=\"keyword\">from</span> <span class=\"string\">\"uglifyjs-webpack-plugin\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> compressOpts = <span class=\"function\"><span class=\"params\">type</span> =&gt;</span> (&#123;</span><br><span class=\"line\">    cache: <span class=\"literal\">true</span>, <span class=\"comment\">// 缓存文件</span></span><br><span class=\"line\">    parallel: <span class=\"literal\">true</span>, <span class=\"comment\">// 并行处理</span></span><br><span class=\"line\">    [<span class=\"string\">`<span class=\"subst\">$&#123;type&#125;</span>Options`</span>]: &#123;</span><br><span class=\"line\">        beautify: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        compress: &#123; <span class=\"attr\">drop_console</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">    &#125; <span class=\"comment\">// 压缩配置</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> compressCss = <span class=\"keyword\">new</span> OptimizeCssAssetsPlugin(&#123;</span><br><span class=\"line\">    cssProcessorOptions: &#123;</span><br><span class=\"line\">        autoprefixer: &#123; <span class=\"attr\">remove</span>: <span class=\"literal\">false</span> &#125;, <span class=\"comment\">// 设置autoprefixer保留过时样式</span></span><br><span class=\"line\">        safe: <span class=\"literal\">true</span> <span class=\"comment\">// 避免cssnano重新计算z-index</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> compressJs = USE_ES6</span><br><span class=\"line\">    ? <span class=\"keyword\">new</span> TerserPlugin(compressOpts(<span class=\"string\">\"terser\"</span>))</span><br><span class=\"line\">    : <span class=\"keyword\">new</span> UglifyjsPlugin(compressOpts(<span class=\"string\">\"uglify\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    optimization: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        minimizer: [compressCss, compressJs] <span class=\"comment\">// 代码压缩</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">减少时间</th>\n<th style=\"text-align:left\">减少体积</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">配置loader的属性include/exclude 减少构建的范围</td>\n<td style=\"text-align:left\">摇树优化，根据import/export 过滤的模块,生产环境模式下</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">配置loader/plugin的cache去减少构建的时间</td>\n<td style=\"text-align:left\">公共代码提取，使用splitChunk，分割代码</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">配置resolve定向搜索</td>\n<td style=\"text-align:left\">动态垫片，使用第三方polyfill服务</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">配置DLL 提前打好第三方包<br />auto-webpack-plugin</td>\n<td style=\"text-align:left\">按需加载，使用@babel/plugin-syntax-dynamic-import,结合webpack-import()使用<br />减少路由功能组件加载首页</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">配置thread-loader开启多线程</td>\n<td style=\"text-align:left\">作用提升，相同的依赖，打包好放置同一个函数中，配置生产环境或者显示设置concatenateModules:true</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">配置webpack-bundle-analyzer可视化分析包问题</td>\n<td style=\"text-align:left\">压缩资源：html/css/js,相对应的plugin</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>原文出处： <a href=\"https://juejin.cn/post/6981673766178783262\" target=\"_blank\" rel=\"noopener\">https://juejin.cn/post/6981673766178783262</a></p>\n"},{"title":"设计模式-策略模式","catalog":true,"comments":1,"indexing":true,"header-img":"shutterstock.jpg","top":false,"tocnum":true,"date":"2021-08-16T09:06:07.000Z","subtitle":null,"_content":"# 示例一 商品促销\n\n> 在过节期间,需要将一批商品打折处理,一部分商品8折出售,一部分商品9折出售,针对不同的客户给予折扣卷,普通用户满100返30,Vip用户满100返50.\n\n## 普通写法\n```js\nfunction discountPrice(data) {\n    if (data.role === 'vip') {\n        return data.price > 100 ? data.price - 50 : data.price;\n    }\n    if (data.role === 'common') {\n        return data.price > 100 ? data.price - 30 : data.price;\n    }\n    if ( data.type = 'a' ) {\n        return data.price * 100 * 90 / 10000\n    }\n    if ( data.type = 'b' ) {\n        return data.price * 100 * 80 / 10000\n    }\n}\n```\n\n- 普通写法将所有条件和算法都聚合在一起,以后扩展代码会臃肿不堪。\n- 在调用当前函数时,由于判断过多,消耗了性能。\n- 违反了设计模式的开闭原则。\n\n## 策略模式\n\n```js\nconst priceStrategy = function() {\n    const strategy = {\n        return30(price) {\n            return price - ParseInt(price/100)*30;\n        },\n        return50(price) {\n            return price - ParseInt(price/100)*50;\n        },\n        percent90(price) {\n            return price * 100 * 90 / 10000; \n        },\n        percent80(price) {\n            return price * 80 * 100 / 10000;\n        }\n    }\n\n    return function(algorithm, price) {\n        return strategy[algorithm] && strategy[algorithm](price);\n    }\n}\n\n// 调用\npriceStrategy( 'return30', price );\n```\n\n# 示例二 表单验证\n\n> 对于表单的验证，是否为空，是否为数字，是否为本地电话\n\n```js\nconst inputStrategy = () => {\n    const strategy = {\n        notNull(value) {\n            return /\\S+/.test(value) ? '请输入内容' : '';\n        },\n        number(value) {\n            return /^[0-9]$/.test(value) ? '' : '请输入数字';\n        },\n        phone(value) {\n            return /^\\d{3}\\-\\d{8}$|^\\d{4}\\-\\d{7}$/.test(value) ? '' : '请输入座机号码'；\n        }\n    }\n\n    return {\n        check( type, value ) {\n            value = value.trim();\n            return strategy[type] && strategy[type](value);\n        },\n        addStrategy(type, fn) {\n            strategy[type] = fn;\n        }\n    }\n}\n```\n\n# 示例三  权限验证\n> 根据用户账户,用户的等级,用户的标识,用户的类别 判断用户是否有权限登录\n\n根据条件设置策略规则\n```js\n    const RoleStrategy = () => {\n        const strategy = {\n            checkToken(data) {\n                return data.token === 'token';\n            },\n            checkLevel(data) {\n                return data.level > 1;\n            },\n            checkMark(data) {\n                return data.mark === 'mark';\n            },\n            checkType(data) {\n                return data.type === 0;\n            }\n        }\n        return {\n            check( type, value ) {\n                return strategy[type] && strategy[type](value);\n            },\n            addStrategy(type, fn) {\n                strategy[type] = fn;\n            }\n        }\n    }\n```\n\n设置校验规则\n\n```js\nclass Validator {\n    cache: [],\n    add( value, method ) {\n        this.cache.push(() => {\n            return RoleStrategy[method](value);\n        })\n    },\n    check() {\n        const result = true;\n        this.cache.forEach(item => {\n            if ( !item() ) {\n                return result = false;\n            }\n        })\n        return result;\n    }\n}\n```\n\n针对数据进行校验\n\n```js\nconst validator = new Validator();\nconst data = {\n    token = 'token',\n    level = 2,\n    mark = 'mark',\n    type = '0'\n}\nfor ( i in data ) {\n    validator.add( `check${i}`, data[i]);\n}\nconst result = validator.check();\n\n// to do  something\n\n```\n\n\n# 分析\n\n策略模式主要是负责处理算法逻辑并对算法做管理。\n\n* 优点\n  - 各个算法相互独立,互补干扰,可以重复利用,提升了利用率;\n  - 相对于扩展,策略模式方便扩展;\n  - 维护,更便于后期维护;\n\n* 缺点\n  - 用户必须了解算法,成本较高;\n  - 各个算法相互独立,相同部分不能共享;","source":"_posts/2021-08-16-设计模式-策略模式.md","raw":"---\ntitle: 设计模式-策略模式\ncatalog: true\ncomments: true\nindexing: true\nheader-img: shutterstock.jpg\ntop: false\ntocnum: true\ndate: 2021-08-16 17:06:07\nsubtitle:\ntags: \n- 设计模式 \ncategories:\n---\n# 示例一 商品促销\n\n> 在过节期间,需要将一批商品打折处理,一部分商品8折出售,一部分商品9折出售,针对不同的客户给予折扣卷,普通用户满100返30,Vip用户满100返50.\n\n## 普通写法\n```js\nfunction discountPrice(data) {\n    if (data.role === 'vip') {\n        return data.price > 100 ? data.price - 50 : data.price;\n    }\n    if (data.role === 'common') {\n        return data.price > 100 ? data.price - 30 : data.price;\n    }\n    if ( data.type = 'a' ) {\n        return data.price * 100 * 90 / 10000\n    }\n    if ( data.type = 'b' ) {\n        return data.price * 100 * 80 / 10000\n    }\n}\n```\n\n- 普通写法将所有条件和算法都聚合在一起,以后扩展代码会臃肿不堪。\n- 在调用当前函数时,由于判断过多,消耗了性能。\n- 违反了设计模式的开闭原则。\n\n## 策略模式\n\n```js\nconst priceStrategy = function() {\n    const strategy = {\n        return30(price) {\n            return price - ParseInt(price/100)*30;\n        },\n        return50(price) {\n            return price - ParseInt(price/100)*50;\n        },\n        percent90(price) {\n            return price * 100 * 90 / 10000; \n        },\n        percent80(price) {\n            return price * 80 * 100 / 10000;\n        }\n    }\n\n    return function(algorithm, price) {\n        return strategy[algorithm] && strategy[algorithm](price);\n    }\n}\n\n// 调用\npriceStrategy( 'return30', price );\n```\n\n# 示例二 表单验证\n\n> 对于表单的验证，是否为空，是否为数字，是否为本地电话\n\n```js\nconst inputStrategy = () => {\n    const strategy = {\n        notNull(value) {\n            return /\\S+/.test(value) ? '请输入内容' : '';\n        },\n        number(value) {\n            return /^[0-9]$/.test(value) ? '' : '请输入数字';\n        },\n        phone(value) {\n            return /^\\d{3}\\-\\d{8}$|^\\d{4}\\-\\d{7}$/.test(value) ? '' : '请输入座机号码'；\n        }\n    }\n\n    return {\n        check( type, value ) {\n            value = value.trim();\n            return strategy[type] && strategy[type](value);\n        },\n        addStrategy(type, fn) {\n            strategy[type] = fn;\n        }\n    }\n}\n```\n\n# 示例三  权限验证\n> 根据用户账户,用户的等级,用户的标识,用户的类别 判断用户是否有权限登录\n\n根据条件设置策略规则\n```js\n    const RoleStrategy = () => {\n        const strategy = {\n            checkToken(data) {\n                return data.token === 'token';\n            },\n            checkLevel(data) {\n                return data.level > 1;\n            },\n            checkMark(data) {\n                return data.mark === 'mark';\n            },\n            checkType(data) {\n                return data.type === 0;\n            }\n        }\n        return {\n            check( type, value ) {\n                return strategy[type] && strategy[type](value);\n            },\n            addStrategy(type, fn) {\n                strategy[type] = fn;\n            }\n        }\n    }\n```\n\n设置校验规则\n\n```js\nclass Validator {\n    cache: [],\n    add( value, method ) {\n        this.cache.push(() => {\n            return RoleStrategy[method](value);\n        })\n    },\n    check() {\n        const result = true;\n        this.cache.forEach(item => {\n            if ( !item() ) {\n                return result = false;\n            }\n        })\n        return result;\n    }\n}\n```\n\n针对数据进行校验\n\n```js\nconst validator = new Validator();\nconst data = {\n    token = 'token',\n    level = 2,\n    mark = 'mark',\n    type = '0'\n}\nfor ( i in data ) {\n    validator.add( `check${i}`, data[i]);\n}\nconst result = validator.check();\n\n// to do  something\n\n```\n\n\n# 分析\n\n策略模式主要是负责处理算法逻辑并对算法做管理。\n\n* 优点\n  - 各个算法相互独立,互补干扰,可以重复利用,提升了利用率;\n  - 相对于扩展,策略模式方便扩展;\n  - 维护,更便于后期维护;\n\n* 缺点\n  - 用户必须了解算法,成本较高;\n  - 各个算法相互独立,相同部分不能共享;","slug":"设计模式-策略模式","published":1,"updated":"2022-08-04T06:29:53.701Z","_id":"cksfi3i630000cwv44zmq9um3","layout":"post","photos":[],"link":"","content":"<h1 id=\"示例一-商品促销\"><a href=\"#示例一-商品促销\" class=\"headerlink\" title=\"示例一 商品促销\"></a>示例一 商品促销</h1><blockquote>\n<p>在过节期间,需要将一批商品打折处理,一部分商品8折出售,一部分商品9折出售,针对不同的客户给予折扣卷,普通用户满100返30,Vip用户满100返50.</p>\n</blockquote>\n<h2 id=\"普通写法\"><a href=\"#普通写法\" class=\"headerlink\" title=\"普通写法\"></a>普通写法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">discountPrice</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (data.role === <span class=\"string\">'vip'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data.price &gt; <span class=\"number\">100</span> ? data.price - <span class=\"number\">50</span> : data.price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (data.role === <span class=\"string\">'common'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data.price &gt; <span class=\"number\">100</span> ? data.price - <span class=\"number\">30</span> : data.price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( data.type = <span class=\"string\">'a'</span> ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data.price * <span class=\"number\">100</span> * <span class=\"number\">90</span> / <span class=\"number\">10000</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( data.type = <span class=\"string\">'b'</span> ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data.price * <span class=\"number\">100</span> * <span class=\"number\">80</span> / <span class=\"number\">10000</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>普通写法将所有条件和算法都聚合在一起,以后扩展代码会臃肿不堪。</li>\n<li>在调用当前函数时,由于判断过多,消耗了性能。</li>\n<li>违反了设计模式的开闭原则。</li>\n</ul>\n<h2 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> priceStrategy = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> strategy = &#123;</span><br><span class=\"line\">        return30(price) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> price - ParseInt(price/<span class=\"number\">100</span>)*<span class=\"number\">30</span>;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        return50(price) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> price - ParseInt(price/<span class=\"number\">100</span>)*<span class=\"number\">50</span>;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        percent90(price) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> price * <span class=\"number\">100</span> * <span class=\"number\">90</span> / <span class=\"number\">10000</span>; </span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        percent80(price) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> price * <span class=\"number\">80</span> * <span class=\"number\">100</span> / <span class=\"number\">10000</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">algorithm, price</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> strategy[algorithm] &amp;&amp; strategy[algorithm](price);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用</span></span><br><span class=\"line\">priceStrategy( <span class=\"string\">'return30'</span>, price );</span><br></pre></td></tr></table></figure>\n<h1 id=\"示例二-表单验证\"><a href=\"#示例二-表单验证\" class=\"headerlink\" title=\"示例二 表单验证\"></a>示例二 表单验证</h1><blockquote>\n<p>对于表单的验证，是否为空，是否为数字，是否为本地电话</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> inputStrategy = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> strategy = &#123;</span><br><span class=\"line\">        notNull(value) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"regexp\">/\\S+/</span>.test(value) ? <span class=\"string\">'请输入内容'</span> : <span class=\"string\">''</span>;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        number(value) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"regexp\">/^[0-9]$/</span>.test(value) ? <span class=\"string\">''</span> : <span class=\"string\">'请输入数字'</span>;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        phone(value) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"regexp\">/^\\d&#123;3&#125;\\-\\d&#123;8&#125;$|^\\d&#123;4&#125;\\-\\d&#123;7&#125;$/</span>.test(value) ? <span class=\"string\">''</span> : <span class=\"string\">'请输入座机号码'</span>；</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        check( type, value ) &#123;</span><br><span class=\"line\">            value = value.trim();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> strategy[type] &amp;&amp; strategy[type](value);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        addStrategy(type, fn) &#123;</span><br><span class=\"line\">            strategy[type] = fn;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"示例三-权限验证\"><a href=\"#示例三-权限验证\" class=\"headerlink\" title=\"示例三  权限验证\"></a>示例三  权限验证</h1><blockquote>\n<p>根据用户账户,用户的等级,用户的标识,用户的类别 判断用户是否有权限登录</p>\n</blockquote>\n<p>根据条件设置策略规则<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> RoleStrategy = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> strategy = &#123;</span><br><span class=\"line\">        checkToken(data) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> data.token === <span class=\"string\">'token'</span>;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        checkLevel(data) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> data.level &gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        checkMark(data) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> data.mark === <span class=\"string\">'mark'</span>;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        checkType(data) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> data.type === <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        check( type, value ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> strategy[type] &amp;&amp; strategy[type](value);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        addStrategy(type, fn) &#123;</span><br><span class=\"line\">            strategy[type] = fn;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>设置校验规则</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Validator</span> </span>&#123;</span><br><span class=\"line\">    cache: [],</span><br><span class=\"line\">    add( value, method ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cache.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> RoleStrategy[method](value);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    check() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> result = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cache.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( !item() ) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>针对数据进行校验</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> validator = <span class=\"keyword\">new</span> Validator();</span><br><span class=\"line\"><span class=\"keyword\">const</span> data = &#123;</span><br><span class=\"line\">    token = <span class=\"string\">'token'</span>,</span><br><span class=\"line\">    level = <span class=\"number\">2</span>,</span><br><span class=\"line\">    mark = <span class=\"string\">'mark'</span>,</span><br><span class=\"line\">    type = <span class=\"string\">'0'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> ( i <span class=\"keyword\">in</span> data ) &#123;</span><br><span class=\"line\">    validator.add( <span class=\"string\">`check<span class=\"subst\">$&#123;i&#125;</span>`</span>, data[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> result = validator.check();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// to do  something</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><p>策略模式主要是负责处理算法逻辑并对算法做管理。</p>\n<ul>\n<li><p>优点</p>\n<ul>\n<li>各个算法相互独立,互补干扰,可以重复利用,提升了利用率;</li>\n<li>相对于扩展,策略模式方便扩展;</li>\n<li>维护,更便于后期维护;</li>\n</ul>\n</li>\n<li><p>缺点</p>\n<ul>\n<li>用户必须了解算法,成本较高;</li>\n<li>各个算法相互独立,相同部分不能共享;</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"示例一-商品促销\"><a href=\"#示例一-商品促销\" class=\"headerlink\" title=\"示例一 商品促销\"></a>示例一 商品促销</h1><blockquote>\n<p>在过节期间,需要将一批商品打折处理,一部分商品8折出售,一部分商品9折出售,针对不同的客户给予折扣卷,普通用户满100返30,Vip用户满100返50.</p>\n</blockquote>\n<h2 id=\"普通写法\"><a href=\"#普通写法\" class=\"headerlink\" title=\"普通写法\"></a>普通写法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">discountPrice</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (data.role === <span class=\"string\">'vip'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data.price &gt; <span class=\"number\">100</span> ? data.price - <span class=\"number\">50</span> : data.price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (data.role === <span class=\"string\">'common'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data.price &gt; <span class=\"number\">100</span> ? data.price - <span class=\"number\">30</span> : data.price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( data.type = <span class=\"string\">'a'</span> ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data.price * <span class=\"number\">100</span> * <span class=\"number\">90</span> / <span class=\"number\">10000</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( data.type = <span class=\"string\">'b'</span> ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data.price * <span class=\"number\">100</span> * <span class=\"number\">80</span> / <span class=\"number\">10000</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>普通写法将所有条件和算法都聚合在一起,以后扩展代码会臃肿不堪。</li>\n<li>在调用当前函数时,由于判断过多,消耗了性能。</li>\n<li>违反了设计模式的开闭原则。</li>\n</ul>\n<h2 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> priceStrategy = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> strategy = &#123;</span><br><span class=\"line\">        return30(price) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> price - ParseInt(price/<span class=\"number\">100</span>)*<span class=\"number\">30</span>;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        return50(price) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> price - ParseInt(price/<span class=\"number\">100</span>)*<span class=\"number\">50</span>;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        percent90(price) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> price * <span class=\"number\">100</span> * <span class=\"number\">90</span> / <span class=\"number\">10000</span>; </span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        percent80(price) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> price * <span class=\"number\">80</span> * <span class=\"number\">100</span> / <span class=\"number\">10000</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">algorithm, price</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> strategy[algorithm] &amp;&amp; strategy[algorithm](price);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用</span></span><br><span class=\"line\">priceStrategy( <span class=\"string\">'return30'</span>, price );</span><br></pre></td></tr></table></figure>\n<h1 id=\"示例二-表单验证\"><a href=\"#示例二-表单验证\" class=\"headerlink\" title=\"示例二 表单验证\"></a>示例二 表单验证</h1><blockquote>\n<p>对于表单的验证，是否为空，是否为数字，是否为本地电话</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> inputStrategy = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> strategy = &#123;</span><br><span class=\"line\">        notNull(value) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"regexp\">/\\S+/</span>.test(value) ? <span class=\"string\">'请输入内容'</span> : <span class=\"string\">''</span>;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        number(value) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"regexp\">/^[0-9]$/</span>.test(value) ? <span class=\"string\">''</span> : <span class=\"string\">'请输入数字'</span>;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        phone(value) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"regexp\">/^\\d&#123;3&#125;\\-\\d&#123;8&#125;$|^\\d&#123;4&#125;\\-\\d&#123;7&#125;$/</span>.test(value) ? <span class=\"string\">''</span> : <span class=\"string\">'请输入座机号码'</span>；</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        check( type, value ) &#123;</span><br><span class=\"line\">            value = value.trim();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> strategy[type] &amp;&amp; strategy[type](value);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        addStrategy(type, fn) &#123;</span><br><span class=\"line\">            strategy[type] = fn;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"示例三-权限验证\"><a href=\"#示例三-权限验证\" class=\"headerlink\" title=\"示例三  权限验证\"></a>示例三  权限验证</h1><blockquote>\n<p>根据用户账户,用户的等级,用户的标识,用户的类别 判断用户是否有权限登录</p>\n</blockquote>\n<p>根据条件设置策略规则<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> RoleStrategy = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> strategy = &#123;</span><br><span class=\"line\">        checkToken(data) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> data.token === <span class=\"string\">'token'</span>;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        checkLevel(data) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> data.level &gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        checkMark(data) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> data.mark === <span class=\"string\">'mark'</span>;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        checkType(data) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> data.type === <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        check( type, value ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> strategy[type] &amp;&amp; strategy[type](value);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        addStrategy(type, fn) &#123;</span><br><span class=\"line\">            strategy[type] = fn;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>设置校验规则</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Validator</span> </span>&#123;</span><br><span class=\"line\">    cache: [],</span><br><span class=\"line\">    add( value, method ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cache.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> RoleStrategy[method](value);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    check() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> result = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cache.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( !item() ) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>针对数据进行校验</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> validator = <span class=\"keyword\">new</span> Validator();</span><br><span class=\"line\"><span class=\"keyword\">const</span> data = &#123;</span><br><span class=\"line\">    token = <span class=\"string\">'token'</span>,</span><br><span class=\"line\">    level = <span class=\"number\">2</span>,</span><br><span class=\"line\">    mark = <span class=\"string\">'mark'</span>,</span><br><span class=\"line\">    type = <span class=\"string\">'0'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> ( i <span class=\"keyword\">in</span> data ) &#123;</span><br><span class=\"line\">    validator.add( <span class=\"string\">`check<span class=\"subst\">$&#123;i&#125;</span>`</span>, data[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> result = validator.check();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// to do  something</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><p>策略模式主要是负责处理算法逻辑并对算法做管理。</p>\n<ul>\n<li><p>优点</p>\n<ul>\n<li>各个算法相互独立,互补干扰,可以重复利用,提升了利用率;</li>\n<li>相对于扩展,策略模式方便扩展;</li>\n<li>维护,更便于后期维护;</li>\n</ul>\n</li>\n<li><p>缺点</p>\n<ul>\n<li>用户必须了解算法,成本较高;</li>\n<li>各个算法相互独立,相同部分不能共享;</li>\n</ul>\n</li>\n</ul>\n"},{"title":"设计模式-观察者模式","catalog":true,"comments":1,"indexing":true,"header-img":"viewing.jpg","top":false,"tocnum":true,"date":"2021-08-18T01:56:25.000Z","subtitle":null,"_content":"\n\n# 观察者模式\n\n## 结构\n\n* 方法结构\n  - 订阅消息的方法\n  - 取消订阅消息的方法\n  - 发送订阅消息的方法 \n  - 消息的容器\n\n* 角色结构\n  - 观察者: 发布消息.\n  - 订阅者: 接收消息,去做相关联的操作.\n\n```js\nconst Observer  {\n    private _messages = {};\n    // 注册消息\n    register(type, fn) {\n        if ( typeof this._messages[type] === 'undefined' ) {\n            this._messages[type] = [fn]\n        } else {\n            this._messages[type].push(fn);\n        }\n    }\n    // 发布消息\n    fire(type, args) {\n        if (!this._messages[type]) return;\n        const events = {type, args: args || {}},\n        for ( let i = 0; i < this._messages[type].length ; i ++ ) {\n            this._messages[type][i](events);\n        }\n    }\n    // 取消订阅\n    remove(type, fn) {\n        if ( this._messages[type] instanceof Array ) {\n            const index = this._messages[type].findIndex((fnItem) => fnItem === fn);\n            this._messages[type].splice(index, 1);\n        }\n    }\n\n}\n```\n\n## 对象的解耦\n\n> 实例 当老师提问,学生回答.  老师提的多种问题, 学生回答,且有的会避开.\n\n学生\n\n```js\nclass Student {\n    private result = '';\n    \n    say() {\n        console.log(this.result);\n    }\n}\n\nStudent.prototype.answer = function(question) {\n    Observer.register(question, this.say);\n}\n\nStudent.prototype.sleep = function(question) {\n    Observer.remove(question, this.say);\n}\n```\n\n老师\n\n```js  \nclass Teacher {\n    ask(question) {\n        Observer.fire(question);\n    }\n}\n```\n\n流程\n\n```js\n// 学生的记录回答\nconst  student1 = new Student('学生1的回答');\nconst  student2 = new Student('学生2的回答');\nconst  student3 = new Student('学生3的回答');\n// 学生可以回答的问题\nstudent1.answer('什么是设计模式');\nstudent1.answer('什么是观察者模式');\nstudent2.answer('什么是设计模式');\nstudent2.answer('什么是设计模式');\nstudent3.answer('什么是观察者模式');\n\n// student3 不回答了\nstudent3.sleep('什么是观察者模式')\n\nconst  teacher = new Teacher();\n\nteacher.ask('什么是设计模式');\nteacher.ask('什么是观察者模式');\n\n// 看看结果 ......\n\n```\n\n## 使用的场景\n\n\n- 可以看到观察者模式适用于模块与模块之间的通信\n- 模块与模块之间没有耦合,相互之间不关联,只需要关注消息的订阅与发布,而模块内部的功能不需要关注","source":"_posts/2021-08-18-设计模式-观察者模式.md","raw":"---\ntitle: 设计模式-观察者模式\ncatalog: true\ncomments: true\nindexing: true\nheader-img: viewing.jpg\ntop: false\ntocnum: true\ndate: 2021-08-18 09:56:25\nsubtitle:\ntags:\n- 设计模式\ncategories:\n---\n\n\n# 观察者模式\n\n## 结构\n\n* 方法结构\n  - 订阅消息的方法\n  - 取消订阅消息的方法\n  - 发送订阅消息的方法 \n  - 消息的容器\n\n* 角色结构\n  - 观察者: 发布消息.\n  - 订阅者: 接收消息,去做相关联的操作.\n\n```js\nconst Observer  {\n    private _messages = {};\n    // 注册消息\n    register(type, fn) {\n        if ( typeof this._messages[type] === 'undefined' ) {\n            this._messages[type] = [fn]\n        } else {\n            this._messages[type].push(fn);\n        }\n    }\n    // 发布消息\n    fire(type, args) {\n        if (!this._messages[type]) return;\n        const events = {type, args: args || {}},\n        for ( let i = 0; i < this._messages[type].length ; i ++ ) {\n            this._messages[type][i](events);\n        }\n    }\n    // 取消订阅\n    remove(type, fn) {\n        if ( this._messages[type] instanceof Array ) {\n            const index = this._messages[type].findIndex((fnItem) => fnItem === fn);\n            this._messages[type].splice(index, 1);\n        }\n    }\n\n}\n```\n\n## 对象的解耦\n\n> 实例 当老师提问,学生回答.  老师提的多种问题, 学生回答,且有的会避开.\n\n学生\n\n```js\nclass Student {\n    private result = '';\n    \n    say() {\n        console.log(this.result);\n    }\n}\n\nStudent.prototype.answer = function(question) {\n    Observer.register(question, this.say);\n}\n\nStudent.prototype.sleep = function(question) {\n    Observer.remove(question, this.say);\n}\n```\n\n老师\n\n```js  \nclass Teacher {\n    ask(question) {\n        Observer.fire(question);\n    }\n}\n```\n\n流程\n\n```js\n// 学生的记录回答\nconst  student1 = new Student('学生1的回答');\nconst  student2 = new Student('学生2的回答');\nconst  student3 = new Student('学生3的回答');\n// 学生可以回答的问题\nstudent1.answer('什么是设计模式');\nstudent1.answer('什么是观察者模式');\nstudent2.answer('什么是设计模式');\nstudent2.answer('什么是设计模式');\nstudent3.answer('什么是观察者模式');\n\n// student3 不回答了\nstudent3.sleep('什么是观察者模式')\n\nconst  teacher = new Teacher();\n\nteacher.ask('什么是设计模式');\nteacher.ask('什么是观察者模式');\n\n// 看看结果 ......\n\n```\n\n## 使用的场景\n\n\n- 可以看到观察者模式适用于模块与模块之间的通信\n- 模块与模块之间没有耦合,相互之间不关联,只需要关注消息的订阅与发布,而模块内部的功能不需要关注","slug":"设计模式-观察者模式","published":1,"updated":"2022-08-04T06:29:53.717Z","_id":"cksh36rqi0000skv4duyzh6ll","layout":"post","photos":[],"link":"","content":"<h1 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h1><h2 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h2><ul>\n<li><p>方法结构</p>\n<ul>\n<li>订阅消息的方法</li>\n<li>取消订阅消息的方法</li>\n<li>发送订阅消息的方法 </li>\n<li>消息的容器</li>\n</ul>\n</li>\n<li><p>角色结构</p>\n<ul>\n<li>观察者: 发布消息.</li>\n<li>订阅者: 接收消息,去做相关联的操作.</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Observer  &#123;</span><br><span class=\"line\">    private _messages = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 注册消息</span></span><br><span class=\"line\">    register(type, fn) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span>._messages[type] === <span class=\"string\">'undefined'</span> ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._messages[type] = [fn]</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._messages[type].push(fn);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 发布消息</span></span><br><span class=\"line\">    fire(type, args) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>._messages[type]) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> events = &#123;type, <span class=\"attr\">args</span>: args || &#123;&#125;&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>._messages[type].length ; i ++ ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._messages[type][i](events);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 取消订阅</span></span><br><span class=\"line\">    remove(type, fn) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( <span class=\"keyword\">this</span>._messages[type] <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span> ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> index = <span class=\"keyword\">this</span>._messages[type].findIndex(<span class=\"function\">(<span class=\"params\">fnItem</span>) =&gt;</span> fnItem === fn);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._messages[type].splice(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"对象的解耦\"><a href=\"#对象的解耦\" class=\"headerlink\" title=\"对象的解耦\"></a>对象的解耦</h2><blockquote>\n<p>实例 当老师提问,学生回答.  老师提的多种问题, 学生回答,且有的会避开.</p>\n</blockquote>\n<p>学生</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">    private result = <span class=\"string\">''</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    say() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Student.prototype.answer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">question</span>) </span>&#123;</span><br><span class=\"line\">    Observer.register(question, <span class=\"keyword\">this</span>.say);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Student.prototype.sleep = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">question</span>) </span>&#123;</span><br><span class=\"line\">    Observer.remove(question, <span class=\"keyword\">this</span>.say);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>老师</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Teacher</span> </span>&#123;</span><br><span class=\"line\">    ask(question) &#123;</span><br><span class=\"line\">        Observer.fire(question);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>流程</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 学生的记录回答</span></span><br><span class=\"line\"><span class=\"keyword\">const</span>  student1 = <span class=\"keyword\">new</span> Student(<span class=\"string\">'学生1的回答'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span>  student2 = <span class=\"keyword\">new</span> Student(<span class=\"string\">'学生2的回答'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span>  student3 = <span class=\"keyword\">new</span> Student(<span class=\"string\">'学生3的回答'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 学生可以回答的问题</span></span><br><span class=\"line\">student1.answer(<span class=\"string\">'什么是设计模式'</span>);</span><br><span class=\"line\">student1.answer(<span class=\"string\">'什么是观察者模式'</span>);</span><br><span class=\"line\">student2.answer(<span class=\"string\">'什么是设计模式'</span>);</span><br><span class=\"line\">student2.answer(<span class=\"string\">'什么是设计模式'</span>);</span><br><span class=\"line\">student3.answer(<span class=\"string\">'什么是观察者模式'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// student3 不回答了</span></span><br><span class=\"line\">student3.sleep(<span class=\"string\">'什么是观察者模式'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span>  teacher = <span class=\"keyword\">new</span> Teacher();</span><br><span class=\"line\"></span><br><span class=\"line\">teacher.ask(<span class=\"string\">'什么是设计模式'</span>);</span><br><span class=\"line\">teacher.ask(<span class=\"string\">'什么是观察者模式'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 看看结果 ......</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用的场景\"><a href=\"#使用的场景\" class=\"headerlink\" title=\"使用的场景\"></a>使用的场景</h2><ul>\n<li>可以看到观察者模式适用于模块与模块之间的通信</li>\n<li>模块与模块之间没有耦合,相互之间不关联,只需要关注消息的订阅与发布,而模块内部的功能不需要关注</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h1><h2 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h2><ul>\n<li><p>方法结构</p>\n<ul>\n<li>订阅消息的方法</li>\n<li>取消订阅消息的方法</li>\n<li>发送订阅消息的方法 </li>\n<li>消息的容器</li>\n</ul>\n</li>\n<li><p>角色结构</p>\n<ul>\n<li>观察者: 发布消息.</li>\n<li>订阅者: 接收消息,去做相关联的操作.</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Observer  &#123;</span><br><span class=\"line\">    private _messages = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 注册消息</span></span><br><span class=\"line\">    register(type, fn) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span>._messages[type] === <span class=\"string\">'undefined'</span> ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._messages[type] = [fn]</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._messages[type].push(fn);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 发布消息</span></span><br><span class=\"line\">    fire(type, args) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>._messages[type]) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> events = &#123;type, <span class=\"attr\">args</span>: args || &#123;&#125;&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>._messages[type].length ; i ++ ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._messages[type][i](events);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 取消订阅</span></span><br><span class=\"line\">    remove(type, fn) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( <span class=\"keyword\">this</span>._messages[type] <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span> ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> index = <span class=\"keyword\">this</span>._messages[type].findIndex(<span class=\"function\">(<span class=\"params\">fnItem</span>) =&gt;</span> fnItem === fn);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._messages[type].splice(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"对象的解耦\"><a href=\"#对象的解耦\" class=\"headerlink\" title=\"对象的解耦\"></a>对象的解耦</h2><blockquote>\n<p>实例 当老师提问,学生回答.  老师提的多种问题, 学生回答,且有的会避开.</p>\n</blockquote>\n<p>学生</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">    private result = <span class=\"string\">''</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    say() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Student.prototype.answer = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">question</span>) </span>&#123;</span><br><span class=\"line\">    Observer.register(question, <span class=\"keyword\">this</span>.say);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Student.prototype.sleep = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">question</span>) </span>&#123;</span><br><span class=\"line\">    Observer.remove(question, <span class=\"keyword\">this</span>.say);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>老师</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Teacher</span> </span>&#123;</span><br><span class=\"line\">    ask(question) &#123;</span><br><span class=\"line\">        Observer.fire(question);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>流程</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 学生的记录回答</span></span><br><span class=\"line\"><span class=\"keyword\">const</span>  student1 = <span class=\"keyword\">new</span> Student(<span class=\"string\">'学生1的回答'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span>  student2 = <span class=\"keyword\">new</span> Student(<span class=\"string\">'学生2的回答'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span>  student3 = <span class=\"keyword\">new</span> Student(<span class=\"string\">'学生3的回答'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 学生可以回答的问题</span></span><br><span class=\"line\">student1.answer(<span class=\"string\">'什么是设计模式'</span>);</span><br><span class=\"line\">student1.answer(<span class=\"string\">'什么是观察者模式'</span>);</span><br><span class=\"line\">student2.answer(<span class=\"string\">'什么是设计模式'</span>);</span><br><span class=\"line\">student2.answer(<span class=\"string\">'什么是设计模式'</span>);</span><br><span class=\"line\">student3.answer(<span class=\"string\">'什么是观察者模式'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// student3 不回答了</span></span><br><span class=\"line\">student3.sleep(<span class=\"string\">'什么是观察者模式'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span>  teacher = <span class=\"keyword\">new</span> Teacher();</span><br><span class=\"line\"></span><br><span class=\"line\">teacher.ask(<span class=\"string\">'什么是设计模式'</span>);</span><br><span class=\"line\">teacher.ask(<span class=\"string\">'什么是观察者模式'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 看看结果 ......</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用的场景\"><a href=\"#使用的场景\" class=\"headerlink\" title=\"使用的场景\"></a>使用的场景</h2><ul>\n<li>可以看到观察者模式适用于模块与模块之间的通信</li>\n<li>模块与模块之间没有耦合,相互之间不关联,只需要关注消息的订阅与发布,而模块内部的功能不需要关注</li>\n</ul>\n"},{"title":"设计模式-状态模式","catalog":true,"comments":1,"indexing":true,"header-img":"../../../../img/default.jpg","top":false,"tocnum":true,"date":"2021-08-18T07:29:17.000Z","subtitle":null,"_content":"\n# 核心\n\n> 当对象发生变化时，会根据状态变化来触发一个逻辑。\n> 当一个对象的内部状态发生改变时,会导致其行为的改变,这看起来像是改变了对象.\n\n## 实例\n\n> 台灯的状态：开启, 弱光, 强光,关闭\n\n```typeScript\nclass execute {\n    _currentState =[];\n\n    changeState() {\n        this._currentState = Object.keys(arguments);\n        return this;\n    }\n\n    doAction() {\n        this._currentState.forEach((key) => {\n            action[key] && action[key].apply(this);\n        });\n        return this;\n    }\n}\n\nconst action = {\n    open() {\n        console.log(\"开灯\");\n    }\n    lowLight() {\n        console.log(\"弱光\");\n    }\n    glare() {\n        console.log(\"强光\");\n    }\n}\n\nconst light = new execute();\n\nlight.changeState('open', 'lowLight').doAction();\n```\n\n## 状态机\n\n状态机的原理,状态机是一组状态的集合,它包含四个要素：状态,条件,动作,次态。\n当根据条件与当前状态后,做出了动作和改变了状态,这就是状态机的动作流程。\n\n### 实例\n> Promise 的模拟\n\n\n```typeScript\nimport StateMachine from 'javascript-state-machine';\n\nconst stateMachine = new StateMachine({\n    init: \"pending\",\n    transitions: [\n        { name: \"resolve\", form: \"pending\", to: \"fulfilled\" },\n        { name: \"reject\", from: \"pending\", to: \"rejected\" }\n    ],\n    method: {\n        onResolve(state, data) {\n            data.successFn.forEach(fn => fn());\n        },\n        onReject( state, data ) {\n           data.failFn.forEach(fn => fn());\n        }\n    }\n});\n\nclass MyPromise {\n    constructor(fn) {\n        this.successFn = [];\n        this.failFn = [];\n        fn( () => stateMachine.resolve(this), () => stateMachine.reject(this) );\n    }\n    then(successFn, failFn) {\n        this.successFn.push(successFn);\n        this.failFn.push(failFn);\n        return this;\n    }\n}\n\n```\n\n\n\n\n","source":"_posts/2021-08-18-设计模式-状态模式.md","raw":"---\ntitle: 设计模式-状态模式\ncatalog: true\ncomments: true\nindexing: true\nheader-img: ../../../../img/default.jpg\ntop: false\ntocnum: true\ndate: 2021-08-18 15:29:17\nsubtitle:\ntags:\n- 设计模式\ncategories:\n---\n\n# 核心\n\n> 当对象发生变化时，会根据状态变化来触发一个逻辑。\n> 当一个对象的内部状态发生改变时,会导致其行为的改变,这看起来像是改变了对象.\n\n## 实例\n\n> 台灯的状态：开启, 弱光, 强光,关闭\n\n```typeScript\nclass execute {\n    _currentState =[];\n\n    changeState() {\n        this._currentState = Object.keys(arguments);\n        return this;\n    }\n\n    doAction() {\n        this._currentState.forEach((key) => {\n            action[key] && action[key].apply(this);\n        });\n        return this;\n    }\n}\n\nconst action = {\n    open() {\n        console.log(\"开灯\");\n    }\n    lowLight() {\n        console.log(\"弱光\");\n    }\n    glare() {\n        console.log(\"强光\");\n    }\n}\n\nconst light = new execute();\n\nlight.changeState('open', 'lowLight').doAction();\n```\n\n## 状态机\n\n状态机的原理,状态机是一组状态的集合,它包含四个要素：状态,条件,动作,次态。\n当根据条件与当前状态后,做出了动作和改变了状态,这就是状态机的动作流程。\n\n### 实例\n> Promise 的模拟\n\n\n```typeScript\nimport StateMachine from 'javascript-state-machine';\n\nconst stateMachine = new StateMachine({\n    init: \"pending\",\n    transitions: [\n        { name: \"resolve\", form: \"pending\", to: \"fulfilled\" },\n        { name: \"reject\", from: \"pending\", to: \"rejected\" }\n    ],\n    method: {\n        onResolve(state, data) {\n            data.successFn.forEach(fn => fn());\n        },\n        onReject( state, data ) {\n           data.failFn.forEach(fn => fn());\n        }\n    }\n});\n\nclass MyPromise {\n    constructor(fn) {\n        this.successFn = [];\n        this.failFn = [];\n        fn( () => stateMachine.resolve(this), () => stateMachine.reject(this) );\n    }\n    then(successFn, failFn) {\n        this.successFn.push(successFn);\n        this.failFn.push(failFn);\n        return this;\n    }\n}\n\n```\n\n\n\n\n","slug":"设计模式-状态模式","published":1,"updated":"2022-08-04T06:29:53.717Z","_id":"cksily6tr0000ccv46d7idate","layout":"post","photos":[],"link":"","content":"<h1 id=\"核心\"><a href=\"#核心\" class=\"headerlink\" title=\"核心\"></a>核心</h1><blockquote>\n<p>当对象发生变化时，会根据状态变化来触发一个逻辑。<br>当一个对象的内部状态发生改变时,会导致其行为的改变,这看起来像是改变了对象.</p>\n</blockquote>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><blockquote>\n<p>台灯的状态：开启, 弱光, 强光,关闭</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> execute &#123;</span><br><span class=\"line\">    _currentState =[];</span><br><span class=\"line\"></span><br><span class=\"line\">    changeState() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._currentState = <span class=\"built_in\">Object</span>.keys(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    doAction() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._currentState.forEach(<span class=\"function\">(<span class=\"params\">key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            action[key] &amp;&amp; action[key].apply(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> action = &#123;</span><br><span class=\"line\">    open() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"开灯\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    lowLight() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"弱光\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    glare() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"强光\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> light = <span class=\"keyword\">new</span> execute();</span><br><span class=\"line\"></span><br><span class=\"line\">light.changeState(<span class=\"string\">'open'</span>, <span class=\"string\">'lowLight'</span>).doAction();</span><br></pre></td></tr></table></figure>\n<h2 id=\"状态机\"><a href=\"#状态机\" class=\"headerlink\" title=\"状态机\"></a>状态机</h2><p>状态机的原理,状态机是一组状态的集合,它包含四个要素：状态,条件,动作,次态。<br>当根据条件与当前状态后,做出了动作和改变了状态,这就是状态机的动作流程。</p>\n<h3 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h3><blockquote>\n<p>Promise 的模拟</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> StateMachine <span class=\"keyword\">from</span> <span class=\"string\">'javascript-state-machine'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> stateMachine = <span class=\"keyword\">new</span> StateMachine(&#123;</span><br><span class=\"line\">    init: <span class=\"string\">\"pending\"</span>,</span><br><span class=\"line\">    transitions: [</span><br><span class=\"line\">        &#123; name: <span class=\"string\">\"resolve\"</span>, form: <span class=\"string\">\"pending\"</span>, to: <span class=\"string\">\"fulfilled\"</span> &#125;,</span><br><span class=\"line\">        &#123; name: <span class=\"string\">\"reject\"</span>, <span class=\"keyword\">from</span>: <span class=\"string\">\"pending\"</span>, to: <span class=\"string\">\"rejected\"</span> &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    method: &#123;</span><br><span class=\"line\">        onResolve(state, data) &#123;</span><br><span class=\"line\">            data.successFn.forEach(<span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> fn());</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        onReject( state, data ) &#123;</span><br><span class=\"line\">           data.failFn.forEach(<span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> fn());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> MyPromise &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.successFn = [];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.failFn = [];</span><br><span class=\"line\">        fn( <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> stateMachine.resolve(<span class=\"keyword\">this</span>), <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> stateMachine.reject(<span class=\"keyword\">this</span>) );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    then(successFn, failFn) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.successFn.push(successFn);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.failFn.push(failFn);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"核心\"><a href=\"#核心\" class=\"headerlink\" title=\"核心\"></a>核心</h1><blockquote>\n<p>当对象发生变化时，会根据状态变化来触发一个逻辑。<br>当一个对象的内部状态发生改变时,会导致其行为的改变,这看起来像是改变了对象.</p>\n</blockquote>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><blockquote>\n<p>台灯的状态：开启, 弱光, 强光,关闭</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> execute &#123;</span><br><span class=\"line\">    _currentState =[];</span><br><span class=\"line\"></span><br><span class=\"line\">    changeState() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._currentState = <span class=\"built_in\">Object</span>.keys(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    doAction() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._currentState.forEach(<span class=\"function\">(<span class=\"params\">key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            action[key] &amp;&amp; action[key].apply(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> action = &#123;</span><br><span class=\"line\">    open() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"开灯\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    lowLight() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"弱光\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    glare() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"强光\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> light = <span class=\"keyword\">new</span> execute();</span><br><span class=\"line\"></span><br><span class=\"line\">light.changeState(<span class=\"string\">'open'</span>, <span class=\"string\">'lowLight'</span>).doAction();</span><br></pre></td></tr></table></figure>\n<h2 id=\"状态机\"><a href=\"#状态机\" class=\"headerlink\" title=\"状态机\"></a>状态机</h2><p>状态机的原理,状态机是一组状态的集合,它包含四个要素：状态,条件,动作,次态。<br>当根据条件与当前状态后,做出了动作和改变了状态,这就是状态机的动作流程。</p>\n<h3 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h3><blockquote>\n<p>Promise 的模拟</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> StateMachine <span class=\"keyword\">from</span> <span class=\"string\">'javascript-state-machine'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> stateMachine = <span class=\"keyword\">new</span> StateMachine(&#123;</span><br><span class=\"line\">    init: <span class=\"string\">\"pending\"</span>,</span><br><span class=\"line\">    transitions: [</span><br><span class=\"line\">        &#123; name: <span class=\"string\">\"resolve\"</span>, form: <span class=\"string\">\"pending\"</span>, to: <span class=\"string\">\"fulfilled\"</span> &#125;,</span><br><span class=\"line\">        &#123; name: <span class=\"string\">\"reject\"</span>, <span class=\"keyword\">from</span>: <span class=\"string\">\"pending\"</span>, to: <span class=\"string\">\"rejected\"</span> &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    method: &#123;</span><br><span class=\"line\">        onResolve(state, data) &#123;</span><br><span class=\"line\">            data.successFn.forEach(<span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> fn());</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        onReject( state, data ) &#123;</span><br><span class=\"line\">           data.failFn.forEach(<span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> fn());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> MyPromise &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.successFn = [];</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.failFn = [];</span><br><span class=\"line\">        fn( <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> stateMachine.resolve(<span class=\"keyword\">this</span>), <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> stateMachine.reject(<span class=\"keyword\">this</span>) );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    then(successFn, failFn) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.successFn.push(successFn);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.failFn.push(failFn);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"设计模式-设计模式原则","catalog":true,"comments":1,"indexing":true,"header-img":"rules.jpg","top":false,"tocnum":true,"date":"2021-08-18T09:39:15.000Z","subtitle":null,"_content":"\n# 七大设计原则\n\n## 开闭原则\n\n> 其核心为：开放扩展，封闭修改\n\n* 优点\n* - 开放了扩展，增强了类得扩展性，对于类得新增特性友好\n* - 封闭了修改，增加了类得稳定性，对于类已知模块增强了持久性\n\n> 对于工厂生产不同得电脑 MacBook Surface\n\n### 实例\n\n```js\nclass Computer {};\nclass MacBook implements Computer {}\nclass Surface implements Computer {}\nclass Factory {\n    produceComputer(type) {\n        if ( type === 'MacBook' ) {\n            return new MacBook();\n        } if else ( type === 'Surface' ) {\n            return new Surface();\n        }\n        return null;\n    }\n};\n```\n\n当前得写法虽然简单，但是违反了开闭原则,应该去修改已有得方法。\n\n```js\nclass Computer {};\nclass Factory {\n    produceComputer() {}\n};\n\nclass MacBook implements Computer {}\nclass Surface implements Computer {}\n\nclass AppleFactory implements Factory {\n    produceComputer() {\n        return new MacBook();\n    }\n}\n\nclass MSSurFactory implements Factory {\n    produceComputer() {\n        return new Surface();\n    }\n}\n```\n\n先定义抽象的接口,再通过实现接口,避免去修改现有的代码。\n\n\n\n## 单一职责 SPR\n\n> 单一职责就是一个类负责一个单一的职责。\n> 从软件变化的角度来看就是只有一个让自身类发生变化的因素。\n> 如果一个类负责两个职责,职责A和职责B,那么当修改职责A时,很有可能会导致职责B出现问题。\n\n### 实例\n\n> 牛羊猪呼吸的是空气,鱼是呼吸的水\n\n```js\nclass Animal {\n    breathe(type) {\n        console.log(`${type} 呼吸的空气`);\n    }\n}\n\nconst animal = new Animal();\nanimal.breathe(\"猪\");\nanimal.breathe(\"牛\");\nanimal.breathe(\"羊\");\n// 鱼是呼吸水 \nanimal.breather(\"鱼\");\n\n```\n\n在这里发现鱼是呼吸得水\n\n```js\nclass Terrestrial {\n    breathe(type) {\n        console.log(`${type} 呼吸的空气`);\n    }\n}\n\nclass Aquatic {\n    breathe(type) {\n        console.log(`${type} 呼吸的水`);\n    }\n}\n\nconst terrestrial = new Terrestrial();\nterrestrial.breathe(\"猪\");\nterrestrial.breathe(\"牛\");\nterrestrial.breathe(\"羊\");\n// 鱼是呼吸水 \nconst aquatic = new Aquatic();\naquatic.breather(\"鱼\");\n```\n\n这样符合单一职责得原则,但是当不同的动物呼吸不同的物质时，需要多加上其他的类，这样会增大开销。\n\n```js\nclass Animal {\n    breathe(type) {\n        if (\"鱼\" === type) {\n            console.log(`${type} 呼吸的水`);\n        } else {\n            console.log(`${type} 呼吸的空气`);\n        }\n    }\n}\n\nconst animal = new Animal();\nanimal.breathe(\"猪\");\nanimal.breathe(\"牛\");\nanimal.breathe(\"羊\");\nanimal.breather(\"鱼\");\n```\n\n这样修改后，虽然简单了，但是在以后的修改中, 后期可能会出现breathe输出的结果不是预期的结果。\n\n```js\nclass Animal {\n    breatheAir(type) {\n        console.log(`${type} 呼吸的水`);\n    }\n\n    breatheWater(type) {\n        if (\"鱼\" === type) {\n            console.log(`${type} 呼吸的水`);\n        } else {\n            console.log(`${type} 呼吸的空气`);\n        }\n    }\n}\n\nconst animal = new Animal();\nanimal.breatheAir(\"猪\");\nanimal.breatheAir(\"牛\");\nanimal.breatheAir(\"羊\");\nanimal.breatheWater(\"鱼\");\n```\n这样虽然破坏了单一职责原则，但是并没有对原来的代码进行修改。\n\n\n## 里氏代替原则\n\n原有的功能P 通过类A实现的,现在需要增加一个新功能P2,但是这个P2是需要原来的功能P和新功能P1组成,由A的子类B完成,\n但是完成新功能P2后,对原来的功能P造成了破坏。\n\n**里氏代替**的重点在于, 不影响原功能但是不是不能修改方法。\n\n继承的含义：父类已经具体实现的方法,子类再次对父类的这些方法做出了修改,就是最整个继承体系最大的破坏。\n\n### 实例\n\n> - 两数相减\n> - 两数相加,再加100\n\n```js\nclass A {\n    func1( a, b ) {\n        return a - b;\n    }\n}\n\n\nclass B extend A {\n    func1(a, b) {\n        return a + b;\n    }\n\n    func2() {\n        return (a, b) => {\n            return this.func1(a, b) + 100\n        };\n    }\n}\n```\n由于B重写了A的方法，在使用过程中，大量的使用B的方法，会造成方法的结果达不到预期。\n在实际的开发中，会重写父类的方法，这样会不可避免的造成大量的错误。\n\n里氏原则就是**可以扩展，但是不可修改原来的功能**\n\n\n\n## 依赖倒转原则\n\n> * 定义：高层次模块不应该依赖于低层次模块，二者都应该依赖于抽象\n> * 抽象不应该依赖于细节，细节应该依赖于抽象\n\n### 实例\n\n> 母亲给小孩子读书\n\n```typeScript\nclass Book {\n    content: \"书的内容\";\n\n    getContent() {\n        return this.content;\n    }\n}\n\nclass Mother {\n    say(book: Book) {\n        console.log(book.getContent);\n    }\n}\n\nconst  mother = new Mother();\nmother.say( new Book() );\n```\n\n当我们换了内容后比如一份报纸时：\n\n```typeScript\n\nclass NewsPaper {\n    content: \"报纸的内容\",\n    \n    getContent() {\n        return this.content;\n    }\n}\n```\n\n我们会发现Mother只能读取书籍,而不能读取报纸！\n\n而当我们依赖于抽象接口时\n\n```typeScript\ninterface Reader {\n    content: string;\n    getContent: () => string;\n}\n\nclass Book implements Reader {\n    content: \"书的内容\";\n\n    getContent() {\n        return this.content;\n    }\n}\n\nclass NewsPaper implements Reader {\n    content: \"报纸的内容\",\n    \n    getContent() {\n        return this.content;\n    }\n}\n\nclass Mother {\n    say(reader: Reader) {\n        console.log(reader.getContent);\n    }\n}\n\n\nconst  mother = new Mother();\nmother.say( new Book() );\nmother.say( new NewsPaper() );\n\n```\n\n当Mother类依赖于接口而不依赖于具体某一类时，便于拓展，降低了耦合。\n而不依赖于接口，Mother为高层，对其做修改很有可能会导致错误,降低系统的稳定性。\n\n\n**依赖倒转的原则**就是面向接口编程。\n\n\n\n## 接口隔离原则\n\n* **接口隔离的原则**其实更关键的在于接口的分离。\n* **强调**一个类对于另外的一个类应该建立在最小的接口基础上。\n\n### 实例\n> 接口类的实现\n> ![](ISP-1.png)\n\n```typeScript\ninterface I {\n    method1: () => void;\n    method2: () => void;\n    method3: () => void;\n    method4: () => void;\n    method5: () => void;\n}\n\nclass A {\n    depend1(i: I) {\n        i.method1();\n    },\n    depend2(i: I) {\n        i.method2();\n    },\n    depend3(i: I) {\n        i.method3();\n    }\n}\n\nclass B implements I {\n    method1: () => console.log('扩展的方法1');\n    method2: () => console.log('扩展的方法2');\n    method3: () => console.log('扩展的方3');\n    method4: () => { ... };\n    method5: () => { ... };\n}\n\nclass C {\n    depend1(i: I) {\n        i.method1();\n    },\n    depend2(i: I) {\n        i.method4();\n    },\n    depend3(i: I) {\n        i.method5();\n    }\n}\n\nclass D implements I {\n    method1: () => console.log('扩展的方法1');\n    method2: () => { ... };\n    method3: () => { ... };\n    method4: () => console.log('扩展的方法2');\n    method5: () => console.log('扩展的方3');\n}\n\nconst a = new A();\na.depend1(new B());\na.depend2(new B());\na.depend3(new B());\n\nconst c = new C();\nc.depend1(new D());\nc.depend2(new D());\nc.depend3(new D());\n\n```\n可以发现当前的代码过于臃肿，C,D 实现接口I,但是 有些方法是没必要实现的。\n这些不符合接口隔离的原则,必须进行拆分\n\n```typeScript\ninterface I {\n    method1: () => void;\n}\n\ninterface II {\n    method2: () => void;\n    method3: () => void;\n}\n\ninterface III {\n    method4: () => void;\n    method5: () => void;\n}\n\nclass A {\n    depend1(i: I) {\n        i.method1();\n    },\n    depend2(i: II) {\n        i.method2();\n    },\n    depend3(i: II) {\n        i.method3();\n    }\n}\n\nclass B implements I, II {\n    method1: () => console.log('扩展的方法1');\n    method2: () => console.log('扩展的方法2');\n    method3: () => console.log('扩展的方3');\n}\n\nclass C {\n    depend1(i: I) {\n        i.method1();\n    },\n    depend2(i: III) {\n        i.method4();\n    },\n    depend3(i: III) {\n        i.method5();\n    }\n}\n\nclass D implements I, III {\n    method1: () => console.log('扩展的方法1');\n    method4: () => console.log('扩展的方法2');\n    method5: () => console.log('扩展的方3');\n}\n\nconst a = new A();\na.depend1(new B());\na.depend2(new B());\na.depend3(new B());\n\nconst c = new C();\nc.depend1(new D());\nc.depend2(new D());\nc.depend3(new D());\n\n```\n\n- 尽可能的去细化接口。\n- 如果接口细化的过于细小，会使得设计复杂化。\n\n\n## 合成/聚合原则\n\n合成：例如身体和腿,是一种强的拥有关系。\n聚合：例如狼和狼群,是一种弱的拥有关系。\n\n**核心**：使用合成/聚合,而不使用继承，降低了类与类之间的耦合度,增强了灵活性。\n当使用继承时，修改了父类，子类也有随之改变，耦合度太高，减少了灵活性。\n\n### 实例\n\n合成: 订单与订单明细的关系, 当删除订单后,订单明细也删除。\n\n```typeScript\nclass Order {\n    orderDetail: new OrderDetail(),\n    ......\n}\n\nclass OrderDetail {\n\n}\n\n```\n\n聚合：\n\n订单与商品的关系, 当删除订单后, 商品依然存在。\n\n```typeScript\nclass Order {\n    public goods: [],\n    constructor(goods: Goods[]) {\n        this.goods = goods;\n    }\n}\n\nclass Goods {\n\n}\n\n```\n\n依赖\n\n订单中的价格,使用参数传入。\n\n```typeScript\nclass Order {\n    count( price: Price ) {\n        return  price * count;\n    }\n}\n\nclass Price {\n\n}\n\n```\n\n\n\n## 迪米特法则\n\n* 迪米特法则别名：最少知道法则。\n* 通俗的解释：一个对象与另外一个对象为陌生关系，只能通过最直接的朋友去通信。\n* 最直接的朋友：\n* - 朋友关系：而出现在对象中的参数对象，成员变量对象，返回值对象。\n* - 陌生关系：不以朋友关系出现的方式成为陌生关系。\n\n就是说**陌生的类最好不要以朋友关系处在类的内部**\n\n### 实例\n\n> 家人去监狱看望犯人，嘱咐犯人：“狱友之间要相互帮助”, 狱友回答：“我们是狱友”。\n\n家人\n\n```typeScript\nclass Family {\n    visitPrisoner(prisoner: Prisoners) {\n        Inmates inmates = prisoner.helpEachOther();\n        inmates.say();\n    }\n}\n```\n\n犯人\n\n```typeScript\nclass Prisoners  {\n    inmates = new Inmates();\n    helpEachOther() {\n        console.log(\"狱友之间要相互帮助\");\n        return inmates;\n    }\n}\n```\n\n狱友\n\n```typeScript\nclass Inmates  {\n    say() {\n        console.log(\"我们是狱友\");\n    }\n}\n```\n\n场景\n\n```typeScript\n\nconst family = new Family();\nfamily.visitPrisoner(new Prisoners());\n```\n\n家人认识犯人，不认识狱友; 而在此场景中, 家人直接与狱友通信了，违反了迪米特原则。\n\n修改为\n```typeScript\nclass Family {\n    visitPrisoner(prisoner: Prisoners) {\n        prisoner.helpEachOther()\n    }\n}\n\nclass Prisoners  {\n    inmates = new Inmates();\n    helpEachOther() {\n        console.log(\"狱友之间要相互帮助\");\n        this.inmates.say();\n    }\n}\n\nclass Inmates  {\n    say() {\n        console.log(\"我们是狱友\");\n    }\n}\n\nconst family = new Family();\nfamily.visitPrisoner(new Prisoners());\n\n```\n\n家人通过犯人来获取回复\n\n**重点**：两个陌生的类通过第三方类获取通信。\n\n## 小结\n\n| 原则          | 简述                                 |\n| ------------- | ------------------------------------ |\n| 开闭原则      | 对扩展开发，对修改封闭               |\n| 单一职责原则  | 一个类只有一种引起变化的原因<br />最低限度一个方法只负责一个行为/结果          |\n| 里氏代替原则  | 在继承时,在子类中不去修改重写父类的方法   |\n| 依赖倒转原则  | 类不去依赖一个具体类，应该去依赖接口 |\n| 接口隔离原则  | 细分接口，避免不必要的接口实现       |\n| 合成/聚合原则 | 合成聚合好过继承                     |\n| 迪米特原则    | 陌生的类依赖第三方类通信             |\n\n\n<i>原文: https://zhuanlan.zhihu.com/p/24614363</i>","source":"_posts/2021-08-18-设计模式-设计模式原则.md","raw":"---\ntitle: 设计模式-设计模式原则\ncatalog: true\ncomments: true\nindexing: true\nheader-img: rules.jpg\ntop: false\ntocnum: true\ndate: 2021-08-18 17:39:15\nsubtitle:\ntags:\n- 设计模式\ncategories:\n---\n\n# 七大设计原则\n\n## 开闭原则\n\n> 其核心为：开放扩展，封闭修改\n\n* 优点\n* - 开放了扩展，增强了类得扩展性，对于类得新增特性友好\n* - 封闭了修改，增加了类得稳定性，对于类已知模块增强了持久性\n\n> 对于工厂生产不同得电脑 MacBook Surface\n\n### 实例\n\n```js\nclass Computer {};\nclass MacBook implements Computer {}\nclass Surface implements Computer {}\nclass Factory {\n    produceComputer(type) {\n        if ( type === 'MacBook' ) {\n            return new MacBook();\n        } if else ( type === 'Surface' ) {\n            return new Surface();\n        }\n        return null;\n    }\n};\n```\n\n当前得写法虽然简单，但是违反了开闭原则,应该去修改已有得方法。\n\n```js\nclass Computer {};\nclass Factory {\n    produceComputer() {}\n};\n\nclass MacBook implements Computer {}\nclass Surface implements Computer {}\n\nclass AppleFactory implements Factory {\n    produceComputer() {\n        return new MacBook();\n    }\n}\n\nclass MSSurFactory implements Factory {\n    produceComputer() {\n        return new Surface();\n    }\n}\n```\n\n先定义抽象的接口,再通过实现接口,避免去修改现有的代码。\n\n\n\n## 单一职责 SPR\n\n> 单一职责就是一个类负责一个单一的职责。\n> 从软件变化的角度来看就是只有一个让自身类发生变化的因素。\n> 如果一个类负责两个职责,职责A和职责B,那么当修改职责A时,很有可能会导致职责B出现问题。\n\n### 实例\n\n> 牛羊猪呼吸的是空气,鱼是呼吸的水\n\n```js\nclass Animal {\n    breathe(type) {\n        console.log(`${type} 呼吸的空气`);\n    }\n}\n\nconst animal = new Animal();\nanimal.breathe(\"猪\");\nanimal.breathe(\"牛\");\nanimal.breathe(\"羊\");\n// 鱼是呼吸水 \nanimal.breather(\"鱼\");\n\n```\n\n在这里发现鱼是呼吸得水\n\n```js\nclass Terrestrial {\n    breathe(type) {\n        console.log(`${type} 呼吸的空气`);\n    }\n}\n\nclass Aquatic {\n    breathe(type) {\n        console.log(`${type} 呼吸的水`);\n    }\n}\n\nconst terrestrial = new Terrestrial();\nterrestrial.breathe(\"猪\");\nterrestrial.breathe(\"牛\");\nterrestrial.breathe(\"羊\");\n// 鱼是呼吸水 \nconst aquatic = new Aquatic();\naquatic.breather(\"鱼\");\n```\n\n这样符合单一职责得原则,但是当不同的动物呼吸不同的物质时，需要多加上其他的类，这样会增大开销。\n\n```js\nclass Animal {\n    breathe(type) {\n        if (\"鱼\" === type) {\n            console.log(`${type} 呼吸的水`);\n        } else {\n            console.log(`${type} 呼吸的空气`);\n        }\n    }\n}\n\nconst animal = new Animal();\nanimal.breathe(\"猪\");\nanimal.breathe(\"牛\");\nanimal.breathe(\"羊\");\nanimal.breather(\"鱼\");\n```\n\n这样修改后，虽然简单了，但是在以后的修改中, 后期可能会出现breathe输出的结果不是预期的结果。\n\n```js\nclass Animal {\n    breatheAir(type) {\n        console.log(`${type} 呼吸的水`);\n    }\n\n    breatheWater(type) {\n        if (\"鱼\" === type) {\n            console.log(`${type} 呼吸的水`);\n        } else {\n            console.log(`${type} 呼吸的空气`);\n        }\n    }\n}\n\nconst animal = new Animal();\nanimal.breatheAir(\"猪\");\nanimal.breatheAir(\"牛\");\nanimal.breatheAir(\"羊\");\nanimal.breatheWater(\"鱼\");\n```\n这样虽然破坏了单一职责原则，但是并没有对原来的代码进行修改。\n\n\n## 里氏代替原则\n\n原有的功能P 通过类A实现的,现在需要增加一个新功能P2,但是这个P2是需要原来的功能P和新功能P1组成,由A的子类B完成,\n但是完成新功能P2后,对原来的功能P造成了破坏。\n\n**里氏代替**的重点在于, 不影响原功能但是不是不能修改方法。\n\n继承的含义：父类已经具体实现的方法,子类再次对父类的这些方法做出了修改,就是最整个继承体系最大的破坏。\n\n### 实例\n\n> - 两数相减\n> - 两数相加,再加100\n\n```js\nclass A {\n    func1( a, b ) {\n        return a - b;\n    }\n}\n\n\nclass B extend A {\n    func1(a, b) {\n        return a + b;\n    }\n\n    func2() {\n        return (a, b) => {\n            return this.func1(a, b) + 100\n        };\n    }\n}\n```\n由于B重写了A的方法，在使用过程中，大量的使用B的方法，会造成方法的结果达不到预期。\n在实际的开发中，会重写父类的方法，这样会不可避免的造成大量的错误。\n\n里氏原则就是**可以扩展，但是不可修改原来的功能**\n\n\n\n## 依赖倒转原则\n\n> * 定义：高层次模块不应该依赖于低层次模块，二者都应该依赖于抽象\n> * 抽象不应该依赖于细节，细节应该依赖于抽象\n\n### 实例\n\n> 母亲给小孩子读书\n\n```typeScript\nclass Book {\n    content: \"书的内容\";\n\n    getContent() {\n        return this.content;\n    }\n}\n\nclass Mother {\n    say(book: Book) {\n        console.log(book.getContent);\n    }\n}\n\nconst  mother = new Mother();\nmother.say( new Book() );\n```\n\n当我们换了内容后比如一份报纸时：\n\n```typeScript\n\nclass NewsPaper {\n    content: \"报纸的内容\",\n    \n    getContent() {\n        return this.content;\n    }\n}\n```\n\n我们会发现Mother只能读取书籍,而不能读取报纸！\n\n而当我们依赖于抽象接口时\n\n```typeScript\ninterface Reader {\n    content: string;\n    getContent: () => string;\n}\n\nclass Book implements Reader {\n    content: \"书的内容\";\n\n    getContent() {\n        return this.content;\n    }\n}\n\nclass NewsPaper implements Reader {\n    content: \"报纸的内容\",\n    \n    getContent() {\n        return this.content;\n    }\n}\n\nclass Mother {\n    say(reader: Reader) {\n        console.log(reader.getContent);\n    }\n}\n\n\nconst  mother = new Mother();\nmother.say( new Book() );\nmother.say( new NewsPaper() );\n\n```\n\n当Mother类依赖于接口而不依赖于具体某一类时，便于拓展，降低了耦合。\n而不依赖于接口，Mother为高层，对其做修改很有可能会导致错误,降低系统的稳定性。\n\n\n**依赖倒转的原则**就是面向接口编程。\n\n\n\n## 接口隔离原则\n\n* **接口隔离的原则**其实更关键的在于接口的分离。\n* **强调**一个类对于另外的一个类应该建立在最小的接口基础上。\n\n### 实例\n> 接口类的实现\n> ![](ISP-1.png)\n\n```typeScript\ninterface I {\n    method1: () => void;\n    method2: () => void;\n    method3: () => void;\n    method4: () => void;\n    method5: () => void;\n}\n\nclass A {\n    depend1(i: I) {\n        i.method1();\n    },\n    depend2(i: I) {\n        i.method2();\n    },\n    depend3(i: I) {\n        i.method3();\n    }\n}\n\nclass B implements I {\n    method1: () => console.log('扩展的方法1');\n    method2: () => console.log('扩展的方法2');\n    method3: () => console.log('扩展的方3');\n    method4: () => { ... };\n    method5: () => { ... };\n}\n\nclass C {\n    depend1(i: I) {\n        i.method1();\n    },\n    depend2(i: I) {\n        i.method4();\n    },\n    depend3(i: I) {\n        i.method5();\n    }\n}\n\nclass D implements I {\n    method1: () => console.log('扩展的方法1');\n    method2: () => { ... };\n    method3: () => { ... };\n    method4: () => console.log('扩展的方法2');\n    method5: () => console.log('扩展的方3');\n}\n\nconst a = new A();\na.depend1(new B());\na.depend2(new B());\na.depend3(new B());\n\nconst c = new C();\nc.depend1(new D());\nc.depend2(new D());\nc.depend3(new D());\n\n```\n可以发现当前的代码过于臃肿，C,D 实现接口I,但是 有些方法是没必要实现的。\n这些不符合接口隔离的原则,必须进行拆分\n\n```typeScript\ninterface I {\n    method1: () => void;\n}\n\ninterface II {\n    method2: () => void;\n    method3: () => void;\n}\n\ninterface III {\n    method4: () => void;\n    method5: () => void;\n}\n\nclass A {\n    depend1(i: I) {\n        i.method1();\n    },\n    depend2(i: II) {\n        i.method2();\n    },\n    depend3(i: II) {\n        i.method3();\n    }\n}\n\nclass B implements I, II {\n    method1: () => console.log('扩展的方法1');\n    method2: () => console.log('扩展的方法2');\n    method3: () => console.log('扩展的方3');\n}\n\nclass C {\n    depend1(i: I) {\n        i.method1();\n    },\n    depend2(i: III) {\n        i.method4();\n    },\n    depend3(i: III) {\n        i.method5();\n    }\n}\n\nclass D implements I, III {\n    method1: () => console.log('扩展的方法1');\n    method4: () => console.log('扩展的方法2');\n    method5: () => console.log('扩展的方3');\n}\n\nconst a = new A();\na.depend1(new B());\na.depend2(new B());\na.depend3(new B());\n\nconst c = new C();\nc.depend1(new D());\nc.depend2(new D());\nc.depend3(new D());\n\n```\n\n- 尽可能的去细化接口。\n- 如果接口细化的过于细小，会使得设计复杂化。\n\n\n## 合成/聚合原则\n\n合成：例如身体和腿,是一种强的拥有关系。\n聚合：例如狼和狼群,是一种弱的拥有关系。\n\n**核心**：使用合成/聚合,而不使用继承，降低了类与类之间的耦合度,增强了灵活性。\n当使用继承时，修改了父类，子类也有随之改变，耦合度太高，减少了灵活性。\n\n### 实例\n\n合成: 订单与订单明细的关系, 当删除订单后,订单明细也删除。\n\n```typeScript\nclass Order {\n    orderDetail: new OrderDetail(),\n    ......\n}\n\nclass OrderDetail {\n\n}\n\n```\n\n聚合：\n\n订单与商品的关系, 当删除订单后, 商品依然存在。\n\n```typeScript\nclass Order {\n    public goods: [],\n    constructor(goods: Goods[]) {\n        this.goods = goods;\n    }\n}\n\nclass Goods {\n\n}\n\n```\n\n依赖\n\n订单中的价格,使用参数传入。\n\n```typeScript\nclass Order {\n    count( price: Price ) {\n        return  price * count;\n    }\n}\n\nclass Price {\n\n}\n\n```\n\n\n\n## 迪米特法则\n\n* 迪米特法则别名：最少知道法则。\n* 通俗的解释：一个对象与另外一个对象为陌生关系，只能通过最直接的朋友去通信。\n* 最直接的朋友：\n* - 朋友关系：而出现在对象中的参数对象，成员变量对象，返回值对象。\n* - 陌生关系：不以朋友关系出现的方式成为陌生关系。\n\n就是说**陌生的类最好不要以朋友关系处在类的内部**\n\n### 实例\n\n> 家人去监狱看望犯人，嘱咐犯人：“狱友之间要相互帮助”, 狱友回答：“我们是狱友”。\n\n家人\n\n```typeScript\nclass Family {\n    visitPrisoner(prisoner: Prisoners) {\n        Inmates inmates = prisoner.helpEachOther();\n        inmates.say();\n    }\n}\n```\n\n犯人\n\n```typeScript\nclass Prisoners  {\n    inmates = new Inmates();\n    helpEachOther() {\n        console.log(\"狱友之间要相互帮助\");\n        return inmates;\n    }\n}\n```\n\n狱友\n\n```typeScript\nclass Inmates  {\n    say() {\n        console.log(\"我们是狱友\");\n    }\n}\n```\n\n场景\n\n```typeScript\n\nconst family = new Family();\nfamily.visitPrisoner(new Prisoners());\n```\n\n家人认识犯人，不认识狱友; 而在此场景中, 家人直接与狱友通信了，违反了迪米特原则。\n\n修改为\n```typeScript\nclass Family {\n    visitPrisoner(prisoner: Prisoners) {\n        prisoner.helpEachOther()\n    }\n}\n\nclass Prisoners  {\n    inmates = new Inmates();\n    helpEachOther() {\n        console.log(\"狱友之间要相互帮助\");\n        this.inmates.say();\n    }\n}\n\nclass Inmates  {\n    say() {\n        console.log(\"我们是狱友\");\n    }\n}\n\nconst family = new Family();\nfamily.visitPrisoner(new Prisoners());\n\n```\n\n家人通过犯人来获取回复\n\n**重点**：两个陌生的类通过第三方类获取通信。\n\n## 小结\n\n| 原则          | 简述                                 |\n| ------------- | ------------------------------------ |\n| 开闭原则      | 对扩展开发，对修改封闭               |\n| 单一职责原则  | 一个类只有一种引起变化的原因<br />最低限度一个方法只负责一个行为/结果          |\n| 里氏代替原则  | 在继承时,在子类中不去修改重写父类的方法   |\n| 依赖倒转原则  | 类不去依赖一个具体类，应该去依赖接口 |\n| 接口隔离原则  | 细分接口，避免不必要的接口实现       |\n| 合成/聚合原则 | 合成聚合好过继承                     |\n| 迪米特原则    | 陌生的类依赖第三方类通信             |\n\n\n<i>原文: https://zhuanlan.zhihu.com/p/24614363</i>","slug":"设计模式-设计模式原则","published":1,"updated":"2022-08-04T06:29:53.717Z","_id":"cksily6tv0001ccv4cy5i9qgb","layout":"post","photos":[],"link":"","content":"<h1 id=\"七大设计原则\"><a href=\"#七大设计原则\" class=\"headerlink\" title=\"七大设计原则\"></a>七大设计原则</h1><h2 id=\"开闭原则\"><a href=\"#开闭原则\" class=\"headerlink\" title=\"开闭原则\"></a>开闭原则</h2><blockquote>\n<p>其核心为：开放扩展，封闭修改</p>\n</blockquote>\n<ul>\n<li>优点</li>\n<li><ul>\n<li>开放了扩展，增强了类得扩展性，对于类得新增特性友好</li>\n</ul>\n</li>\n<li><ul>\n<li>封闭了修改，增加了类得稳定性，对于类已知模块增强了持久性</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>对于工厂生产不同得电脑 MacBook Surface</p>\n</blockquote>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Computer</span> </span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MacBook</span> <span class=\"title\">implements</span> <span class=\"title\">Computer</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Surface</span> <span class=\"title\">implements</span> <span class=\"title\">Computer</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Factory</span> </span>&#123;</span><br><span class=\"line\">    produceComputer(type) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( type === <span class=\"string\">'MacBook'</span> ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MacBook();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">if</span> <span class=\"keyword\">else</span> ( type === <span class=\"string\">'Surface'</span> ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Surface();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>当前得写法虽然简单，但是违反了开闭原则,应该去修改已有得方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Computer</span> </span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Factory</span> </span>&#123;</span><br><span class=\"line\">    produceComputer() &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MacBook</span> <span class=\"title\">implements</span> <span class=\"title\">Computer</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Surface</span> <span class=\"title\">implements</span> <span class=\"title\">Computer</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppleFactory</span> <span class=\"title\">implements</span> <span class=\"title\">Factory</span> </span>&#123;</span><br><span class=\"line\">    produceComputer() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MacBook();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MSSurFactory</span> <span class=\"title\">implements</span> <span class=\"title\">Factory</span> </span>&#123;</span><br><span class=\"line\">    produceComputer() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Surface();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>先定义抽象的接口,再通过实现接口,避免去修改现有的代码。</p>\n<h2 id=\"单一职责-SPR\"><a href=\"#单一职责-SPR\" class=\"headerlink\" title=\"单一职责 SPR\"></a>单一职责 SPR</h2><blockquote>\n<p>单一职责就是一个类负责一个单一的职责。<br>从软件变化的角度来看就是只有一个让自身类发生变化的因素。<br>如果一个类负责两个职责,职责A和职责B,那么当修改职责A时,很有可能会导致职责B出现问题。</p>\n</blockquote>\n<h3 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h3><blockquote>\n<p>牛羊猪呼吸的是空气,鱼是呼吸的水</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    breathe(type) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;type&#125;</span> 呼吸的空气`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> animal = <span class=\"keyword\">new</span> Animal();</span><br><span class=\"line\">animal.breathe(<span class=\"string\">\"猪\"</span>);</span><br><span class=\"line\">animal.breathe(<span class=\"string\">\"牛\"</span>);</span><br><span class=\"line\">animal.breathe(<span class=\"string\">\"羊\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 鱼是呼吸水 </span></span><br><span class=\"line\">animal.breather(<span class=\"string\">\"鱼\"</span>);</span><br></pre></td></tr></table></figure>\n<p>在这里发现鱼是呼吸得水</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Terrestrial</span> </span>&#123;</span><br><span class=\"line\">    breathe(type) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;type&#125;</span> 呼吸的空气`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Aquatic</span> </span>&#123;</span><br><span class=\"line\">    breathe(type) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;type&#125;</span> 呼吸的水`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> terrestrial = <span class=\"keyword\">new</span> Terrestrial();</span><br><span class=\"line\">terrestrial.breathe(<span class=\"string\">\"猪\"</span>);</span><br><span class=\"line\">terrestrial.breathe(<span class=\"string\">\"牛\"</span>);</span><br><span class=\"line\">terrestrial.breathe(<span class=\"string\">\"羊\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 鱼是呼吸水 </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> aquatic = <span class=\"keyword\">new</span> Aquatic();</span><br><span class=\"line\">aquatic.breather(<span class=\"string\">\"鱼\"</span>);</span><br></pre></td></tr></table></figure>\n<p>这样符合单一职责得原则,但是当不同的动物呼吸不同的物质时，需要多加上其他的类，这样会增大开销。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    breathe(type) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">\"鱼\"</span> === type) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;type&#125;</span> 呼吸的水`</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;type&#125;</span> 呼吸的空气`</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> animal = <span class=\"keyword\">new</span> Animal();</span><br><span class=\"line\">animal.breathe(<span class=\"string\">\"猪\"</span>);</span><br><span class=\"line\">animal.breathe(<span class=\"string\">\"牛\"</span>);</span><br><span class=\"line\">animal.breathe(<span class=\"string\">\"羊\"</span>);</span><br><span class=\"line\">animal.breather(<span class=\"string\">\"鱼\"</span>);</span><br></pre></td></tr></table></figure>\n<p>这样修改后，虽然简单了，但是在以后的修改中, 后期可能会出现breathe输出的结果不是预期的结果。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    breatheAir(type) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;type&#125;</span> 呼吸的水`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    breatheWater(type) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">\"鱼\"</span> === type) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;type&#125;</span> 呼吸的水`</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;type&#125;</span> 呼吸的空气`</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> animal = <span class=\"keyword\">new</span> Animal();</span><br><span class=\"line\">animal.breatheAir(<span class=\"string\">\"猪\"</span>);</span><br><span class=\"line\">animal.breatheAir(<span class=\"string\">\"牛\"</span>);</span><br><span class=\"line\">animal.breatheAir(<span class=\"string\">\"羊\"</span>);</span><br><span class=\"line\">animal.breatheWater(<span class=\"string\">\"鱼\"</span>);</span><br></pre></td></tr></table></figure>\n<p>这样虽然破坏了单一职责原则，但是并没有对原来的代码进行修改。</p>\n<h2 id=\"里氏代替原则\"><a href=\"#里氏代替原则\" class=\"headerlink\" title=\"里氏代替原则\"></a>里氏代替原则</h2><p>原有的功能P 通过类A实现的,现在需要增加一个新功能P2,但是这个P2是需要原来的功能P和新功能P1组成,由A的子类B完成,<br>但是完成新功能P2后,对原来的功能P造成了破坏。</p>\n<p><strong>里氏代替</strong>的重点在于, 不影响原功能但是不是不能修改方法。</p>\n<p>继承的含义：父类已经具体实现的方法,子类再次对父类的这些方法做出了修改,就是最整个继承体系最大的破坏。</p>\n<h3 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h3><blockquote>\n<ul>\n<li>两数相减</li>\n<li>两数相加,再加100</li>\n</ul>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">    func1( a, b ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a - b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"title\">extend</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">    func1(a, b) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    func2() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.func1(a, b) + <span class=\"number\">100</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由于B重写了A的方法，在使用过程中，大量的使用B的方法，会造成方法的结果达不到预期。<br>在实际的开发中，会重写父类的方法，这样会不可避免的造成大量的错误。</p>\n<p>里氏原则就是<strong>可以扩展，但是不可修改原来的功能</strong></p>\n<h2 id=\"依赖倒转原则\"><a href=\"#依赖倒转原则\" class=\"headerlink\" title=\"依赖倒转原则\"></a>依赖倒转原则</h2><blockquote>\n<ul>\n<li>定义：高层次模块不应该依赖于低层次模块，二者都应该依赖于抽象</li>\n<li>抽象不应该依赖于细节，细节应该依赖于抽象</li>\n</ul>\n</blockquote>\n<h3 id=\"实例-3\"><a href=\"#实例-3\" class=\"headerlink\" title=\"实例\"></a>实例</h3><blockquote>\n<p>母亲给小孩子读书</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Book &#123;</span><br><span class=\"line\">    content: <span class=\"string\">\"书的内容\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    getContent() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Mother &#123;</span><br><span class=\"line\">    say(book: Book) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(book.getContent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span>  mother = <span class=\"keyword\">new</span> Mother();</span><br><span class=\"line\">mother.say( <span class=\"keyword\">new</span> Book() );</span><br></pre></td></tr></table></figure>\n<p>当我们换了内容后比如一份报纸时：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> NewsPaper &#123;</span><br><span class=\"line\">    content: <span class=\"string\">\"报纸的内容\"</span>,</span><br><span class=\"line\">    </span><br><span class=\"line\">    getContent() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们会发现Mother只能读取书籍,而不能读取报纸！</p>\n<p>而当我们依赖于抽象接口时</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Reader &#123;</span><br><span class=\"line\">    content: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    getContent: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Book <span class=\"keyword\">implements</span> Reader &#123;</span><br><span class=\"line\">    content: <span class=\"string\">\"书的内容\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    getContent() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> NewsPaper <span class=\"keyword\">implements</span> Reader &#123;</span><br><span class=\"line\">    content: <span class=\"string\">\"报纸的内容\"</span>,</span><br><span class=\"line\">    </span><br><span class=\"line\">    getContent() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Mother &#123;</span><br><span class=\"line\">    say(reader: Reader) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(reader.getContent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span>  mother = <span class=\"keyword\">new</span> Mother();</span><br><span class=\"line\">mother.say( <span class=\"keyword\">new</span> Book() );</span><br><span class=\"line\">mother.say( <span class=\"keyword\">new</span> NewsPaper() );</span><br></pre></td></tr></table></figure>\n<p>当Mother类依赖于接口而不依赖于具体某一类时，便于拓展，降低了耦合。<br>而不依赖于接口，Mother为高层，对其做修改很有可能会导致错误,降低系统的稳定性。</p>\n<p><strong>依赖倒转的原则</strong>就是面向接口编程。</p>\n<h2 id=\"接口隔离原则\"><a href=\"#接口隔离原则\" class=\"headerlink\" title=\"接口隔离原则\"></a>接口隔离原则</h2><ul>\n<li><strong>接口隔离的原则</strong>其实更关键的在于接口的分离。</li>\n<li><strong>强调</strong>一个类对于另外的一个类应该建立在最小的接口基础上。</li>\n</ul>\n<h3 id=\"实例-4\"><a href=\"#实例-4\" class=\"headerlink\" title=\"实例\"></a>实例</h3><blockquote>\n<p>接口类的实现<br><img src=\"ISP-1.png\" alt=\"\"></p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> I &#123;</span><br><span class=\"line\">    method1: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">    method2: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">    method3: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">    method4: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">    method5: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> A &#123;</span><br><span class=\"line\">    depend1(i: I) &#123;</span><br><span class=\"line\">        i.method1();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    depend2(i: I) &#123;</span><br><span class=\"line\">        i.method2();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    depend3(i: I) &#123;</span><br><span class=\"line\">        i.method3();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> B <span class=\"keyword\">implements</span> I &#123;</span><br><span class=\"line\">    method1: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'扩展的方法1'</span>);</span><br><span class=\"line\">    method2: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'扩展的方法2'</span>);</span><br><span class=\"line\">    method3: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'扩展的方3'</span>);</span><br><span class=\"line\">    method4: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; ... &#125;;</span><br><span class=\"line\">    method5: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; ... &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> C &#123;</span><br><span class=\"line\">    depend1(i: I) &#123;</span><br><span class=\"line\">        i.method1();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    depend2(i: I) &#123;</span><br><span class=\"line\">        i.method4();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    depend3(i: I) &#123;</span><br><span class=\"line\">        i.method5();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> D <span class=\"keyword\">implements</span> I &#123;</span><br><span class=\"line\">    method1: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'扩展的方法1'</span>);</span><br><span class=\"line\">    method2: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; ... &#125;;</span><br><span class=\"line\">    method3: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; ... &#125;;</span><br><span class=\"line\">    method4: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'扩展的方法2'</span>);</span><br><span class=\"line\">    method5: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'扩展的方3'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"keyword\">new</span> A();</span><br><span class=\"line\">a.depend1(<span class=\"keyword\">new</span> B());</span><br><span class=\"line\">a.depend2(<span class=\"keyword\">new</span> B());</span><br><span class=\"line\">a.depend3(<span class=\"keyword\">new</span> B());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> c = <span class=\"keyword\">new</span> C();</span><br><span class=\"line\">c.depend1(<span class=\"keyword\">new</span> D());</span><br><span class=\"line\">c.depend2(<span class=\"keyword\">new</span> D());</span><br><span class=\"line\">c.depend3(<span class=\"keyword\">new</span> D());</span><br></pre></td></tr></table></figure>\n<p>可以发现当前的代码过于臃肿，C,D 实现接口I,但是 有些方法是没必要实现的。<br>这些不符合接口隔离的原则,必须进行拆分</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> I &#123;</span><br><span class=\"line\">    method1: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> II &#123;</span><br><span class=\"line\">    method2: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">    method3: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> III &#123;</span><br><span class=\"line\">    method4: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">    method5: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> A &#123;</span><br><span class=\"line\">    depend1(i: I) &#123;</span><br><span class=\"line\">        i.method1();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    depend2(i: II) &#123;</span><br><span class=\"line\">        i.method2();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    depend3(i: II) &#123;</span><br><span class=\"line\">        i.method3();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> B <span class=\"keyword\">implements</span> I, II &#123;</span><br><span class=\"line\">    method1: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'扩展的方法1'</span>);</span><br><span class=\"line\">    method2: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'扩展的方法2'</span>);</span><br><span class=\"line\">    method3: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'扩展的方3'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> C &#123;</span><br><span class=\"line\">    depend1(i: I) &#123;</span><br><span class=\"line\">        i.method1();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    depend2(i: III) &#123;</span><br><span class=\"line\">        i.method4();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    depend3(i: III) &#123;</span><br><span class=\"line\">        i.method5();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> D <span class=\"keyword\">implements</span> I, III &#123;</span><br><span class=\"line\">    method1: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'扩展的方法1'</span>);</span><br><span class=\"line\">    method4: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'扩展的方法2'</span>);</span><br><span class=\"line\">    method5: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'扩展的方3'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"keyword\">new</span> A();</span><br><span class=\"line\">a.depend1(<span class=\"keyword\">new</span> B());</span><br><span class=\"line\">a.depend2(<span class=\"keyword\">new</span> B());</span><br><span class=\"line\">a.depend3(<span class=\"keyword\">new</span> B());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> c = <span class=\"keyword\">new</span> C();</span><br><span class=\"line\">c.depend1(<span class=\"keyword\">new</span> D());</span><br><span class=\"line\">c.depend2(<span class=\"keyword\">new</span> D());</span><br><span class=\"line\">c.depend3(<span class=\"keyword\">new</span> D());</span><br></pre></td></tr></table></figure>\n<ul>\n<li>尽可能的去细化接口。</li>\n<li>如果接口细化的过于细小，会使得设计复杂化。</li>\n</ul>\n<h2 id=\"合成-聚合原则\"><a href=\"#合成-聚合原则\" class=\"headerlink\" title=\"合成/聚合原则\"></a>合成/聚合原则</h2><p>合成：例如身体和腿,是一种强的拥有关系。<br>聚合：例如狼和狼群,是一种弱的拥有关系。</p>\n<p><strong>核心</strong>：使用合成/聚合,而不使用继承，降低了类与类之间的耦合度,增强了灵活性。<br>当使用继承时，修改了父类，子类也有随之改变，耦合度太高，减少了灵活性。</p>\n<h3 id=\"实例-5\"><a href=\"#实例-5\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>合成: 订单与订单明细的关系, 当删除订单后,订单明细也删除。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Order &#123;</span><br><span class=\"line\">    orderDetail: <span class=\"keyword\">new</span> OrderDetail(),</span><br><span class=\"line\">    ......</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> OrderDetail &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>聚合：</p>\n<p>订单与商品的关系, 当删除订单后, 商品依然存在。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Order &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> goods: [],</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">goods: Goods[]</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.goods = goods;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Goods &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>依赖</p>\n<p>订单中的价格,使用参数传入。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Order &#123;</span><br><span class=\"line\">    count( price: Price ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  price * count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Price &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"迪米特法则\"><a href=\"#迪米特法则\" class=\"headerlink\" title=\"迪米特法则\"></a>迪米特法则</h2><ul>\n<li>迪米特法则别名：最少知道法则。</li>\n<li>通俗的解释：一个对象与另外一个对象为陌生关系，只能通过最直接的朋友去通信。</li>\n<li>最直接的朋友：</li>\n<li><ul>\n<li>朋友关系：而出现在对象中的参数对象，成员变量对象，返回值对象。</li>\n</ul>\n</li>\n<li><ul>\n<li>陌生关系：不以朋友关系出现的方式成为陌生关系。</li>\n</ul>\n</li>\n</ul>\n<p>就是说<strong>陌生的类最好不要以朋友关系处在类的内部</strong></p>\n<h3 id=\"实例-6\"><a href=\"#实例-6\" class=\"headerlink\" title=\"实例\"></a>实例</h3><blockquote>\n<p>家人去监狱看望犯人，嘱咐犯人：“狱友之间要相互帮助”, 狱友回答：“我们是狱友”。</p>\n</blockquote>\n<p>家人</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Family &#123;</span><br><span class=\"line\">    visitPrisoner(prisoner: Prisoners) &#123;</span><br><span class=\"line\">        Inmates inmates = prisoner.helpEachOther();</span><br><span class=\"line\">        inmates.say();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>犯人</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Prisoners  &#123;</span><br><span class=\"line\">    inmates = <span class=\"keyword\">new</span> Inmates();</span><br><span class=\"line\">    helpEachOther() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"狱友之间要相互帮助\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inmates;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>狱友</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Inmates  &#123;</span><br><span class=\"line\">    say() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"我们是狱友\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>场景</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> family = <span class=\"keyword\">new</span> Family();</span><br><span class=\"line\">family.visitPrisoner(<span class=\"keyword\">new</span> Prisoners());</span><br></pre></td></tr></table></figure>\n<p>家人认识犯人，不认识狱友; 而在此场景中, 家人直接与狱友通信了，违反了迪米特原则。</p>\n<p>修改为<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Family &#123;</span><br><span class=\"line\">    visitPrisoner(prisoner: Prisoners) &#123;</span><br><span class=\"line\">        prisoner.helpEachOther()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Prisoners  &#123;</span><br><span class=\"line\">    inmates = <span class=\"keyword\">new</span> Inmates();</span><br><span class=\"line\">    helpEachOther() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"狱友之间要相互帮助\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.inmates.say();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Inmates  &#123;</span><br><span class=\"line\">    say() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"我们是狱友\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> family = <span class=\"keyword\">new</span> Family();</span><br><span class=\"line\">family.visitPrisoner(<span class=\"keyword\">new</span> Prisoners());</span><br></pre></td></tr></table></figure></p>\n<p>家人通过犯人来获取回复</p>\n<p><strong>重点</strong>：两个陌生的类通过第三方类获取通信。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>原则</th>\n<th>简述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>开闭原则</td>\n<td>对扩展开发，对修改封闭</td>\n</tr>\n<tr>\n<td>单一职责原则</td>\n<td>一个类只有一种引起变化的原因<br />最低限度一个方法只负责一个行为/结果</td>\n</tr>\n<tr>\n<td>里氏代替原则</td>\n<td>在继承时,在子类中不去修改重写父类的方法</td>\n</tr>\n<tr>\n<td>依赖倒转原则</td>\n<td>类不去依赖一个具体类，应该去依赖接口</td>\n</tr>\n<tr>\n<td>接口隔离原则</td>\n<td>细分接口，避免不必要的接口实现</td>\n</tr>\n<tr>\n<td>合成/聚合原则</td>\n<td>合成聚合好过继承</td>\n</tr>\n<tr>\n<td>迪米特原则</td>\n<td>陌生的类依赖第三方类通信</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><i>原文: <a href=\"https://zhuanlan.zhihu.com/p/24614363\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/24614363</a></i></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"七大设计原则\"><a href=\"#七大设计原则\" class=\"headerlink\" title=\"七大设计原则\"></a>七大设计原则</h1><h2 id=\"开闭原则\"><a href=\"#开闭原则\" class=\"headerlink\" title=\"开闭原则\"></a>开闭原则</h2><blockquote>\n<p>其核心为：开放扩展，封闭修改</p>\n</blockquote>\n<ul>\n<li>优点</li>\n<li><ul>\n<li>开放了扩展，增强了类得扩展性，对于类得新增特性友好</li>\n</ul>\n</li>\n<li><ul>\n<li>封闭了修改，增加了类得稳定性，对于类已知模块增强了持久性</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>对于工厂生产不同得电脑 MacBook Surface</p>\n</blockquote>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Computer</span> </span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MacBook</span> <span class=\"title\">implements</span> <span class=\"title\">Computer</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Surface</span> <span class=\"title\">implements</span> <span class=\"title\">Computer</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Factory</span> </span>&#123;</span><br><span class=\"line\">    produceComputer(type) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( type === <span class=\"string\">'MacBook'</span> ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MacBook();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">if</span> <span class=\"keyword\">else</span> ( type === <span class=\"string\">'Surface'</span> ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Surface();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>当前得写法虽然简单，但是违反了开闭原则,应该去修改已有得方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Computer</span> </span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Factory</span> </span>&#123;</span><br><span class=\"line\">    produceComputer() &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MacBook</span> <span class=\"title\">implements</span> <span class=\"title\">Computer</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Surface</span> <span class=\"title\">implements</span> <span class=\"title\">Computer</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppleFactory</span> <span class=\"title\">implements</span> <span class=\"title\">Factory</span> </span>&#123;</span><br><span class=\"line\">    produceComputer() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MacBook();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MSSurFactory</span> <span class=\"title\">implements</span> <span class=\"title\">Factory</span> </span>&#123;</span><br><span class=\"line\">    produceComputer() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Surface();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>先定义抽象的接口,再通过实现接口,避免去修改现有的代码。</p>\n<h2 id=\"单一职责-SPR\"><a href=\"#单一职责-SPR\" class=\"headerlink\" title=\"单一职责 SPR\"></a>单一职责 SPR</h2><blockquote>\n<p>单一职责就是一个类负责一个单一的职责。<br>从软件变化的角度来看就是只有一个让自身类发生变化的因素。<br>如果一个类负责两个职责,职责A和职责B,那么当修改职责A时,很有可能会导致职责B出现问题。</p>\n</blockquote>\n<h3 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h3><blockquote>\n<p>牛羊猪呼吸的是空气,鱼是呼吸的水</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    breathe(type) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;type&#125;</span> 呼吸的空气`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> animal = <span class=\"keyword\">new</span> Animal();</span><br><span class=\"line\">animal.breathe(<span class=\"string\">\"猪\"</span>);</span><br><span class=\"line\">animal.breathe(<span class=\"string\">\"牛\"</span>);</span><br><span class=\"line\">animal.breathe(<span class=\"string\">\"羊\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 鱼是呼吸水 </span></span><br><span class=\"line\">animal.breather(<span class=\"string\">\"鱼\"</span>);</span><br></pre></td></tr></table></figure>\n<p>在这里发现鱼是呼吸得水</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Terrestrial</span> </span>&#123;</span><br><span class=\"line\">    breathe(type) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;type&#125;</span> 呼吸的空气`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Aquatic</span> </span>&#123;</span><br><span class=\"line\">    breathe(type) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;type&#125;</span> 呼吸的水`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> terrestrial = <span class=\"keyword\">new</span> Terrestrial();</span><br><span class=\"line\">terrestrial.breathe(<span class=\"string\">\"猪\"</span>);</span><br><span class=\"line\">terrestrial.breathe(<span class=\"string\">\"牛\"</span>);</span><br><span class=\"line\">terrestrial.breathe(<span class=\"string\">\"羊\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 鱼是呼吸水 </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> aquatic = <span class=\"keyword\">new</span> Aquatic();</span><br><span class=\"line\">aquatic.breather(<span class=\"string\">\"鱼\"</span>);</span><br></pre></td></tr></table></figure>\n<p>这样符合单一职责得原则,但是当不同的动物呼吸不同的物质时，需要多加上其他的类，这样会增大开销。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    breathe(type) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">\"鱼\"</span> === type) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;type&#125;</span> 呼吸的水`</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;type&#125;</span> 呼吸的空气`</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> animal = <span class=\"keyword\">new</span> Animal();</span><br><span class=\"line\">animal.breathe(<span class=\"string\">\"猪\"</span>);</span><br><span class=\"line\">animal.breathe(<span class=\"string\">\"牛\"</span>);</span><br><span class=\"line\">animal.breathe(<span class=\"string\">\"羊\"</span>);</span><br><span class=\"line\">animal.breather(<span class=\"string\">\"鱼\"</span>);</span><br></pre></td></tr></table></figure>\n<p>这样修改后，虽然简单了，但是在以后的修改中, 后期可能会出现breathe输出的结果不是预期的结果。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    breatheAir(type) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;type&#125;</span> 呼吸的水`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    breatheWater(type) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">\"鱼\"</span> === type) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;type&#125;</span> 呼吸的水`</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;type&#125;</span> 呼吸的空气`</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> animal = <span class=\"keyword\">new</span> Animal();</span><br><span class=\"line\">animal.breatheAir(<span class=\"string\">\"猪\"</span>);</span><br><span class=\"line\">animal.breatheAir(<span class=\"string\">\"牛\"</span>);</span><br><span class=\"line\">animal.breatheAir(<span class=\"string\">\"羊\"</span>);</span><br><span class=\"line\">animal.breatheWater(<span class=\"string\">\"鱼\"</span>);</span><br></pre></td></tr></table></figure>\n<p>这样虽然破坏了单一职责原则，但是并没有对原来的代码进行修改。</p>\n<h2 id=\"里氏代替原则\"><a href=\"#里氏代替原则\" class=\"headerlink\" title=\"里氏代替原则\"></a>里氏代替原则</h2><p>原有的功能P 通过类A实现的,现在需要增加一个新功能P2,但是这个P2是需要原来的功能P和新功能P1组成,由A的子类B完成,<br>但是完成新功能P2后,对原来的功能P造成了破坏。</p>\n<p><strong>里氏代替</strong>的重点在于, 不影响原功能但是不是不能修改方法。</p>\n<p>继承的含义：父类已经具体实现的方法,子类再次对父类的这些方法做出了修改,就是最整个继承体系最大的破坏。</p>\n<h3 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h3><blockquote>\n<ul>\n<li>两数相减</li>\n<li>两数相加,再加100</li>\n</ul>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">    func1( a, b ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a - b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"title\">extend</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">    func1(a, b) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    func2() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.func1(a, b) + <span class=\"number\">100</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由于B重写了A的方法，在使用过程中，大量的使用B的方法，会造成方法的结果达不到预期。<br>在实际的开发中，会重写父类的方法，这样会不可避免的造成大量的错误。</p>\n<p>里氏原则就是<strong>可以扩展，但是不可修改原来的功能</strong></p>\n<h2 id=\"依赖倒转原则\"><a href=\"#依赖倒转原则\" class=\"headerlink\" title=\"依赖倒转原则\"></a>依赖倒转原则</h2><blockquote>\n<ul>\n<li>定义：高层次模块不应该依赖于低层次模块，二者都应该依赖于抽象</li>\n<li>抽象不应该依赖于细节，细节应该依赖于抽象</li>\n</ul>\n</blockquote>\n<h3 id=\"实例-3\"><a href=\"#实例-3\" class=\"headerlink\" title=\"实例\"></a>实例</h3><blockquote>\n<p>母亲给小孩子读书</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Book &#123;</span><br><span class=\"line\">    content: <span class=\"string\">\"书的内容\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    getContent() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Mother &#123;</span><br><span class=\"line\">    say(book: Book) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(book.getContent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span>  mother = <span class=\"keyword\">new</span> Mother();</span><br><span class=\"line\">mother.say( <span class=\"keyword\">new</span> Book() );</span><br></pre></td></tr></table></figure>\n<p>当我们换了内容后比如一份报纸时：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> NewsPaper &#123;</span><br><span class=\"line\">    content: <span class=\"string\">\"报纸的内容\"</span>,</span><br><span class=\"line\">    </span><br><span class=\"line\">    getContent() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们会发现Mother只能读取书籍,而不能读取报纸！</p>\n<p>而当我们依赖于抽象接口时</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Reader &#123;</span><br><span class=\"line\">    content: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    getContent: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Book <span class=\"keyword\">implements</span> Reader &#123;</span><br><span class=\"line\">    content: <span class=\"string\">\"书的内容\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    getContent() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> NewsPaper <span class=\"keyword\">implements</span> Reader &#123;</span><br><span class=\"line\">    content: <span class=\"string\">\"报纸的内容\"</span>,</span><br><span class=\"line\">    </span><br><span class=\"line\">    getContent() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Mother &#123;</span><br><span class=\"line\">    say(reader: Reader) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(reader.getContent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span>  mother = <span class=\"keyword\">new</span> Mother();</span><br><span class=\"line\">mother.say( <span class=\"keyword\">new</span> Book() );</span><br><span class=\"line\">mother.say( <span class=\"keyword\">new</span> NewsPaper() );</span><br></pre></td></tr></table></figure>\n<p>当Mother类依赖于接口而不依赖于具体某一类时，便于拓展，降低了耦合。<br>而不依赖于接口，Mother为高层，对其做修改很有可能会导致错误,降低系统的稳定性。</p>\n<p><strong>依赖倒转的原则</strong>就是面向接口编程。</p>\n<h2 id=\"接口隔离原则\"><a href=\"#接口隔离原则\" class=\"headerlink\" title=\"接口隔离原则\"></a>接口隔离原则</h2><ul>\n<li><strong>接口隔离的原则</strong>其实更关键的在于接口的分离。</li>\n<li><strong>强调</strong>一个类对于另外的一个类应该建立在最小的接口基础上。</li>\n</ul>\n<h3 id=\"实例-4\"><a href=\"#实例-4\" class=\"headerlink\" title=\"实例\"></a>实例</h3><blockquote>\n<p>接口类的实现<br><img src=\"ISP-1.png\" alt=\"\"></p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> I &#123;</span><br><span class=\"line\">    method1: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">    method2: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">    method3: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">    method4: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">    method5: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> A &#123;</span><br><span class=\"line\">    depend1(i: I) &#123;</span><br><span class=\"line\">        i.method1();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    depend2(i: I) &#123;</span><br><span class=\"line\">        i.method2();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    depend3(i: I) &#123;</span><br><span class=\"line\">        i.method3();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> B <span class=\"keyword\">implements</span> I &#123;</span><br><span class=\"line\">    method1: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'扩展的方法1'</span>);</span><br><span class=\"line\">    method2: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'扩展的方法2'</span>);</span><br><span class=\"line\">    method3: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'扩展的方3'</span>);</span><br><span class=\"line\">    method4: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; ... &#125;;</span><br><span class=\"line\">    method5: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; ... &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> C &#123;</span><br><span class=\"line\">    depend1(i: I) &#123;</span><br><span class=\"line\">        i.method1();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    depend2(i: I) &#123;</span><br><span class=\"line\">        i.method4();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    depend3(i: I) &#123;</span><br><span class=\"line\">        i.method5();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> D <span class=\"keyword\">implements</span> I &#123;</span><br><span class=\"line\">    method1: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'扩展的方法1'</span>);</span><br><span class=\"line\">    method2: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; ... &#125;;</span><br><span class=\"line\">    method3: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; ... &#125;;</span><br><span class=\"line\">    method4: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'扩展的方法2'</span>);</span><br><span class=\"line\">    method5: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'扩展的方3'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"keyword\">new</span> A();</span><br><span class=\"line\">a.depend1(<span class=\"keyword\">new</span> B());</span><br><span class=\"line\">a.depend2(<span class=\"keyword\">new</span> B());</span><br><span class=\"line\">a.depend3(<span class=\"keyword\">new</span> B());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> c = <span class=\"keyword\">new</span> C();</span><br><span class=\"line\">c.depend1(<span class=\"keyword\">new</span> D());</span><br><span class=\"line\">c.depend2(<span class=\"keyword\">new</span> D());</span><br><span class=\"line\">c.depend3(<span class=\"keyword\">new</span> D());</span><br></pre></td></tr></table></figure>\n<p>可以发现当前的代码过于臃肿，C,D 实现接口I,但是 有些方法是没必要实现的。<br>这些不符合接口隔离的原则,必须进行拆分</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> I &#123;</span><br><span class=\"line\">    method1: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> II &#123;</span><br><span class=\"line\">    method2: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">    method3: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> III &#123;</span><br><span class=\"line\">    method4: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">    method5: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> A &#123;</span><br><span class=\"line\">    depend1(i: I) &#123;</span><br><span class=\"line\">        i.method1();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    depend2(i: II) &#123;</span><br><span class=\"line\">        i.method2();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    depend3(i: II) &#123;</span><br><span class=\"line\">        i.method3();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> B <span class=\"keyword\">implements</span> I, II &#123;</span><br><span class=\"line\">    method1: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'扩展的方法1'</span>);</span><br><span class=\"line\">    method2: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'扩展的方法2'</span>);</span><br><span class=\"line\">    method3: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'扩展的方3'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> C &#123;</span><br><span class=\"line\">    depend1(i: I) &#123;</span><br><span class=\"line\">        i.method1();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    depend2(i: III) &#123;</span><br><span class=\"line\">        i.method4();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    depend3(i: III) &#123;</span><br><span class=\"line\">        i.method5();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> D <span class=\"keyword\">implements</span> I, III &#123;</span><br><span class=\"line\">    method1: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'扩展的方法1'</span>);</span><br><span class=\"line\">    method4: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'扩展的方法2'</span>);</span><br><span class=\"line\">    method5: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'扩展的方3'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"keyword\">new</span> A();</span><br><span class=\"line\">a.depend1(<span class=\"keyword\">new</span> B());</span><br><span class=\"line\">a.depend2(<span class=\"keyword\">new</span> B());</span><br><span class=\"line\">a.depend3(<span class=\"keyword\">new</span> B());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> c = <span class=\"keyword\">new</span> C();</span><br><span class=\"line\">c.depend1(<span class=\"keyword\">new</span> D());</span><br><span class=\"line\">c.depend2(<span class=\"keyword\">new</span> D());</span><br><span class=\"line\">c.depend3(<span class=\"keyword\">new</span> D());</span><br></pre></td></tr></table></figure>\n<ul>\n<li>尽可能的去细化接口。</li>\n<li>如果接口细化的过于细小，会使得设计复杂化。</li>\n</ul>\n<h2 id=\"合成-聚合原则\"><a href=\"#合成-聚合原则\" class=\"headerlink\" title=\"合成/聚合原则\"></a>合成/聚合原则</h2><p>合成：例如身体和腿,是一种强的拥有关系。<br>聚合：例如狼和狼群,是一种弱的拥有关系。</p>\n<p><strong>核心</strong>：使用合成/聚合,而不使用继承，降低了类与类之间的耦合度,增强了灵活性。<br>当使用继承时，修改了父类，子类也有随之改变，耦合度太高，减少了灵活性。</p>\n<h3 id=\"实例-5\"><a href=\"#实例-5\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>合成: 订单与订单明细的关系, 当删除订单后,订单明细也删除。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Order &#123;</span><br><span class=\"line\">    orderDetail: <span class=\"keyword\">new</span> OrderDetail(),</span><br><span class=\"line\">    ......</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> OrderDetail &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>聚合：</p>\n<p>订单与商品的关系, 当删除订单后, 商品依然存在。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Order &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> goods: [],</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">goods: Goods[]</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.goods = goods;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Goods &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>依赖</p>\n<p>订单中的价格,使用参数传入。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Order &#123;</span><br><span class=\"line\">    count( price: Price ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  price * count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Price &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"迪米特法则\"><a href=\"#迪米特法则\" class=\"headerlink\" title=\"迪米特法则\"></a>迪米特法则</h2><ul>\n<li>迪米特法则别名：最少知道法则。</li>\n<li>通俗的解释：一个对象与另外一个对象为陌生关系，只能通过最直接的朋友去通信。</li>\n<li>最直接的朋友：</li>\n<li><ul>\n<li>朋友关系：而出现在对象中的参数对象，成员变量对象，返回值对象。</li>\n</ul>\n</li>\n<li><ul>\n<li>陌生关系：不以朋友关系出现的方式成为陌生关系。</li>\n</ul>\n</li>\n</ul>\n<p>就是说<strong>陌生的类最好不要以朋友关系处在类的内部</strong></p>\n<h3 id=\"实例-6\"><a href=\"#实例-6\" class=\"headerlink\" title=\"实例\"></a>实例</h3><blockquote>\n<p>家人去监狱看望犯人，嘱咐犯人：“狱友之间要相互帮助”, 狱友回答：“我们是狱友”。</p>\n</blockquote>\n<p>家人</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Family &#123;</span><br><span class=\"line\">    visitPrisoner(prisoner: Prisoners) &#123;</span><br><span class=\"line\">        Inmates inmates = prisoner.helpEachOther();</span><br><span class=\"line\">        inmates.say();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>犯人</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Prisoners  &#123;</span><br><span class=\"line\">    inmates = <span class=\"keyword\">new</span> Inmates();</span><br><span class=\"line\">    helpEachOther() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"狱友之间要相互帮助\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inmates;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>狱友</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Inmates  &#123;</span><br><span class=\"line\">    say() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"我们是狱友\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>场景</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> family = <span class=\"keyword\">new</span> Family();</span><br><span class=\"line\">family.visitPrisoner(<span class=\"keyword\">new</span> Prisoners());</span><br></pre></td></tr></table></figure>\n<p>家人认识犯人，不认识狱友; 而在此场景中, 家人直接与狱友通信了，违反了迪米特原则。</p>\n<p>修改为<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Family &#123;</span><br><span class=\"line\">    visitPrisoner(prisoner: Prisoners) &#123;</span><br><span class=\"line\">        prisoner.helpEachOther()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Prisoners  &#123;</span><br><span class=\"line\">    inmates = <span class=\"keyword\">new</span> Inmates();</span><br><span class=\"line\">    helpEachOther() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"狱友之间要相互帮助\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.inmates.say();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Inmates  &#123;</span><br><span class=\"line\">    say() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"我们是狱友\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> family = <span class=\"keyword\">new</span> Family();</span><br><span class=\"line\">family.visitPrisoner(<span class=\"keyword\">new</span> Prisoners());</span><br></pre></td></tr></table></figure></p>\n<p>家人通过犯人来获取回复</p>\n<p><strong>重点</strong>：两个陌生的类通过第三方类获取通信。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>原则</th>\n<th>简述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>开闭原则</td>\n<td>对扩展开发，对修改封闭</td>\n</tr>\n<tr>\n<td>单一职责原则</td>\n<td>一个类只有一种引起变化的原因<br />最低限度一个方法只负责一个行为/结果</td>\n</tr>\n<tr>\n<td>里氏代替原则</td>\n<td>在继承时,在子类中不去修改重写父类的方法</td>\n</tr>\n<tr>\n<td>依赖倒转原则</td>\n<td>类不去依赖一个具体类，应该去依赖接口</td>\n</tr>\n<tr>\n<td>接口隔离原则</td>\n<td>细分接口，避免不必要的接口实现</td>\n</tr>\n<tr>\n<td>合成/聚合原则</td>\n<td>合成聚合好过继承</td>\n</tr>\n<tr>\n<td>迪米特原则</td>\n<td>陌生的类依赖第三方类通信</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><i>原文: <a href=\"https://zhuanlan.zhihu.com/p/24614363\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/24614363</a></i></p>\n"},{"title":"框架-vue和react的应用场景","catalog":true,"comments":1,"indexing":true,"header-img":"../../../../img/default.jpg","top":false,"tocnum":true,"date":"2021-08-31T06:28:30.000Z","subtitle":null,"_content":"\n# 前提\n\n你学会了vue, 也学会了react,你知道 vue 和 react的大致写法，那么请问，当技术选型的时候，你会选择哪种框架？\n为什么会去选择这个框架？\n\n# 相同\n\n# 指标\n\n## 兼容性\n\nvue  IE 18+以上版本\n\n## 性能\nReact使用的是虚拟DOM,\nVue也使用虚拟DOM,但是做了静态和动态的区分,这使得Vue性能更好。\n\n## 可扩展性\nReact的扩展性强于Vue,这对于大型项目至关重要。\n\n\n## 跨平台\nVue 针对iso、Android 跨平台的应用框架 weex,还处于开发活跃阶段。\nReact  React native 比较成熟,经过测试。\n\n## 最新的技术\nReact 得益于React大型的社区平台, 对其稳定性与技术更新提供了良好的支持。\nVue没没有得到大型的科技公司的支持，导致其社区生态较小,这是其适合小型应用和小型公司的根本原因。\n\n\n## 灵活性\nVue 提供了一整套整个开发周期的框架。\nReact 只是一个灵活渲染的组件库。\n这使得React更加灵活。\n\n\nReact 的响应式和函数式代码更适合测试。\nReact 与 typeScript 更加好搭配一些。而vue还需要vue-property-decorator第三方插件\nReact 比vue 的规范度更加好。\nReact 的响应式设计,比 vue的响应式绑定更加友好,在大数据下,vue的双向绑定更重。\n\n**未完待续**\n\nhttps://juejin.cn/post/7007048306438176799?utm_source=gold_browser_extension\n\n\n\n\n\n\n\n\n","source":"_posts/2021-08-31-框架-vue和react的应用场景.md","raw":"---\ntitle: 框架-vue和react的应用场景\ncatalog: true\ncomments: true\nindexing: true\nheader-img: ../../../../img/default.jpg\ntop: false\ntocnum: true\ndate: 2021-08-31 14:28:30\nsubtitle:\ntags:\n- 框架\ncategories:\n---\n\n# 前提\n\n你学会了vue, 也学会了react,你知道 vue 和 react的大致写法，那么请问，当技术选型的时候，你会选择哪种框架？\n为什么会去选择这个框架？\n\n# 相同\n\n# 指标\n\n## 兼容性\n\nvue  IE 18+以上版本\n\n## 性能\nReact使用的是虚拟DOM,\nVue也使用虚拟DOM,但是做了静态和动态的区分,这使得Vue性能更好。\n\n## 可扩展性\nReact的扩展性强于Vue,这对于大型项目至关重要。\n\n\n## 跨平台\nVue 针对iso、Android 跨平台的应用框架 weex,还处于开发活跃阶段。\nReact  React native 比较成熟,经过测试。\n\n## 最新的技术\nReact 得益于React大型的社区平台, 对其稳定性与技术更新提供了良好的支持。\nVue没没有得到大型的科技公司的支持，导致其社区生态较小,这是其适合小型应用和小型公司的根本原因。\n\n\n## 灵活性\nVue 提供了一整套整个开发周期的框架。\nReact 只是一个灵活渲染的组件库。\n这使得React更加灵活。\n\n\nReact 的响应式和函数式代码更适合测试。\nReact 与 typeScript 更加好搭配一些。而vue还需要vue-property-decorator第三方插件\nReact 比vue 的规范度更加好。\nReact 的响应式设计,比 vue的响应式绑定更加友好,在大数据下,vue的双向绑定更重。\n\n**未完待续**\n\nhttps://juejin.cn/post/7007048306438176799?utm_source=gold_browser_extension\n\n\n\n\n\n\n\n\n","slug":"框架-vue和react的应用场景","published":1,"updated":"2022-08-04T06:29:53.717Z","_id":"ckt3y8ggz000088v4fy1ebgm9","layout":"post","photos":[],"link":"","content":"<h1 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h1><p>你学会了vue, 也学会了react,你知道 vue 和 react的大致写法，那么请问，当技术选型的时候，你会选择哪种框架？<br>为什么会去选择这个框架？</p>\n<h1 id=\"相同\"><a href=\"#相同\" class=\"headerlink\" title=\"相同\"></a>相同</h1><h1 id=\"指标\"><a href=\"#指标\" class=\"headerlink\" title=\"指标\"></a>指标</h1><h2 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h2><p>vue  IE 18+以上版本</p>\n<h2 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h2><p>React使用的是虚拟DOM,<br>Vue也使用虚拟DOM,但是做了静态和动态的区分,这使得Vue性能更好。</p>\n<h2 id=\"可扩展性\"><a href=\"#可扩展性\" class=\"headerlink\" title=\"可扩展性\"></a>可扩展性</h2><p>React的扩展性强于Vue,这对于大型项目至关重要。</p>\n<h2 id=\"跨平台\"><a href=\"#跨平台\" class=\"headerlink\" title=\"跨平台\"></a>跨平台</h2><p>Vue 针对iso、Android 跨平台的应用框架 weex,还处于开发活跃阶段。<br>React  React native 比较成熟,经过测试。</p>\n<h2 id=\"最新的技术\"><a href=\"#最新的技术\" class=\"headerlink\" title=\"最新的技术\"></a>最新的技术</h2><p>React 得益于React大型的社区平台, 对其稳定性与技术更新提供了良好的支持。<br>Vue没没有得到大型的科技公司的支持，导致其社区生态较小,这是其适合小型应用和小型公司的根本原因。</p>\n<h2 id=\"灵活性\"><a href=\"#灵活性\" class=\"headerlink\" title=\"灵活性\"></a>灵活性</h2><p>Vue 提供了一整套整个开发周期的框架。<br>React 只是一个灵活渲染的组件库。<br>这使得React更加灵活。</p>\n<p>React 的响应式和函数式代码更适合测试。<br>React 与 typeScript 更加好搭配一些。而vue还需要vue-property-decorator第三方插件<br>React 比vue 的规范度更加好。<br>React 的响应式设计,比 vue的响应式绑定更加友好,在大数据下,vue的双向绑定更重。</p>\n<p><strong>未完待续</strong></p>\n<p><a href=\"https://juejin.cn/post/7007048306438176799?utm_source=gold_browser_extension\" target=\"_blank\" rel=\"noopener\">https://juejin.cn/post/7007048306438176799?utm_source=gold_browser_extension</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h1><p>你学会了vue, 也学会了react,你知道 vue 和 react的大致写法，那么请问，当技术选型的时候，你会选择哪种框架？<br>为什么会去选择这个框架？</p>\n<h1 id=\"相同\"><a href=\"#相同\" class=\"headerlink\" title=\"相同\"></a>相同</h1><h1 id=\"指标\"><a href=\"#指标\" class=\"headerlink\" title=\"指标\"></a>指标</h1><h2 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h2><p>vue  IE 18+以上版本</p>\n<h2 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h2><p>React使用的是虚拟DOM,<br>Vue也使用虚拟DOM,但是做了静态和动态的区分,这使得Vue性能更好。</p>\n<h2 id=\"可扩展性\"><a href=\"#可扩展性\" class=\"headerlink\" title=\"可扩展性\"></a>可扩展性</h2><p>React的扩展性强于Vue,这对于大型项目至关重要。</p>\n<h2 id=\"跨平台\"><a href=\"#跨平台\" class=\"headerlink\" title=\"跨平台\"></a>跨平台</h2><p>Vue 针对iso、Android 跨平台的应用框架 weex,还处于开发活跃阶段。<br>React  React native 比较成熟,经过测试。</p>\n<h2 id=\"最新的技术\"><a href=\"#最新的技术\" class=\"headerlink\" title=\"最新的技术\"></a>最新的技术</h2><p>React 得益于React大型的社区平台, 对其稳定性与技术更新提供了良好的支持。<br>Vue没没有得到大型的科技公司的支持，导致其社区生态较小,这是其适合小型应用和小型公司的根本原因。</p>\n<h2 id=\"灵活性\"><a href=\"#灵活性\" class=\"headerlink\" title=\"灵活性\"></a>灵活性</h2><p>Vue 提供了一整套整个开发周期的框架。<br>React 只是一个灵活渲染的组件库。<br>这使得React更加灵活。</p>\n<p>React 的响应式和函数式代码更适合测试。<br>React 与 typeScript 更加好搭配一些。而vue还需要vue-property-decorator第三方插件<br>React 比vue 的规范度更加好。<br>React 的响应式设计,比 vue的响应式绑定更加友好,在大数据下,vue的双向绑定更重。</p>\n<p><strong>未完待续</strong></p>\n<p><a href=\"https://juejin.cn/post/7007048306438176799?utm_source=gold_browser_extension\" target=\"_blank\" rel=\"noopener\">https://juejin.cn/post/7007048306438176799?utm_source=gold_browser_extension</a></p>\n"},{"title":"跨域","catalog":true,"comments":1,"indexing":true,"header-img":"../../../../img/default.jpg","top":false,"tocnum":true,"date":"2021-08-31T06:28:47.000Z","subtitle":null,"_content":"\n# 前提\n\n当我们在面试过程中,会被问道,为什么会跨域,跨域的几种解决方式。\n甚至面试官会问到：跨域是需要客户端与服务端一起解决的，当服务端不去配合，前端怎么解决？\n\n\n## 跨域\n协议不同,域名不同,端口号不同都会发生跨域。跨域是浏览器的安全机制,服务端是不存在跨域的。\n\n\n## 跨域的几种解决方案\n\n### jsonp\n#### 原理\n凡是拥有 `src`属性的都拥有跨域的能力例如：`img` `iframe` `script`\n\n#### 实现\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title></title>\n    <script type=\"text/javascript\" src=\"http://youserver.com/server.js\"></script>\n  </head>\n  <body></body>\n  <script>\n      var flightHandler = function(data){\n          alert('想要显示的数据是：code ' + data.code + 'count ;' + data.count + '.');\n      };\n      // 提供jsonp服务的url地址（不管是什么类型的地址，最终生成的返回值都是一段javascript代码）\n      var url = \"http://flightQuery.com/jsonp/flightResult.aspx?callback=flightHandler\";\n      // 创建script标签，设置其属性\n      var script = document.createElement('script');\n      script.setAttribute('src', url);\n      // 把script标签加入head，此时调用开始\n      document.getElementsByTagName('head')[0].appendChild(script); \n  </script>\n</html>\n```\n\n服务端返回的数据数据\n\n```javascript\nlocalHandler({\n    code: '1111',\n    count: 234,\n})\n```\n\n#### 特点\n\n1. 动态添加`<script>`标签来获取服务器提供的内容。\n2. 服务端会去调用客户端的函数并传入参数。\n\n\n### CORS\n\n#### 原理\n\n跨域资源共享(CORS),通过利用请求头告诉浏览器，让其运行在一个domain的web应用可以请求不同源服务器上的资源。\n\n\n#### 预检请求\n\n> 预检请求是客户端发送一个option请求到服务端,获知是否允许该真实的请求。\n\n什么情况下会发生预检请求\n```\n1. 使用以下的HTTP请求方法\n    PUT\n    DELETE\n    CONNECT\n    OPTIONS\n    TRACE\n    PATCH\n2. Content-Type不属于以下的类型\n    application/x-www-form-urlenload\n    multipart/form-data\n    text/plain\n3. 请求头包含自定义请求的\n    比如含有 Authorization, token 作为授权的字段\n\n```\n\n### 实例\n\n#### 预检请求\n\n客户端\n\n```md\nOrigin: http://foo.explame                                      // 说明来源\nAccess-Control-Request-Method: POST                             // 说明正式的请求方法\nAccess-Control-Request-Headers: anthorization-bearer, user-name // 告知自定义的字段\n\n```\n\n服务端\n\n```md\nAccess-Control-Allow-Origin: http://foo.explame                 // 说明正式的请求来源\nAccess-Control-Allow-Methods: POST,GET,OPTIONS                  // 说明支持的请求跨域方法\nAccess-Control-Allow-Headers:anthorization-bearer, user-name    // 说明接受的自定义请求头\nAccess-Control-Max-Age: 86400                                   // 说明预检请求结果可以被缓存多长时间\n```\n\n#### 正式请求\n\n客户端\n\n```md\nauthorization-bearer: djfojoasdjf-sdfkj-sdfsd\nuser-name: 222222222AA222\nOrigin: http://foo.explame\nReferer: http://foo.explame/\n```\n\n服务端\n\n```md\nAccess-Control-Allow-Origin: \"*\"\nAccess-Control-Allow-Methods: \"*\"\n\n```\n\n#### 增加凭证\n\n客户端\n\n```md\naxios.defaults.withCredentials = true\n```\n\n客户端正式请求头\n\n```md\n\n.....\n\nCookie: pageAccess=2\n\n```\n\n服务端\n\n```java\n/*\n * 导入包：import javax.servlet.http.HttpServletResponse;\n * 接口参数中定义：HttpServletResponse response\n */\n\n// 允许跨域访问的域名：若有端口需写全（协议+域名+端口），若没有端口末尾不用加'/'\nresponse.setHeader(\"Access-Control-Allow-Origin\", \"http://www.domain1.com\"); \n\n// 允许前端带认证cookie：启用此项后，上面的域名不能为'*'，必须指定具体的域名，否则浏览器会提示\nresponse.setHeader(\"Access-Control-Allow-Credentials\", \"true\"); \n\n// 提示OPTIONS预检时，后端需要设置的两个常用自定义头\nresponse.setHeader(\"Access-Control-Allow-Headers\", \"Content-Type,X-Requested-With\");\n```\n\n```md\nAccess-Control-Allow-Origin: http://foo.example\nAccess-Control-Allow-Credentials: true\nSet-Cookie: pageAccess=3; expires=Wed, 31-Dec-2008 01:34:53 GMT\n```\n\n注意：\n1. 当客户端设置了withGredential,而服务端未携带 `Access-Control-Allow-Credentials: true`,浏览器不会讲请求内容发送给请求者。\n2. 客户端携带了Cookie信息，服务端返回的 `Access-Control-Allow-Origin: *`，请求将会失败。返回的`Access-Control-Allow-Origin:http://foo.expample`，则会成功。\n\n\n\n### 反向代理\n\n#### 原理\n\n同源策略只是浏览器安全策略，不是Http协议的一部分，服务端调用接口只是使用http协议，不会执行JS脚本，不需要同源策略，也就不存在跨域问题。\n\n#### vue的反向代理\n\nwebpack的跨域实际上是借用 `webpack+node+webpack-dev-server`作为一个跨域代理,\n并且由于开发环境下vue的渲染也是使用`webpack-dev-server`,所以页面与代理服务器不存在跨域,\n不需要设置请求头。\n\n#### 配置\nvue.config.js\n\n```js\nmodule.export = {\n    entry: {},\n    module: {},\n    ......\n    devServer: {\n         proxy: [{\n            context: '/login', // 确定要代理的主机目标\n            target: 'http://www.domain2.com:8080',  // 代理跨域目标接口\n            changeOrigin: true, // 默认false，是否需要改变原始主机头为目标URL。\n            secure: false,  // 当代理某些https服务报错时用\n            cookieDomainRewrite: 'www.domain1.com'  // 可以为false，表示不修改  重写set-cookie头域\n        }],\n    }\n}\n\n```\n\nps: 打包完成后，在生产环境会出现报错，所以需要在生产环境中使用nginx反向代理。\n\n原文： https://segmentfault.com/a/1190000011145364\n","source":"_posts/2021-08-31-跨域.md","raw":"---\ntitle: 跨域\ncatalog: true\ncomments: true\nindexing: true\nheader-img: ../../../../img/default.jpg\ntop: false\ntocnum: true\ndate: 2021-08-31 14:28:47\nsubtitle:\ntags:\ncategories:\n---\n\n# 前提\n\n当我们在面试过程中,会被问道,为什么会跨域,跨域的几种解决方式。\n甚至面试官会问到：跨域是需要客户端与服务端一起解决的，当服务端不去配合，前端怎么解决？\n\n\n## 跨域\n协议不同,域名不同,端口号不同都会发生跨域。跨域是浏览器的安全机制,服务端是不存在跨域的。\n\n\n## 跨域的几种解决方案\n\n### jsonp\n#### 原理\n凡是拥有 `src`属性的都拥有跨域的能力例如：`img` `iframe` `script`\n\n#### 实现\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title></title>\n    <script type=\"text/javascript\" src=\"http://youserver.com/server.js\"></script>\n  </head>\n  <body></body>\n  <script>\n      var flightHandler = function(data){\n          alert('想要显示的数据是：code ' + data.code + 'count ;' + data.count + '.');\n      };\n      // 提供jsonp服务的url地址（不管是什么类型的地址，最终生成的返回值都是一段javascript代码）\n      var url = \"http://flightQuery.com/jsonp/flightResult.aspx?callback=flightHandler\";\n      // 创建script标签，设置其属性\n      var script = document.createElement('script');\n      script.setAttribute('src', url);\n      // 把script标签加入head，此时调用开始\n      document.getElementsByTagName('head')[0].appendChild(script); \n  </script>\n</html>\n```\n\n服务端返回的数据数据\n\n```javascript\nlocalHandler({\n    code: '1111',\n    count: 234,\n})\n```\n\n#### 特点\n\n1. 动态添加`<script>`标签来获取服务器提供的内容。\n2. 服务端会去调用客户端的函数并传入参数。\n\n\n### CORS\n\n#### 原理\n\n跨域资源共享(CORS),通过利用请求头告诉浏览器，让其运行在一个domain的web应用可以请求不同源服务器上的资源。\n\n\n#### 预检请求\n\n> 预检请求是客户端发送一个option请求到服务端,获知是否允许该真实的请求。\n\n什么情况下会发生预检请求\n```\n1. 使用以下的HTTP请求方法\n    PUT\n    DELETE\n    CONNECT\n    OPTIONS\n    TRACE\n    PATCH\n2. Content-Type不属于以下的类型\n    application/x-www-form-urlenload\n    multipart/form-data\n    text/plain\n3. 请求头包含自定义请求的\n    比如含有 Authorization, token 作为授权的字段\n\n```\n\n### 实例\n\n#### 预检请求\n\n客户端\n\n```md\nOrigin: http://foo.explame                                      // 说明来源\nAccess-Control-Request-Method: POST                             // 说明正式的请求方法\nAccess-Control-Request-Headers: anthorization-bearer, user-name // 告知自定义的字段\n\n```\n\n服务端\n\n```md\nAccess-Control-Allow-Origin: http://foo.explame                 // 说明正式的请求来源\nAccess-Control-Allow-Methods: POST,GET,OPTIONS                  // 说明支持的请求跨域方法\nAccess-Control-Allow-Headers:anthorization-bearer, user-name    // 说明接受的自定义请求头\nAccess-Control-Max-Age: 86400                                   // 说明预检请求结果可以被缓存多长时间\n```\n\n#### 正式请求\n\n客户端\n\n```md\nauthorization-bearer: djfojoasdjf-sdfkj-sdfsd\nuser-name: 222222222AA222\nOrigin: http://foo.explame\nReferer: http://foo.explame/\n```\n\n服务端\n\n```md\nAccess-Control-Allow-Origin: \"*\"\nAccess-Control-Allow-Methods: \"*\"\n\n```\n\n#### 增加凭证\n\n客户端\n\n```md\naxios.defaults.withCredentials = true\n```\n\n客户端正式请求头\n\n```md\n\n.....\n\nCookie: pageAccess=2\n\n```\n\n服务端\n\n```java\n/*\n * 导入包：import javax.servlet.http.HttpServletResponse;\n * 接口参数中定义：HttpServletResponse response\n */\n\n// 允许跨域访问的域名：若有端口需写全（协议+域名+端口），若没有端口末尾不用加'/'\nresponse.setHeader(\"Access-Control-Allow-Origin\", \"http://www.domain1.com\"); \n\n// 允许前端带认证cookie：启用此项后，上面的域名不能为'*'，必须指定具体的域名，否则浏览器会提示\nresponse.setHeader(\"Access-Control-Allow-Credentials\", \"true\"); \n\n// 提示OPTIONS预检时，后端需要设置的两个常用自定义头\nresponse.setHeader(\"Access-Control-Allow-Headers\", \"Content-Type,X-Requested-With\");\n```\n\n```md\nAccess-Control-Allow-Origin: http://foo.example\nAccess-Control-Allow-Credentials: true\nSet-Cookie: pageAccess=3; expires=Wed, 31-Dec-2008 01:34:53 GMT\n```\n\n注意：\n1. 当客户端设置了withGredential,而服务端未携带 `Access-Control-Allow-Credentials: true`,浏览器不会讲请求内容发送给请求者。\n2. 客户端携带了Cookie信息，服务端返回的 `Access-Control-Allow-Origin: *`，请求将会失败。返回的`Access-Control-Allow-Origin:http://foo.expample`，则会成功。\n\n\n\n### 反向代理\n\n#### 原理\n\n同源策略只是浏览器安全策略，不是Http协议的一部分，服务端调用接口只是使用http协议，不会执行JS脚本，不需要同源策略，也就不存在跨域问题。\n\n#### vue的反向代理\n\nwebpack的跨域实际上是借用 `webpack+node+webpack-dev-server`作为一个跨域代理,\n并且由于开发环境下vue的渲染也是使用`webpack-dev-server`,所以页面与代理服务器不存在跨域,\n不需要设置请求头。\n\n#### 配置\nvue.config.js\n\n```js\nmodule.export = {\n    entry: {},\n    module: {},\n    ......\n    devServer: {\n         proxy: [{\n            context: '/login', // 确定要代理的主机目标\n            target: 'http://www.domain2.com:8080',  // 代理跨域目标接口\n            changeOrigin: true, // 默认false，是否需要改变原始主机头为目标URL。\n            secure: false,  // 当代理某些https服务报错时用\n            cookieDomainRewrite: 'www.domain1.com'  // 可以为false，表示不修改  重写set-cookie头域\n        }],\n    }\n}\n\n```\n\nps: 打包完成后，在生产环境会出现报错，所以需要在生产环境中使用nginx反向代理。\n\n原文： https://segmentfault.com/a/1190000011145364\n","slug":"跨域","published":1,"updated":"2022-08-04T06:29:53.717Z","_id":"ckt3y8gh7000188v42d7ecjlc","layout":"post","photos":[],"link":"","content":"<h1 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h1><p>当我们在面试过程中,会被问道,为什么会跨域,跨域的几种解决方式。<br>甚至面试官会问到：跨域是需要客户端与服务端一起解决的，当服务端不去配合，前端怎么解决？</p>\n<h2 id=\"跨域\"><a href=\"#跨域\" class=\"headerlink\" title=\"跨域\"></a>跨域</h2><p>协议不同,域名不同,端口号不同都会发生跨域。跨域是浏览器的安全机制,服务端是不存在跨域的。</p>\n<h2 id=\"跨域的几种解决方案\"><a href=\"#跨域的几种解决方案\" class=\"headerlink\" title=\"跨域的几种解决方案\"></a>跨域的几种解决方案</h2><h3 id=\"jsonp\"><a href=\"#jsonp\" class=\"headerlink\" title=\"jsonp\"></a>jsonp</h3><h4 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h4><p>凡是拥有 <code>src</code>属性的都拥有跨域的能力例如：<code>img</code> <code>iframe</code> <code>script</code></p>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://youserver.com/server.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">var</span> flightHandler = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(data)</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">          alert(<span class=\"string\">'想要显示的数据是：code '</span> + data.code + <span class=\"string\">'count ;'</span> + data.count + <span class=\"string\">'.'</span>);</span></span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"comment\">// 提供jsonp服务的url地址（不管是什么类型的地址，最终生成的返回值都是一段javascript代码）</span></span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">var</span> url = <span class=\"string\">\"http://flightQuery.com/jsonp/flightResult.aspx?callback=flightHandler\"</span>;</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"comment\">// 创建script标签，设置其属性</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">      script.setAttribute(<span class=\"string\">'src'</span>, url);</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"comment\">// 把script标签加入head，此时调用开始</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>].appendChild(script); </span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>服务端返回的数据数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localHandler(&#123;</span><br><span class=\"line\">    code: <span class=\"string\">'1111'</span>,</span><br><span class=\"line\">    count: <span class=\"number\">234</span>,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ol>\n<li>动态添加<code>&lt;script&gt;</code>标签来获取服务器提供的内容。</li>\n<li>服务端会去调用客户端的函数并传入参数。</li>\n</ol>\n<h3 id=\"CORS\"><a href=\"#CORS\" class=\"headerlink\" title=\"CORS\"></a>CORS</h3><h4 id=\"原理-1\"><a href=\"#原理-1\" class=\"headerlink\" title=\"原理\"></a>原理</h4><p>跨域资源共享(CORS),通过利用请求头告诉浏览器，让其运行在一个domain的web应用可以请求不同源服务器上的资源。</p>\n<h4 id=\"预检请求\"><a href=\"#预检请求\" class=\"headerlink\" title=\"预检请求\"></a>预检请求</h4><blockquote>\n<p>预检请求是客户端发送一个option请求到服务端,获知是否允许该真实的请求。</p>\n</blockquote>\n<p>什么情况下会发生预检请求<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 使用以下的HTTP请求方法</span><br><span class=\"line\">    PUT</span><br><span class=\"line\">    DELETE</span><br><span class=\"line\">    CONNECT</span><br><span class=\"line\">    OPTIONS</span><br><span class=\"line\">    TRACE</span><br><span class=\"line\">    PATCH</span><br><span class=\"line\">2. Content-Type不属于以下的类型</span><br><span class=\"line\">    application&#x2F;x-www-form-urlenload</span><br><span class=\"line\">    multipart&#x2F;form-data</span><br><span class=\"line\">    text&#x2F;plain</span><br><span class=\"line\">3. 请求头包含自定义请求的</span><br><span class=\"line\">    比如含有 Authorization, token 作为授权的字段</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><h4 id=\"预检请求-1\"><a href=\"#预检请求-1\" class=\"headerlink\" title=\"预检请求\"></a>预检请求</h4><p>客户端</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Origin: http://foo.explame                                      // 说明来源</span><br><span class=\"line\">Access-Control-Request-Method: POST                             // 说明正式的请求方法</span><br><span class=\"line\">Access-Control-Request-Headers: anthorization-bearer, user-name // 告知自定义的字段</span><br></pre></td></tr></table></figure>\n<p>服务端</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access-Control-Allow-Origin: http://foo.explame                 // 说明正式的请求来源</span><br><span class=\"line\">Access-Control-Allow-Methods: POST,GET,OPTIONS                  // 说明支持的请求跨域方法</span><br><span class=\"line\">Access-Control-Allow-Headers:anthorization-bearer, user-name    // 说明接受的自定义请求头</span><br><span class=\"line\">Access-Control-Max-Age: 86400                                   // 说明预检请求结果可以被缓存多长时间</span><br></pre></td></tr></table></figure>\n<h4 id=\"正式请求\"><a href=\"#正式请求\" class=\"headerlink\" title=\"正式请求\"></a>正式请求</h4><p>客户端</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">authorization-bearer: djfojoasdjf-sdfkj-sdfsd</span><br><span class=\"line\">user-name: 222222222AA222</span><br><span class=\"line\">Origin: http://foo.explame</span><br><span class=\"line\">Referer: http://foo.explame/</span><br></pre></td></tr></table></figure>\n<p>服务端</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access-Control-Allow-Origin: \"*\"</span><br><span class=\"line\">Access-Control-Allow-Methods: \"*\"</span><br></pre></td></tr></table></figure>\n<h4 id=\"增加凭证\"><a href=\"#增加凭证\" class=\"headerlink\" title=\"增加凭证\"></a>增加凭证</h4><p>客户端</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.defaults.withCredentials = true</span><br></pre></td></tr></table></figure>\n<p>客户端正式请求头</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">.....</span><br><span class=\"line\"></span><br><span class=\"line\">Cookie: pageAccess=2</span><br></pre></td></tr></table></figure>\n<p>服务端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 导入包：import javax.servlet.http.HttpServletResponse;</span></span><br><span class=\"line\"><span class=\"comment\"> * 接口参数中定义：HttpServletResponse response</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 允许跨域访问的域名：若有端口需写全（协议+域名+端口），若没有端口末尾不用加'/'</span></span><br><span class=\"line\">response.setHeader(<span class=\"string\">\"Access-Control-Allow-Origin\"</span>, <span class=\"string\">\"http://www.domain1.com\"</span>); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 允许前端带认证cookie：启用此项后，上面的域名不能为'*'，必须指定具体的域名，否则浏览器会提示</span></span><br><span class=\"line\">response.setHeader(<span class=\"string\">\"Access-Control-Allow-Credentials\"</span>, <span class=\"string\">\"true\"</span>); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 提示OPTIONS预检时，后端需要设置的两个常用自定义头</span></span><br><span class=\"line\">response.setHeader(<span class=\"string\">\"Access-Control-Allow-Headers\"</span>, <span class=\"string\">\"Content-Type,X-Requested-With\"</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access-Control-Allow-Origin: http://foo.example</span><br><span class=\"line\">Access-Control-Allow-Credentials: true</span><br><span class=\"line\">Set-Cookie: pageAccess=3; expires=Wed, 31-Dec-2008 01:34:53 GMT</span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<ol>\n<li>当客户端设置了withGredential,而服务端未携带 <code>Access-Control-Allow-Credentials: true</code>,浏览器不会讲请求内容发送给请求者。</li>\n<li>客户端携带了Cookie信息，服务端返回的 <code>Access-Control-Allow-Origin: *</code>，请求将会失败。返回的<code>Access-Control-Allow-Origin:http://foo.expample</code>，则会成功。</li>\n</ol>\n<h3 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h3><h4 id=\"原理-2\"><a href=\"#原理-2\" class=\"headerlink\" title=\"原理\"></a>原理</h4><p>同源策略只是浏览器安全策略，不是Http协议的一部分，服务端调用接口只是使用http协议，不会执行JS脚本，不需要同源策略，也就不存在跨域问题。</p>\n<h4 id=\"vue的反向代理\"><a href=\"#vue的反向代理\" class=\"headerlink\" title=\"vue的反向代理\"></a>vue的反向代理</h4><p>webpack的跨域实际上是借用 <code>webpack+node+webpack-dev-server</code>作为一个跨域代理,<br>并且由于开发环境下vue的渲染也是使用<code>webpack-dev-server</code>,所以页面与代理服务器不存在跨域,<br>不需要设置请求头。</p>\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p>vue.config.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.export = &#123;</span><br><span class=\"line\">    entry: &#123;&#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;&#125;,</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    devServer: &#123;</span><br><span class=\"line\">         proxy: [&#123;</span><br><span class=\"line\">            context: <span class=\"string\">'/login'</span>, <span class=\"comment\">// 确定要代理的主机目标</span></span><br><span class=\"line\">            target: <span class=\"string\">'http://www.domain2.com:8080'</span>,  <span class=\"comment\">// 代理跨域目标接口</span></span><br><span class=\"line\">            changeOrigin: <span class=\"literal\">true</span>, <span class=\"comment\">// 默认false，是否需要改变原始主机头为目标URL。</span></span><br><span class=\"line\">            secure: <span class=\"literal\">false</span>,  <span class=\"comment\">// 当代理某些https服务报错时用</span></span><br><span class=\"line\">            cookieDomainRewrite: <span class=\"string\">'www.domain1.com'</span>  <span class=\"comment\">// 可以为false，表示不修改  重写set-cookie头域</span></span><br><span class=\"line\">        &#125;],</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ps: 打包完成后，在生产环境会出现报错，所以需要在生产环境中使用nginx反向代理。</p>\n<p>原文： <a href=\"https://segmentfault.com/a/1190000011145364\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000011145364</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h1><p>当我们在面试过程中,会被问道,为什么会跨域,跨域的几种解决方式。<br>甚至面试官会问到：跨域是需要客户端与服务端一起解决的，当服务端不去配合，前端怎么解决？</p>\n<h2 id=\"跨域\"><a href=\"#跨域\" class=\"headerlink\" title=\"跨域\"></a>跨域</h2><p>协议不同,域名不同,端口号不同都会发生跨域。跨域是浏览器的安全机制,服务端是不存在跨域的。</p>\n<h2 id=\"跨域的几种解决方案\"><a href=\"#跨域的几种解决方案\" class=\"headerlink\" title=\"跨域的几种解决方案\"></a>跨域的几种解决方案</h2><h3 id=\"jsonp\"><a href=\"#jsonp\" class=\"headerlink\" title=\"jsonp\"></a>jsonp</h3><h4 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h4><p>凡是拥有 <code>src</code>属性的都拥有跨域的能力例如：<code>img</code> <code>iframe</code> <code>script</code></p>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://youserver.com/server.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">var</span> flightHandler = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(data)</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">          alert(<span class=\"string\">'想要显示的数据是：code '</span> + data.code + <span class=\"string\">'count ;'</span> + data.count + <span class=\"string\">'.'</span>);</span></span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"comment\">// 提供jsonp服务的url地址（不管是什么类型的地址，最终生成的返回值都是一段javascript代码）</span></span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"keyword\">var</span> url = <span class=\"string\">\"http://flightQuery.com/jsonp/flightResult.aspx?callback=flightHandler\"</span>;</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"comment\">// 创建script标签，设置其属性</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">      script.setAttribute(<span class=\"string\">'src'</span>, url);</span></span><br><span class=\"line\"><span class=\"actionscript\">      <span class=\"comment\">// 把script标签加入head，此时调用开始</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>].appendChild(script); </span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>服务端返回的数据数据</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localHandler(&#123;</span><br><span class=\"line\">    code: <span class=\"string\">'1111'</span>,</span><br><span class=\"line\">    count: <span class=\"number\">234</span>,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ol>\n<li>动态添加<code>&lt;script&gt;</code>标签来获取服务器提供的内容。</li>\n<li>服务端会去调用客户端的函数并传入参数。</li>\n</ol>\n<h3 id=\"CORS\"><a href=\"#CORS\" class=\"headerlink\" title=\"CORS\"></a>CORS</h3><h4 id=\"原理-1\"><a href=\"#原理-1\" class=\"headerlink\" title=\"原理\"></a>原理</h4><p>跨域资源共享(CORS),通过利用请求头告诉浏览器，让其运行在一个domain的web应用可以请求不同源服务器上的资源。</p>\n<h4 id=\"预检请求\"><a href=\"#预检请求\" class=\"headerlink\" title=\"预检请求\"></a>预检请求</h4><blockquote>\n<p>预检请求是客户端发送一个option请求到服务端,获知是否允许该真实的请求。</p>\n</blockquote>\n<p>什么情况下会发生预检请求<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 使用以下的HTTP请求方法</span><br><span class=\"line\">    PUT</span><br><span class=\"line\">    DELETE</span><br><span class=\"line\">    CONNECT</span><br><span class=\"line\">    OPTIONS</span><br><span class=\"line\">    TRACE</span><br><span class=\"line\">    PATCH</span><br><span class=\"line\">2. Content-Type不属于以下的类型</span><br><span class=\"line\">    application&#x2F;x-www-form-urlenload</span><br><span class=\"line\">    multipart&#x2F;form-data</span><br><span class=\"line\">    text&#x2F;plain</span><br><span class=\"line\">3. 请求头包含自定义请求的</span><br><span class=\"line\">    比如含有 Authorization, token 作为授权的字段</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><h4 id=\"预检请求-1\"><a href=\"#预检请求-1\" class=\"headerlink\" title=\"预检请求\"></a>预检请求</h4><p>客户端</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Origin: http://foo.explame                                      // 说明来源</span><br><span class=\"line\">Access-Control-Request-Method: POST                             // 说明正式的请求方法</span><br><span class=\"line\">Access-Control-Request-Headers: anthorization-bearer, user-name // 告知自定义的字段</span><br></pre></td></tr></table></figure>\n<p>服务端</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access-Control-Allow-Origin: http://foo.explame                 // 说明正式的请求来源</span><br><span class=\"line\">Access-Control-Allow-Methods: POST,GET,OPTIONS                  // 说明支持的请求跨域方法</span><br><span class=\"line\">Access-Control-Allow-Headers:anthorization-bearer, user-name    // 说明接受的自定义请求头</span><br><span class=\"line\">Access-Control-Max-Age: 86400                                   // 说明预检请求结果可以被缓存多长时间</span><br></pre></td></tr></table></figure>\n<h4 id=\"正式请求\"><a href=\"#正式请求\" class=\"headerlink\" title=\"正式请求\"></a>正式请求</h4><p>客户端</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">authorization-bearer: djfojoasdjf-sdfkj-sdfsd</span><br><span class=\"line\">user-name: 222222222AA222</span><br><span class=\"line\">Origin: http://foo.explame</span><br><span class=\"line\">Referer: http://foo.explame/</span><br></pre></td></tr></table></figure>\n<p>服务端</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access-Control-Allow-Origin: \"*\"</span><br><span class=\"line\">Access-Control-Allow-Methods: \"*\"</span><br></pre></td></tr></table></figure>\n<h4 id=\"增加凭证\"><a href=\"#增加凭证\" class=\"headerlink\" title=\"增加凭证\"></a>增加凭证</h4><p>客户端</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.defaults.withCredentials = true</span><br></pre></td></tr></table></figure>\n<p>客户端正式请求头</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">.....</span><br><span class=\"line\"></span><br><span class=\"line\">Cookie: pageAccess=2</span><br></pre></td></tr></table></figure>\n<p>服务端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 导入包：import javax.servlet.http.HttpServletResponse;</span></span><br><span class=\"line\"><span class=\"comment\"> * 接口参数中定义：HttpServletResponse response</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 允许跨域访问的域名：若有端口需写全（协议+域名+端口），若没有端口末尾不用加'/'</span></span><br><span class=\"line\">response.setHeader(<span class=\"string\">\"Access-Control-Allow-Origin\"</span>, <span class=\"string\">\"http://www.domain1.com\"</span>); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 允许前端带认证cookie：启用此项后，上面的域名不能为'*'，必须指定具体的域名，否则浏览器会提示</span></span><br><span class=\"line\">response.setHeader(<span class=\"string\">\"Access-Control-Allow-Credentials\"</span>, <span class=\"string\">\"true\"</span>); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 提示OPTIONS预检时，后端需要设置的两个常用自定义头</span></span><br><span class=\"line\">response.setHeader(<span class=\"string\">\"Access-Control-Allow-Headers\"</span>, <span class=\"string\">\"Content-Type,X-Requested-With\"</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access-Control-Allow-Origin: http://foo.example</span><br><span class=\"line\">Access-Control-Allow-Credentials: true</span><br><span class=\"line\">Set-Cookie: pageAccess=3; expires=Wed, 31-Dec-2008 01:34:53 GMT</span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<ol>\n<li>当客户端设置了withGredential,而服务端未携带 <code>Access-Control-Allow-Credentials: true</code>,浏览器不会讲请求内容发送给请求者。</li>\n<li>客户端携带了Cookie信息，服务端返回的 <code>Access-Control-Allow-Origin: *</code>，请求将会失败。返回的<code>Access-Control-Allow-Origin:http://foo.expample</code>，则会成功。</li>\n</ol>\n<h3 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h3><h4 id=\"原理-2\"><a href=\"#原理-2\" class=\"headerlink\" title=\"原理\"></a>原理</h4><p>同源策略只是浏览器安全策略，不是Http协议的一部分，服务端调用接口只是使用http协议，不会执行JS脚本，不需要同源策略，也就不存在跨域问题。</p>\n<h4 id=\"vue的反向代理\"><a href=\"#vue的反向代理\" class=\"headerlink\" title=\"vue的反向代理\"></a>vue的反向代理</h4><p>webpack的跨域实际上是借用 <code>webpack+node+webpack-dev-server</code>作为一个跨域代理,<br>并且由于开发环境下vue的渲染也是使用<code>webpack-dev-server</code>,所以页面与代理服务器不存在跨域,<br>不需要设置请求头。</p>\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p>vue.config.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.export = &#123;</span><br><span class=\"line\">    entry: &#123;&#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;&#125;,</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    devServer: &#123;</span><br><span class=\"line\">         proxy: [&#123;</span><br><span class=\"line\">            context: <span class=\"string\">'/login'</span>, <span class=\"comment\">// 确定要代理的主机目标</span></span><br><span class=\"line\">            target: <span class=\"string\">'http://www.domain2.com:8080'</span>,  <span class=\"comment\">// 代理跨域目标接口</span></span><br><span class=\"line\">            changeOrigin: <span class=\"literal\">true</span>, <span class=\"comment\">// 默认false，是否需要改变原始主机头为目标URL。</span></span><br><span class=\"line\">            secure: <span class=\"literal\">false</span>,  <span class=\"comment\">// 当代理某些https服务报错时用</span></span><br><span class=\"line\">            cookieDomainRewrite: <span class=\"string\">'www.domain1.com'</span>  <span class=\"comment\">// 可以为false，表示不修改  重写set-cookie头域</span></span><br><span class=\"line\">        &#125;],</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ps: 打包完成后，在生产环境会出现报错，所以需要在生产环境中使用nginx反向代理。</p>\n<p>原文： <a href=\"https://segmentfault.com/a/1190000011145364\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000011145364</a></p>\n"},{"title":"设计模式-中介者模式","catalog":true,"comments":1,"indexing":true,"header-img":"../../../../img/default.jpg","top":false,"tocnum":true,"date":"2021-09-08T09:39:56.000Z","subtitle":null,"_content":"\n# 核心\n\n中介模式是通过一个中介者对象来减少对象之间的混乱关系,减少对象与对象之间的耦合。\n\n# 实例\n\n> 古代有户部，兵部，工部\n> 天灾，需要户部处理赈灾，需要拉上兵部处理可能出现的叛乱，工部需要重建。\n> 边祸，需要兵部处理反击，需要拉上户部筹集军饷，需要工部修建抵抗工事。\n> 新行工，需要工部负责建造，需要拉上户部筹集资金，需要兵部出人建造。\n\n## 无中介者模式\n\n户部\n\n```js\nclass Department {\n    dealDisaster() {\n        console.log(\"负责赈灾相关事宜\");\n        const defense = new Defense();\n        defense.selfFun();\n\n        const ministry = new Ministry();\n        ministry.selfFun();\n    },\n    selfFun() {\n        console.log(\"筹集资金\");\n    }\n}\n\n```\n\n兵部\n\n```js\nclass Defense {\n    fight() {\n        console.log(\"负责抵御外族入侵\");\n\n        const department = new Department();\n        department.selfFun();\n\n        const ministry = new Ministry();\n        ministry.selfFun();\n    },\n    selfFun() {\n         console.log(\"出人出力\");\n    }\n}\n\n```\n\n工部\n\n```js\nclass Ministry {\n    build() {\n        console.log(\"负责行宫建造\");\n\n        const department = new Department();\n        department.selfFun();\n\n        const defense = new Defense();\n        defense.selfFun();\n    },\n    selfFUn() {\n         console.log(\"出图出设计\");\n    }\n} \n\n```\n\n事情的发展\n\n```js\nconst department = new Department();\ndepartment.dealDisaster();\n\nconst defense = new Defense();\ndefense.fight();\n\nconst ministry = new Ministry();\nministry.build();\n```\n\n三个部门内部自己协同沟通，暂时未见什么问题。\n但是随着部门的增加，必然会导致其内部关联关系非常多，导致以后维护非常混乱。\n\n\n### 中介者模式\n\n> 尚书省去充当中介者\n\n定义抽象的中介者\n\n```js\ninterface AbstractMediator {\n    department: Department,\n    defense: Defense,\n    ministry: Ministry,\n    dealThing: (code: number) => voide;\n}\n\npublic class  Mediator implements AbstractMediator {\n    department: Department,\n    defense: Defense ,\n    ministry: Ministry\n\n    DEPARTMENT_CODE=1;\n    DEFENSE_CODE=2;\n    MINISTRY_CODE=3;\n\n    constructor() {\n        this.department = new Department(this);\n        this.defense = new Defense(this);\n        this.ministry = new Ministry(this);\n    }\n\n    // 中介者最主要的方法，处理多个对象间的关系\n\n    dealThing(code: number) {\n        swich(code) {\n            case DEPARTMENT_CODE:\n                this.dealDisaster();\n            case DEFENSE_CODE:\n                this.fight();\n            case MINISTRY_CODE:\n                this.buildPalace();\n\n        }\n    }\n\n    dealDisaster() {\n         console.log(\"负责赈灾相关事宜\");\n         this.defense.selfFunction();\n         this.ministry.selfFunction();\n    }\n\n    fight() {\n        console.log(\"抵御入侵\");\n        this.department.selfFunction();\n        this.ministry.selfFunction();\n    }\n\n    buildPalace() {\n        console.log(\"修建行宫\");\n        this.defense.selfFunction();\n        this.department.selfFunction();\n    }\n}\n\n```\n\n定义部门\n\n```js\nclass AbstractColleague  {\n    protected abstractMediator: AbstractMediator;\n\n    constructor(abstractMediator: AbstractMediator ) {\n        this.abstractMediator = abstractMediator;\n    }\n}\n\nclass Department extend AbstractColleague {\n    constructor(abstractMediator: AbstractMediator ) {\n        super(abstractMediator);\n    }\n\n    dealDisaser() {\n        super.abstractMediator.dealThing(Mediator.DEPARTMENT_CODE)\n    }\n\n    selfFunction() {\n         console.log(\"筹集资金\");\n    }\n}\n\nclass Defense extend AbstractColleague {\n    constructor(abstractMediator: AbstractMediator ) {\n        super(abstractMediator);\n    }\n\n    dealDisaser() {\n        super.abstractMediator.dealThing(Mediator.DEFENSE_CODE)\n    }\n\n    selfFunction() {\n         console.log(\"出人出力\");\n    }\n}\n\nclass ministry extend AbstractColleague {\n    constructor(abstractMediator: AbstractMediator ) {\n        super(abstractMediator);\n    }\n\n    dealDisaser() {\n        super.abstractMediator.dealThing(Mediator.MINISTRY_CODE)\n    }\n\n    selfFunction() {\n         console.log(\"出图出设计\");\n    }\n}\n\n\n```\n实际应用\n\n```js\nbstractMediator abstractMediator=new Mediator();\n//发生天灾了，户部麻烦了，需要解决问题\nDepartment department=new Department(abstractMediator);\ndepartment.dealDisaster();\n//要打仗了，兵部的活来了\nDefense defense=new Defense(abstractMediator);\ndefense.fight();\n//皇帝发话了，工部赶紧建行宫\nMinistry ministry=new Ministry(abstractMediator);\nministry.buildPalace();\n```\n\n总结：\n\n优点：减少了耦合,将原来的实例从一对多的关系，变为一对一的关系。\n\n缺点：随着依赖的实例的增多，中介者会变得臃肿不堪。\n\n\n与观察者模式的区别：\n\n1. 中介者模式，各个依赖的实例不需要相互之间有交集，只需要中介者做交互。\n\n2. 观察者模式，只是强调同事类之间的关系，而观察这模式，同事类只能订阅。\n","source":"_posts/2021-09-08-设计模式-中介者模式.md","raw":"---\ntitle: 设计模式-中介者模式\ncatalog: true\ncomments: true\nindexing: true\nheader-img: ../../../../img/default.jpg\ntop: false\ntocnum: true\ndate: 2021-09-08 17:39:56\nsubtitle:\ntags:\n- 设计模式\ncategories:\n---\n\n# 核心\n\n中介模式是通过一个中介者对象来减少对象之间的混乱关系,减少对象与对象之间的耦合。\n\n# 实例\n\n> 古代有户部，兵部，工部\n> 天灾，需要户部处理赈灾，需要拉上兵部处理可能出现的叛乱，工部需要重建。\n> 边祸，需要兵部处理反击，需要拉上户部筹集军饷，需要工部修建抵抗工事。\n> 新行工，需要工部负责建造，需要拉上户部筹集资金，需要兵部出人建造。\n\n## 无中介者模式\n\n户部\n\n```js\nclass Department {\n    dealDisaster() {\n        console.log(\"负责赈灾相关事宜\");\n        const defense = new Defense();\n        defense.selfFun();\n\n        const ministry = new Ministry();\n        ministry.selfFun();\n    },\n    selfFun() {\n        console.log(\"筹集资金\");\n    }\n}\n\n```\n\n兵部\n\n```js\nclass Defense {\n    fight() {\n        console.log(\"负责抵御外族入侵\");\n\n        const department = new Department();\n        department.selfFun();\n\n        const ministry = new Ministry();\n        ministry.selfFun();\n    },\n    selfFun() {\n         console.log(\"出人出力\");\n    }\n}\n\n```\n\n工部\n\n```js\nclass Ministry {\n    build() {\n        console.log(\"负责行宫建造\");\n\n        const department = new Department();\n        department.selfFun();\n\n        const defense = new Defense();\n        defense.selfFun();\n    },\n    selfFUn() {\n         console.log(\"出图出设计\");\n    }\n} \n\n```\n\n事情的发展\n\n```js\nconst department = new Department();\ndepartment.dealDisaster();\n\nconst defense = new Defense();\ndefense.fight();\n\nconst ministry = new Ministry();\nministry.build();\n```\n\n三个部门内部自己协同沟通，暂时未见什么问题。\n但是随着部门的增加，必然会导致其内部关联关系非常多，导致以后维护非常混乱。\n\n\n### 中介者模式\n\n> 尚书省去充当中介者\n\n定义抽象的中介者\n\n```js\ninterface AbstractMediator {\n    department: Department,\n    defense: Defense,\n    ministry: Ministry,\n    dealThing: (code: number) => voide;\n}\n\npublic class  Mediator implements AbstractMediator {\n    department: Department,\n    defense: Defense ,\n    ministry: Ministry\n\n    DEPARTMENT_CODE=1;\n    DEFENSE_CODE=2;\n    MINISTRY_CODE=3;\n\n    constructor() {\n        this.department = new Department(this);\n        this.defense = new Defense(this);\n        this.ministry = new Ministry(this);\n    }\n\n    // 中介者最主要的方法，处理多个对象间的关系\n\n    dealThing(code: number) {\n        swich(code) {\n            case DEPARTMENT_CODE:\n                this.dealDisaster();\n            case DEFENSE_CODE:\n                this.fight();\n            case MINISTRY_CODE:\n                this.buildPalace();\n\n        }\n    }\n\n    dealDisaster() {\n         console.log(\"负责赈灾相关事宜\");\n         this.defense.selfFunction();\n         this.ministry.selfFunction();\n    }\n\n    fight() {\n        console.log(\"抵御入侵\");\n        this.department.selfFunction();\n        this.ministry.selfFunction();\n    }\n\n    buildPalace() {\n        console.log(\"修建行宫\");\n        this.defense.selfFunction();\n        this.department.selfFunction();\n    }\n}\n\n```\n\n定义部门\n\n```js\nclass AbstractColleague  {\n    protected abstractMediator: AbstractMediator;\n\n    constructor(abstractMediator: AbstractMediator ) {\n        this.abstractMediator = abstractMediator;\n    }\n}\n\nclass Department extend AbstractColleague {\n    constructor(abstractMediator: AbstractMediator ) {\n        super(abstractMediator);\n    }\n\n    dealDisaser() {\n        super.abstractMediator.dealThing(Mediator.DEPARTMENT_CODE)\n    }\n\n    selfFunction() {\n         console.log(\"筹集资金\");\n    }\n}\n\nclass Defense extend AbstractColleague {\n    constructor(abstractMediator: AbstractMediator ) {\n        super(abstractMediator);\n    }\n\n    dealDisaser() {\n        super.abstractMediator.dealThing(Mediator.DEFENSE_CODE)\n    }\n\n    selfFunction() {\n         console.log(\"出人出力\");\n    }\n}\n\nclass ministry extend AbstractColleague {\n    constructor(abstractMediator: AbstractMediator ) {\n        super(abstractMediator);\n    }\n\n    dealDisaser() {\n        super.abstractMediator.dealThing(Mediator.MINISTRY_CODE)\n    }\n\n    selfFunction() {\n         console.log(\"出图出设计\");\n    }\n}\n\n\n```\n实际应用\n\n```js\nbstractMediator abstractMediator=new Mediator();\n//发生天灾了，户部麻烦了，需要解决问题\nDepartment department=new Department(abstractMediator);\ndepartment.dealDisaster();\n//要打仗了，兵部的活来了\nDefense defense=new Defense(abstractMediator);\ndefense.fight();\n//皇帝发话了，工部赶紧建行宫\nMinistry ministry=new Ministry(abstractMediator);\nministry.buildPalace();\n```\n\n总结：\n\n优点：减少了耦合,将原来的实例从一对多的关系，变为一对一的关系。\n\n缺点：随着依赖的实例的增多，中介者会变得臃肿不堪。\n\n\n与观察者模式的区别：\n\n1. 中介者模式，各个依赖的实例不需要相互之间有交集，只需要中介者做交互。\n\n2. 观察者模式，只是强调同事类之间的关系，而观察这模式，同事类只能订阅。\n","slug":"设计模式-中介者模式","published":1,"updated":"2022-08-04T06:29:53.717Z","_id":"ckuyz81wd0000aov43cw84zll","layout":"post","photos":[],"link":"","content":"<h1 id=\"核心\"><a href=\"#核心\" class=\"headerlink\" title=\"核心\"></a>核心</h1><p>中介模式是通过一个中介者对象来减少对象之间的混乱关系,减少对象与对象之间的耦合。</p>\n<h1 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h1><blockquote>\n<p>古代有户部，兵部，工部<br>天灾，需要户部处理赈灾，需要拉上兵部处理可能出现的叛乱，工部需要重建。<br>边祸，需要兵部处理反击，需要拉上户部筹集军饷，需要工部修建抵抗工事。<br>新行工，需要工部负责建造，需要拉上户部筹集资金，需要兵部出人建造。</p>\n</blockquote>\n<h2 id=\"无中介者模式\"><a href=\"#无中介者模式\" class=\"headerlink\" title=\"无中介者模式\"></a>无中介者模式</h2><p>户部</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Department</span> </span>&#123;</span><br><span class=\"line\">    dealDisaster() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"负责赈灾相关事宜\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> defense = <span class=\"keyword\">new</span> Defense();</span><br><span class=\"line\">        defense.selfFun();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> ministry = <span class=\"keyword\">new</span> Ministry();</span><br><span class=\"line\">        ministry.selfFun();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    selfFun() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"筹集资金\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>兵部</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Defense</span> </span>&#123;</span><br><span class=\"line\">    fight() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"负责抵御外族入侵\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> department = <span class=\"keyword\">new</span> Department();</span><br><span class=\"line\">        department.selfFun();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> ministry = <span class=\"keyword\">new</span> Ministry();</span><br><span class=\"line\">        ministry.selfFun();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    selfFun() &#123;</span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(<span class=\"string\">\"出人出力\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>工部</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ministry</span> </span>&#123;</span><br><span class=\"line\">    build() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"负责行宫建造\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> department = <span class=\"keyword\">new</span> Department();</span><br><span class=\"line\">        department.selfFun();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> defense = <span class=\"keyword\">new</span> Defense();</span><br><span class=\"line\">        defense.selfFun();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    selfFUn() &#123;</span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(<span class=\"string\">\"出图出设计\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>事情的发展</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> department = <span class=\"keyword\">new</span> Department();</span><br><span class=\"line\">department.dealDisaster();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> defense = <span class=\"keyword\">new</span> Defense();</span><br><span class=\"line\">defense.fight();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> ministry = <span class=\"keyword\">new</span> Ministry();</span><br><span class=\"line\">ministry.build();</span><br></pre></td></tr></table></figure>\n<p>三个部门内部自己协同沟通，暂时未见什么问题。<br>但是随着部门的增加，必然会导致其内部关联关系非常多，导致以后维护非常混乱。</p>\n<h3 id=\"中介者模式\"><a href=\"#中介者模式\" class=\"headerlink\" title=\"中介者模式\"></a>中介者模式</h3><blockquote>\n<p>尚书省去充当中介者</p>\n</blockquote>\n<p>定义抽象的中介者</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface AbstractMediator &#123;</span><br><span class=\"line\">    department: Department,</span><br><span class=\"line\">    defense: Defense,</span><br><span class=\"line\">    ministry: Ministry,</span><br><span class=\"line\">    dealThing: <span class=\"function\">(<span class=\"params\">code: number</span>) =&gt;</span> voide;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">Mediator</span> <span class=\"title\">implements</span> <span class=\"title\">AbstractMediator</span> </span>&#123;</span><br><span class=\"line\">    department: Department,</span><br><span class=\"line\">    defense: Defense ,</span><br><span class=\"line\">    ministry: Ministry</span><br><span class=\"line\"></span><br><span class=\"line\">    DEPARTMENT_CODE=<span class=\"number\">1</span>;</span><br><span class=\"line\">    DEFENSE_CODE=<span class=\"number\">2</span>;</span><br><span class=\"line\">    MINISTRY_CODE=<span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.department = <span class=\"keyword\">new</span> Department(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.defense = <span class=\"keyword\">new</span> Defense(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ministry = <span class=\"keyword\">new</span> Ministry(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 中介者最主要的方法，处理多个对象间的关系</span></span><br><span class=\"line\"></span><br><span class=\"line\">    dealThing(code: number) &#123;</span><br><span class=\"line\">        swich(code) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> DEPARTMENT_CODE:</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.dealDisaster();</span><br><span class=\"line\">            <span class=\"keyword\">case</span> DEFENSE_CODE:</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.fight();</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MINISTRY_CODE:</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.buildPalace();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    dealDisaster() &#123;</span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(<span class=\"string\">\"负责赈灾相关事宜\"</span>);</span><br><span class=\"line\">         <span class=\"keyword\">this</span>.defense.selfFunction();</span><br><span class=\"line\">         <span class=\"keyword\">this</span>.ministry.selfFunction();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    fight() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"抵御入侵\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.department.selfFunction();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ministry.selfFunction();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    buildPalace() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"修建行宫\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.defense.selfFunction();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.department.selfFunction();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>定义部门</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractColleague</span>  </span>&#123;</span><br><span class=\"line\">    protected abstractMediator: AbstractMediator;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(abstractMediator: AbstractMediator ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.abstractMediator = abstractMediator;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Department</span> <span class=\"title\">extend</span> <span class=\"title\">AbstractColleague</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(abstractMediator: AbstractMediator ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(abstractMediator);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    dealDisaser() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.abstractMediator.dealThing(Mediator.DEPARTMENT_CODE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    selfFunction() &#123;</span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(<span class=\"string\">\"筹集资金\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Defense</span> <span class=\"title\">extend</span> <span class=\"title\">AbstractColleague</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(abstractMediator: AbstractMediator ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(abstractMediator);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    dealDisaser() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.abstractMediator.dealThing(Mediator.DEFENSE_CODE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    selfFunction() &#123;</span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(<span class=\"string\">\"出人出力\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ministry</span> <span class=\"title\">extend</span> <span class=\"title\">AbstractColleague</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(abstractMediator: AbstractMediator ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(abstractMediator);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    dealDisaser() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.abstractMediator.dealThing(Mediator.MINISTRY_CODE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    selfFunction() &#123;</span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(<span class=\"string\">\"出图出设计\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实际应用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bstractMediator abstractMediator=<span class=\"keyword\">new</span> Mediator();</span><br><span class=\"line\"><span class=\"comment\">//发生天灾了，户部麻烦了，需要解决问题</span></span><br><span class=\"line\">Department department=<span class=\"keyword\">new</span> Department(abstractMediator);</span><br><span class=\"line\">department.dealDisaster();</span><br><span class=\"line\"><span class=\"comment\">//要打仗了，兵部的活来了</span></span><br><span class=\"line\">Defense defense=<span class=\"keyword\">new</span> Defense(abstractMediator);</span><br><span class=\"line\">defense.fight();</span><br><span class=\"line\"><span class=\"comment\">//皇帝发话了，工部赶紧建行宫</span></span><br><span class=\"line\">Ministry ministry=<span class=\"keyword\">new</span> Ministry(abstractMediator);</span><br><span class=\"line\">ministry.buildPalace();</span><br></pre></td></tr></table></figure>\n<p>总结：</p>\n<p>优点：减少了耦合,将原来的实例从一对多的关系，变为一对一的关系。</p>\n<p>缺点：随着依赖的实例的增多，中介者会变得臃肿不堪。</p>\n<p>与观察者模式的区别：</p>\n<ol>\n<li><p>中介者模式，各个依赖的实例不需要相互之间有交集，只需要中介者做交互。</p>\n</li>\n<li><p>观察者模式，只是强调同事类之间的关系，而观察这模式，同事类只能订阅。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"核心\"><a href=\"#核心\" class=\"headerlink\" title=\"核心\"></a>核心</h1><p>中介模式是通过一个中介者对象来减少对象之间的混乱关系,减少对象与对象之间的耦合。</p>\n<h1 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h1><blockquote>\n<p>古代有户部，兵部，工部<br>天灾，需要户部处理赈灾，需要拉上兵部处理可能出现的叛乱，工部需要重建。<br>边祸，需要兵部处理反击，需要拉上户部筹集军饷，需要工部修建抵抗工事。<br>新行工，需要工部负责建造，需要拉上户部筹集资金，需要兵部出人建造。</p>\n</blockquote>\n<h2 id=\"无中介者模式\"><a href=\"#无中介者模式\" class=\"headerlink\" title=\"无中介者模式\"></a>无中介者模式</h2><p>户部</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Department</span> </span>&#123;</span><br><span class=\"line\">    dealDisaster() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"负责赈灾相关事宜\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> defense = <span class=\"keyword\">new</span> Defense();</span><br><span class=\"line\">        defense.selfFun();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> ministry = <span class=\"keyword\">new</span> Ministry();</span><br><span class=\"line\">        ministry.selfFun();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    selfFun() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"筹集资金\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>兵部</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Defense</span> </span>&#123;</span><br><span class=\"line\">    fight() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"负责抵御外族入侵\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> department = <span class=\"keyword\">new</span> Department();</span><br><span class=\"line\">        department.selfFun();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> ministry = <span class=\"keyword\">new</span> Ministry();</span><br><span class=\"line\">        ministry.selfFun();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    selfFun() &#123;</span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(<span class=\"string\">\"出人出力\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>工部</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ministry</span> </span>&#123;</span><br><span class=\"line\">    build() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"负责行宫建造\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> department = <span class=\"keyword\">new</span> Department();</span><br><span class=\"line\">        department.selfFun();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> defense = <span class=\"keyword\">new</span> Defense();</span><br><span class=\"line\">        defense.selfFun();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    selfFUn() &#123;</span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(<span class=\"string\">\"出图出设计\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>事情的发展</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> department = <span class=\"keyword\">new</span> Department();</span><br><span class=\"line\">department.dealDisaster();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> defense = <span class=\"keyword\">new</span> Defense();</span><br><span class=\"line\">defense.fight();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> ministry = <span class=\"keyword\">new</span> Ministry();</span><br><span class=\"line\">ministry.build();</span><br></pre></td></tr></table></figure>\n<p>三个部门内部自己协同沟通，暂时未见什么问题。<br>但是随着部门的增加，必然会导致其内部关联关系非常多，导致以后维护非常混乱。</p>\n<h3 id=\"中介者模式\"><a href=\"#中介者模式\" class=\"headerlink\" title=\"中介者模式\"></a>中介者模式</h3><blockquote>\n<p>尚书省去充当中介者</p>\n</blockquote>\n<p>定义抽象的中介者</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface AbstractMediator &#123;</span><br><span class=\"line\">    department: Department,</span><br><span class=\"line\">    defense: Defense,</span><br><span class=\"line\">    ministry: Ministry,</span><br><span class=\"line\">    dealThing: <span class=\"function\">(<span class=\"params\">code: number</span>) =&gt;</span> voide;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">Mediator</span> <span class=\"title\">implements</span> <span class=\"title\">AbstractMediator</span> </span>&#123;</span><br><span class=\"line\">    department: Department,</span><br><span class=\"line\">    defense: Defense ,</span><br><span class=\"line\">    ministry: Ministry</span><br><span class=\"line\"></span><br><span class=\"line\">    DEPARTMENT_CODE=<span class=\"number\">1</span>;</span><br><span class=\"line\">    DEFENSE_CODE=<span class=\"number\">2</span>;</span><br><span class=\"line\">    MINISTRY_CODE=<span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.department = <span class=\"keyword\">new</span> Department(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.defense = <span class=\"keyword\">new</span> Defense(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ministry = <span class=\"keyword\">new</span> Ministry(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 中介者最主要的方法，处理多个对象间的关系</span></span><br><span class=\"line\"></span><br><span class=\"line\">    dealThing(code: number) &#123;</span><br><span class=\"line\">        swich(code) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> DEPARTMENT_CODE:</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.dealDisaster();</span><br><span class=\"line\">            <span class=\"keyword\">case</span> DEFENSE_CODE:</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.fight();</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MINISTRY_CODE:</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.buildPalace();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    dealDisaster() &#123;</span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(<span class=\"string\">\"负责赈灾相关事宜\"</span>);</span><br><span class=\"line\">         <span class=\"keyword\">this</span>.defense.selfFunction();</span><br><span class=\"line\">         <span class=\"keyword\">this</span>.ministry.selfFunction();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    fight() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"抵御入侵\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.department.selfFunction();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ministry.selfFunction();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    buildPalace() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"修建行宫\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.defense.selfFunction();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.department.selfFunction();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>定义部门</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractColleague</span>  </span>&#123;</span><br><span class=\"line\">    protected abstractMediator: AbstractMediator;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(abstractMediator: AbstractMediator ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.abstractMediator = abstractMediator;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Department</span> <span class=\"title\">extend</span> <span class=\"title\">AbstractColleague</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(abstractMediator: AbstractMediator ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(abstractMediator);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    dealDisaser() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.abstractMediator.dealThing(Mediator.DEPARTMENT_CODE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    selfFunction() &#123;</span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(<span class=\"string\">\"筹集资金\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Defense</span> <span class=\"title\">extend</span> <span class=\"title\">AbstractColleague</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(abstractMediator: AbstractMediator ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(abstractMediator);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    dealDisaser() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.abstractMediator.dealThing(Mediator.DEFENSE_CODE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    selfFunction() &#123;</span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(<span class=\"string\">\"出人出力\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ministry</span> <span class=\"title\">extend</span> <span class=\"title\">AbstractColleague</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(abstractMediator: AbstractMediator ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(abstractMediator);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    dealDisaser() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.abstractMediator.dealThing(Mediator.MINISTRY_CODE)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    selfFunction() &#123;</span><br><span class=\"line\">         <span class=\"built_in\">console</span>.log(<span class=\"string\">\"出图出设计\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实际应用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bstractMediator abstractMediator=<span class=\"keyword\">new</span> Mediator();</span><br><span class=\"line\"><span class=\"comment\">//发生天灾了，户部麻烦了，需要解决问题</span></span><br><span class=\"line\">Department department=<span class=\"keyword\">new</span> Department(abstractMediator);</span><br><span class=\"line\">department.dealDisaster();</span><br><span class=\"line\"><span class=\"comment\">//要打仗了，兵部的活来了</span></span><br><span class=\"line\">Defense defense=<span class=\"keyword\">new</span> Defense(abstractMediator);</span><br><span class=\"line\">defense.fight();</span><br><span class=\"line\"><span class=\"comment\">//皇帝发话了，工部赶紧建行宫</span></span><br><span class=\"line\">Ministry ministry=<span class=\"keyword\">new</span> Ministry(abstractMediator);</span><br><span class=\"line\">ministry.buildPalace();</span><br></pre></td></tr></table></figure>\n<p>总结：</p>\n<p>优点：减少了耦合,将原来的实例从一对多的关系，变为一对一的关系。</p>\n<p>缺点：随着依赖的实例的增多，中介者会变得臃肿不堪。</p>\n<p>与观察者模式的区别：</p>\n<ol>\n<li><p>中介者模式，各个依赖的实例不需要相互之间有交集，只需要中介者做交互。</p>\n</li>\n<li><p>观察者模式，只是强调同事类之间的关系，而观察这模式，同事类只能订阅。</p>\n</li>\n</ol>\n"},{"title":"设计模式-迭代器模式","catalog":true,"comments":1,"indexing":true,"header-img":"../../../../img/default.jpg","top":false,"tocnum":true,"date":"2021-10-20T05:47:40.000Z","subtitle":null,"_content":"\n\n# 核心\n\n\n\n\n\n\n\n\n\n","source":"_posts/2021-10-20-设计模式-迭代器模式.md","raw":"---\ntitle: 设计模式-迭代器模式\ncatalog: true\ncomments: true\nindexing: true\nheader-img: ../../../../img/default.jpg\ntop: false\ntocnum: true\ndate: 2021-10-20 13:47:40\nsubtitle:\ntags:\n- 设计模式\ncategories:\n---\n\n\n# 核心\n\n\n\n\n\n\n\n\n\n","slug":"设计模式-迭代器模式","published":1,"updated":"2022-08-04T06:29:53.717Z","layout":"post","photos":[],"link":"","_id":"clb4qsblq00001wv4hcd42pkh","content":"<h1 id=\"核心\"><a href=\"#核心\" class=\"headerlink\" title=\"核心\"></a>核心</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"核心\"><a href=\"#核心\" class=\"headerlink\" title=\"核心\"></a>核心</h1>"},{"title":"算法-深度优先&广度优先","catalog":true,"comments":1,"indexing":true,"header-img":"../../../../img/default.jpg","top":false,"tocnum":true,"date":"2022-01-11T08:37:58.000Z","subtitle":null,"_content":"# 核心\n\n## 深度遍历\n\n深度遍历的核心在于：沿着一条分支不停的遍历下去,通过递归或者栈的特性（先进先出）\nDFS适合目标明确。\n\n## 广度遍历\n\n广度遍历的核心在于：根据层级一层层的遍历下去，通过队列的特性（先进先出）\nBFS适合大范围的寻找。\n\n```js\n// 这个是要进行遍历的树形节点  \nconst root = [\n    {\n      \"id\":1,\n      \"pid\":null,\n      \"key\":1,\n      \"title\":\"1-1111\",\n      \"children\":[\n        {\n          \"id\":2,\n          \"pid\":1,\n          \"key\":2,\n          \"title\":\"2-1111\",\n          \"children\":[\n            {\n              \"id\":4,\n              \"pid\":2,\n              \"key\":4,\n              \"title\":\"8-1111\",\n              \"children\":[]\n            },\n            {\n              \"id\":5,\n              \"pid\":2,\n              \"key\":5,\n              \"title\":\"9-1111\",\n              \"children\":[\n                {\n                  \"id\":7,\n                  \"pid\":5,\n                  \"key\":7,\n                  \"title\":\"5-1111\",\n                  \"children\":[]\n                },\n                {\n                  \"id\":8,\n                  \"pid\":5,\n                  \"key\":8,\n                  \"title\":\"8-1111\",\n                  \"children\":[]\n                },\n              ]\n            },\n            {\n              \"id\":6,\n              \"pid\":2,\n              \"key\":6,\n              \"title\":\"10-1111\",\n              \"children\":[]\n            },\n          ]\n        },\n        {\n          \"id\":3,\n          \"pid\":1,\n          \"key\":3,\n          \"title\":\"9-1111\",\n          \"children\":[]\n        }\n      ]\n    }\n  ]\n \n// 深度优先-递归\nconst searchKeyByRecursion = (targetKey, tree, ids) => {\n    function search(ary, idList) {\n        if ( Array.isArray(ary) ) {\n            ary.forEach((item) => {\n                if ( targetKey === item.key ) {\n                    idList.push(item.id);\n                }\n                if ( Array.isArray(item.children) &&  item.children.length > 0) {\n                    search(item.children, idList);\n                }\n            })\n        }\n    }\n    search(tree, ids);\n}\n\n// const  ids = [];\n\n// searchKeyByRecursion(7, root, ids);\n\n// 深度优先 - 栈\nconst  searchkeyByStack =  (targetKey, tree, ids) => {\n  function search(ary, idList) {\n    const stack = [];\n    if( Array.isArray(ary) ) {\n      for ( let item of ary ) {\n        console.log(item.id);\n        stack.push(item);\n        while( stack.length > 0 ) {\n          const whileItem = stack.pop();\n          console.log(whileItem.id);\n          if ( whileItem.key === targetKey ) {\n            idList.push(whileItem.id)\n          }\n\n          if ( whileItem.children && Array.isArray(whileItem.children) && whileItem.children.length > 0 ) {\n           for ( let childItem of whileItem.children ) {\n            stack.push(childItem);\n           }\n          }\n        }\n\n      }\n    }\n  }\n  search(tree, ids);\n}\nconst  ids1 = [];\n\nsearchkeyByStack(7, root, ids1);\nconsole.log(ids1)\n\n// 广度优先\nconst  searchkeyByQueue =  (targetKey, tree, ids) => {\n  function search(ary, idList) {\n    const queue = [];\n    if( Array.isArray(ary) ) {\n      for ( let item of ary ) {\n        console.log(item.id);\n        queue.push(item);\n        while( queue.length > 0 ) {\n          const whileItem = queue.shift();\n          console.log(whileItem.id);\n\n          if ( whileItem.key === targetKey ) {\n            idList.push(whileItem.id)\n          }\n\n          if ( whileItem.children && Array.isArray(whileItem.children) && whileItem.children.length > 0 ) {\n           for ( let childItem of whileItem.children ) {\n            queue.push(childItem);\n           }\n          }\n        }\n\n      }\n    }\n  }\n  search(tree, ids);\n}\n\nconst  ids = [];\n\nsearchkeyByQueue(7, root, ids);\nconsole.log(ids)\n\n```\n","source":"_posts/2022-01-11-算法-深度优先-广度优先.md","raw":"---\ntitle: 算法-深度优先&广度优先\ncatalog: true\ncomments: true\nindexing: true\nheader-img: ../../../../img/default.jpg\ntop: false\ntocnum: true\ndate: 2022-01-11 16:37:58\nsubtitle:\ntags:\n- 算法\ncategories:\n---\n# 核心\n\n## 深度遍历\n\n深度遍历的核心在于：沿着一条分支不停的遍历下去,通过递归或者栈的特性（先进先出）\nDFS适合目标明确。\n\n## 广度遍历\n\n广度遍历的核心在于：根据层级一层层的遍历下去，通过队列的特性（先进先出）\nBFS适合大范围的寻找。\n\n```js\n// 这个是要进行遍历的树形节点  \nconst root = [\n    {\n      \"id\":1,\n      \"pid\":null,\n      \"key\":1,\n      \"title\":\"1-1111\",\n      \"children\":[\n        {\n          \"id\":2,\n          \"pid\":1,\n          \"key\":2,\n          \"title\":\"2-1111\",\n          \"children\":[\n            {\n              \"id\":4,\n              \"pid\":2,\n              \"key\":4,\n              \"title\":\"8-1111\",\n              \"children\":[]\n            },\n            {\n              \"id\":5,\n              \"pid\":2,\n              \"key\":5,\n              \"title\":\"9-1111\",\n              \"children\":[\n                {\n                  \"id\":7,\n                  \"pid\":5,\n                  \"key\":7,\n                  \"title\":\"5-1111\",\n                  \"children\":[]\n                },\n                {\n                  \"id\":8,\n                  \"pid\":5,\n                  \"key\":8,\n                  \"title\":\"8-1111\",\n                  \"children\":[]\n                },\n              ]\n            },\n            {\n              \"id\":6,\n              \"pid\":2,\n              \"key\":6,\n              \"title\":\"10-1111\",\n              \"children\":[]\n            },\n          ]\n        },\n        {\n          \"id\":3,\n          \"pid\":1,\n          \"key\":3,\n          \"title\":\"9-1111\",\n          \"children\":[]\n        }\n      ]\n    }\n  ]\n \n// 深度优先-递归\nconst searchKeyByRecursion = (targetKey, tree, ids) => {\n    function search(ary, idList) {\n        if ( Array.isArray(ary) ) {\n            ary.forEach((item) => {\n                if ( targetKey === item.key ) {\n                    idList.push(item.id);\n                }\n                if ( Array.isArray(item.children) &&  item.children.length > 0) {\n                    search(item.children, idList);\n                }\n            })\n        }\n    }\n    search(tree, ids);\n}\n\n// const  ids = [];\n\n// searchKeyByRecursion(7, root, ids);\n\n// 深度优先 - 栈\nconst  searchkeyByStack =  (targetKey, tree, ids) => {\n  function search(ary, idList) {\n    const stack = [];\n    if( Array.isArray(ary) ) {\n      for ( let item of ary ) {\n        console.log(item.id);\n        stack.push(item);\n        while( stack.length > 0 ) {\n          const whileItem = stack.pop();\n          console.log(whileItem.id);\n          if ( whileItem.key === targetKey ) {\n            idList.push(whileItem.id)\n          }\n\n          if ( whileItem.children && Array.isArray(whileItem.children) && whileItem.children.length > 0 ) {\n           for ( let childItem of whileItem.children ) {\n            stack.push(childItem);\n           }\n          }\n        }\n\n      }\n    }\n  }\n  search(tree, ids);\n}\nconst  ids1 = [];\n\nsearchkeyByStack(7, root, ids1);\nconsole.log(ids1)\n\n// 广度优先\nconst  searchkeyByQueue =  (targetKey, tree, ids) => {\n  function search(ary, idList) {\n    const queue = [];\n    if( Array.isArray(ary) ) {\n      for ( let item of ary ) {\n        console.log(item.id);\n        queue.push(item);\n        while( queue.length > 0 ) {\n          const whileItem = queue.shift();\n          console.log(whileItem.id);\n\n          if ( whileItem.key === targetKey ) {\n            idList.push(whileItem.id)\n          }\n\n          if ( whileItem.children && Array.isArray(whileItem.children) && whileItem.children.length > 0 ) {\n           for ( let childItem of whileItem.children ) {\n            queue.push(childItem);\n           }\n          }\n        }\n\n      }\n    }\n  }\n  search(tree, ids);\n}\n\nconst  ids = [];\n\nsearchkeyByQueue(7, root, ids);\nconsole.log(ids)\n\n```\n","slug":"算法-深度优先-广度优先","published":1,"updated":"2022-08-04T06:29:53.717Z","layout":"post","photos":[],"link":"","_id":"clb4qsbmd00021wv41kxm84q1","content":"<h1 id=\"核心\"><a href=\"#核心\" class=\"headerlink\" title=\"核心\"></a>核心</h1><h2 id=\"深度遍历\"><a href=\"#深度遍历\" class=\"headerlink\" title=\"深度遍历\"></a>深度遍历</h2><p>深度遍历的核心在于：沿着一条分支不停的遍历下去,通过递归或者栈的特性（先进先出）<br>DFS适合目标明确。</p>\n<h2 id=\"广度遍历\"><a href=\"#广度遍历\" class=\"headerlink\" title=\"广度遍历\"></a>广度遍历</h2><p>广度遍历的核心在于：根据层级一层层的遍历下去，通过队列的特性（先进先出）<br>BFS适合大范围的寻找。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这个是要进行遍历的树形节点  </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">\"id\"</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"string\">\"pid\"</span>:<span class=\"literal\">null</span>,</span><br><span class=\"line\">      <span class=\"string\">\"key\"</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"string\">\"title\"</span>:<span class=\"string\">\"1-1111\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"children\"</span>:[</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"string\">\"id\"</span>:<span class=\"number\">2</span>,</span><br><span class=\"line\">          <span class=\"string\">\"pid\"</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">          <span class=\"string\">\"key\"</span>:<span class=\"number\">2</span>,</span><br><span class=\"line\">          <span class=\"string\">\"title\"</span>:<span class=\"string\">\"2-1111\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"children\"</span>:[</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              <span class=\"string\">\"id\"</span>:<span class=\"number\">4</span>,</span><br><span class=\"line\">              <span class=\"string\">\"pid\"</span>:<span class=\"number\">2</span>,</span><br><span class=\"line\">              <span class=\"string\">\"key\"</span>:<span class=\"number\">4</span>,</span><br><span class=\"line\">              <span class=\"string\">\"title\"</span>:<span class=\"string\">\"8-1111\"</span>,</span><br><span class=\"line\">              <span class=\"string\">\"children\"</span>:[]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              <span class=\"string\">\"id\"</span>:<span class=\"number\">5</span>,</span><br><span class=\"line\">              <span class=\"string\">\"pid\"</span>:<span class=\"number\">2</span>,</span><br><span class=\"line\">              <span class=\"string\">\"key\"</span>:<span class=\"number\">5</span>,</span><br><span class=\"line\">              <span class=\"string\">\"title\"</span>:<span class=\"string\">\"9-1111\"</span>,</span><br><span class=\"line\">              <span class=\"string\">\"children\"</span>:[</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                  <span class=\"string\">\"id\"</span>:<span class=\"number\">7</span>,</span><br><span class=\"line\">                  <span class=\"string\">\"pid\"</span>:<span class=\"number\">5</span>,</span><br><span class=\"line\">                  <span class=\"string\">\"key\"</span>:<span class=\"number\">7</span>,</span><br><span class=\"line\">                  <span class=\"string\">\"title\"</span>:<span class=\"string\">\"5-1111\"</span>,</span><br><span class=\"line\">                  <span class=\"string\">\"children\"</span>:[]</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                  <span class=\"string\">\"id\"</span>:<span class=\"number\">8</span>,</span><br><span class=\"line\">                  <span class=\"string\">\"pid\"</span>:<span class=\"number\">5</span>,</span><br><span class=\"line\">                  <span class=\"string\">\"key\"</span>:<span class=\"number\">8</span>,</span><br><span class=\"line\">                  <span class=\"string\">\"title\"</span>:<span class=\"string\">\"8-1111\"</span>,</span><br><span class=\"line\">                  <span class=\"string\">\"children\"</span>:[]</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">              ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              <span class=\"string\">\"id\"</span>:<span class=\"number\">6</span>,</span><br><span class=\"line\">              <span class=\"string\">\"pid\"</span>:<span class=\"number\">2</span>,</span><br><span class=\"line\">              <span class=\"string\">\"key\"</span>:<span class=\"number\">6</span>,</span><br><span class=\"line\">              <span class=\"string\">\"title\"</span>:<span class=\"string\">\"10-1111\"</span>,</span><br><span class=\"line\">              <span class=\"string\">\"children\"</span>:[]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">          ]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"string\">\"id\"</span>:<span class=\"number\">3</span>,</span><br><span class=\"line\">          <span class=\"string\">\"pid\"</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">          <span class=\"string\">\"key\"</span>:<span class=\"number\">3</span>,</span><br><span class=\"line\">          <span class=\"string\">\"title\"</span>:<span class=\"string\">\"9-1111\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"children\"</span>:[]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 深度优先-递归</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> searchKeyByRecursion = <span class=\"function\">(<span class=\"params\">targetKey, tree, ids</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">search</span>(<span class=\"params\">ary, idList</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( <span class=\"built_in\">Array</span>.isArray(ary) ) &#123;</span><br><span class=\"line\">            ary.forEach(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ( targetKey === item.key ) &#123;</span><br><span class=\"line\">                    idList.push(item.id);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ( <span class=\"built_in\">Array</span>.isArray(item.children) &amp;&amp;  item.children.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    search(item.children, idList);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    search(tree, ids);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// const  ids = [];</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// searchKeyByRecursion(7, root, ids);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 深度优先 - 栈</span></span><br><span class=\"line\"><span class=\"keyword\">const</span>  searchkeyByStack =  <span class=\"function\">(<span class=\"params\">targetKey, tree, ids</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">search</span>(<span class=\"params\">ary, idList</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> stack = [];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( <span class=\"built_in\">Array</span>.isArray(ary) ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> ary ) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(item.id);</span><br><span class=\"line\">        stack.push(item);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>( stack.length &gt; <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> whileItem = stack.pop();</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(whileItem.id);</span><br><span class=\"line\">          <span class=\"keyword\">if</span> ( whileItem.key === targetKey ) &#123;</span><br><span class=\"line\">            idList.push(whileItem.id)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> ( whileItem.children &amp;&amp; <span class=\"built_in\">Array</span>.isArray(whileItem.children) &amp;&amp; whileItem.children.length &gt; <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> childItem <span class=\"keyword\">of</span> whileItem.children ) &#123;</span><br><span class=\"line\">            stack.push(childItem);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  search(tree, ids);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span>  ids1 = [];</span><br><span class=\"line\"></span><br><span class=\"line\">searchkeyByStack(<span class=\"number\">7</span>, root, ids1);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ids1)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 广度优先</span></span><br><span class=\"line\"><span class=\"keyword\">const</span>  searchkeyByQueue =  <span class=\"function\">(<span class=\"params\">targetKey, tree, ids</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">search</span>(<span class=\"params\">ary, idList</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> queue = [];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( <span class=\"built_in\">Array</span>.isArray(ary) ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> ary ) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(item.id);</span><br><span class=\"line\">        queue.push(item);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>( queue.length &gt; <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> whileItem = queue.shift();</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(whileItem.id);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> ( whileItem.key === targetKey ) &#123;</span><br><span class=\"line\">            idList.push(whileItem.id)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> ( whileItem.children &amp;&amp; <span class=\"built_in\">Array</span>.isArray(whileItem.children) &amp;&amp; whileItem.children.length &gt; <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> childItem <span class=\"keyword\">of</span> whileItem.children ) &#123;</span><br><span class=\"line\">            queue.push(childItem);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  search(tree, ids);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span>  ids = [];</span><br><span class=\"line\"></span><br><span class=\"line\">searchkeyByQueue(<span class=\"number\">7</span>, root, ids);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ids)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"核心\"><a href=\"#核心\" class=\"headerlink\" title=\"核心\"></a>核心</h1><h2 id=\"深度遍历\"><a href=\"#深度遍历\" class=\"headerlink\" title=\"深度遍历\"></a>深度遍历</h2><p>深度遍历的核心在于：沿着一条分支不停的遍历下去,通过递归或者栈的特性（先进先出）<br>DFS适合目标明确。</p>\n<h2 id=\"广度遍历\"><a href=\"#广度遍历\" class=\"headerlink\" title=\"广度遍历\"></a>广度遍历</h2><p>广度遍历的核心在于：根据层级一层层的遍历下去，通过队列的特性（先进先出）<br>BFS适合大范围的寻找。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这个是要进行遍历的树形节点  </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">\"id\"</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"string\">\"pid\"</span>:<span class=\"literal\">null</span>,</span><br><span class=\"line\">      <span class=\"string\">\"key\"</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"string\">\"title\"</span>:<span class=\"string\">\"1-1111\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"children\"</span>:[</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"string\">\"id\"</span>:<span class=\"number\">2</span>,</span><br><span class=\"line\">          <span class=\"string\">\"pid\"</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">          <span class=\"string\">\"key\"</span>:<span class=\"number\">2</span>,</span><br><span class=\"line\">          <span class=\"string\">\"title\"</span>:<span class=\"string\">\"2-1111\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"children\"</span>:[</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              <span class=\"string\">\"id\"</span>:<span class=\"number\">4</span>,</span><br><span class=\"line\">              <span class=\"string\">\"pid\"</span>:<span class=\"number\">2</span>,</span><br><span class=\"line\">              <span class=\"string\">\"key\"</span>:<span class=\"number\">4</span>,</span><br><span class=\"line\">              <span class=\"string\">\"title\"</span>:<span class=\"string\">\"8-1111\"</span>,</span><br><span class=\"line\">              <span class=\"string\">\"children\"</span>:[]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              <span class=\"string\">\"id\"</span>:<span class=\"number\">5</span>,</span><br><span class=\"line\">              <span class=\"string\">\"pid\"</span>:<span class=\"number\">2</span>,</span><br><span class=\"line\">              <span class=\"string\">\"key\"</span>:<span class=\"number\">5</span>,</span><br><span class=\"line\">              <span class=\"string\">\"title\"</span>:<span class=\"string\">\"9-1111\"</span>,</span><br><span class=\"line\">              <span class=\"string\">\"children\"</span>:[</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                  <span class=\"string\">\"id\"</span>:<span class=\"number\">7</span>,</span><br><span class=\"line\">                  <span class=\"string\">\"pid\"</span>:<span class=\"number\">5</span>,</span><br><span class=\"line\">                  <span class=\"string\">\"key\"</span>:<span class=\"number\">7</span>,</span><br><span class=\"line\">                  <span class=\"string\">\"title\"</span>:<span class=\"string\">\"5-1111\"</span>,</span><br><span class=\"line\">                  <span class=\"string\">\"children\"</span>:[]</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                  <span class=\"string\">\"id\"</span>:<span class=\"number\">8</span>,</span><br><span class=\"line\">                  <span class=\"string\">\"pid\"</span>:<span class=\"number\">5</span>,</span><br><span class=\"line\">                  <span class=\"string\">\"key\"</span>:<span class=\"number\">8</span>,</span><br><span class=\"line\">                  <span class=\"string\">\"title\"</span>:<span class=\"string\">\"8-1111\"</span>,</span><br><span class=\"line\">                  <span class=\"string\">\"children\"</span>:[]</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">              ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              <span class=\"string\">\"id\"</span>:<span class=\"number\">6</span>,</span><br><span class=\"line\">              <span class=\"string\">\"pid\"</span>:<span class=\"number\">2</span>,</span><br><span class=\"line\">              <span class=\"string\">\"key\"</span>:<span class=\"number\">6</span>,</span><br><span class=\"line\">              <span class=\"string\">\"title\"</span>:<span class=\"string\">\"10-1111\"</span>,</span><br><span class=\"line\">              <span class=\"string\">\"children\"</span>:[]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">          ]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"string\">\"id\"</span>:<span class=\"number\">3</span>,</span><br><span class=\"line\">          <span class=\"string\">\"pid\"</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">          <span class=\"string\">\"key\"</span>:<span class=\"number\">3</span>,</span><br><span class=\"line\">          <span class=\"string\">\"title\"</span>:<span class=\"string\">\"9-1111\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"children\"</span>:[]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 深度优先-递归</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> searchKeyByRecursion = <span class=\"function\">(<span class=\"params\">targetKey, tree, ids</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">search</span>(<span class=\"params\">ary, idList</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( <span class=\"built_in\">Array</span>.isArray(ary) ) &#123;</span><br><span class=\"line\">            ary.forEach(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ( targetKey === item.key ) &#123;</span><br><span class=\"line\">                    idList.push(item.id);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ( <span class=\"built_in\">Array</span>.isArray(item.children) &amp;&amp;  item.children.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    search(item.children, idList);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    search(tree, ids);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// const  ids = [];</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// searchKeyByRecursion(7, root, ids);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 深度优先 - 栈</span></span><br><span class=\"line\"><span class=\"keyword\">const</span>  searchkeyByStack =  <span class=\"function\">(<span class=\"params\">targetKey, tree, ids</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">search</span>(<span class=\"params\">ary, idList</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> stack = [];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( <span class=\"built_in\">Array</span>.isArray(ary) ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> ary ) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(item.id);</span><br><span class=\"line\">        stack.push(item);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>( stack.length &gt; <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> whileItem = stack.pop();</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(whileItem.id);</span><br><span class=\"line\">          <span class=\"keyword\">if</span> ( whileItem.key === targetKey ) &#123;</span><br><span class=\"line\">            idList.push(whileItem.id)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> ( whileItem.children &amp;&amp; <span class=\"built_in\">Array</span>.isArray(whileItem.children) &amp;&amp; whileItem.children.length &gt; <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> childItem <span class=\"keyword\">of</span> whileItem.children ) &#123;</span><br><span class=\"line\">            stack.push(childItem);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  search(tree, ids);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span>  ids1 = [];</span><br><span class=\"line\"></span><br><span class=\"line\">searchkeyByStack(<span class=\"number\">7</span>, root, ids1);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ids1)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 广度优先</span></span><br><span class=\"line\"><span class=\"keyword\">const</span>  searchkeyByQueue =  <span class=\"function\">(<span class=\"params\">targetKey, tree, ids</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">search</span>(<span class=\"params\">ary, idList</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> queue = [];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( <span class=\"built_in\">Array</span>.isArray(ary) ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> ary ) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(item.id);</span><br><span class=\"line\">        queue.push(item);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>( queue.length &gt; <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> whileItem = queue.shift();</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(whileItem.id);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> ( whileItem.key === targetKey ) &#123;</span><br><span class=\"line\">            idList.push(whileItem.id)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> ( whileItem.children &amp;&amp; <span class=\"built_in\">Array</span>.isArray(whileItem.children) &amp;&amp; whileItem.children.length &gt; <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> childItem <span class=\"keyword\">of</span> whileItem.children ) &#123;</span><br><span class=\"line\">            queue.push(childItem);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  search(tree, ids);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span>  ids = [];</span><br><span class=\"line\"></span><br><span class=\"line\">searchkeyByQueue(<span class=\"number\">7</span>, root, ids);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ids)</span><br></pre></td></tr></table></figure>\n"},{"title":"vue3-composition-api","catalog":true,"comments":1,"indexing":true,"header-img":"../../../../img/default.jpg","top":false,"tocnum":true,"date":"2022-12-02T02:09:41.000Z","subtitle":null,"_content":"\n# Vue3 响应式原理\n\n## ref & reactive\n\n`ref`使用`getter / setter` 劫持数据。\n\n```js\nfunction ref(value) {\n    const refObject= {\n        get value() {\n            track(refObject, 'value');\n            return value;\n        },\n        set value(newValue) {\n            value = newValue;\n            trigger(refObject, 'value');\n        }\n    }\n    return refObject;\n}\n```\n\n`reactive`使用 `Proxy` 劫持数据。\n\n```js\nfunction reactive (obj) {\n    return new Proxy(obj, {\n        get(target, key) {\n            track(target, key);\n            return target[key];\n        },\n        set(target, key, value) {\n            target[key] = value;\n            trigger(target, key);\n        }\n    })\n}\n```\n\n## track 跟踪\n\n```js\nlet activeEffect;\n\nfunction track(target, key) {\n    if ( activeEffect ) {\n        const effects = getSubscriberForProperty(target, key);\n        effects.add(activeEffect);\n    }\n}\n```\n\n## trigger 触发\n\n```js\nfunction trigger(target, key) {\n    const effects = getSubscriberForProperty(target, key);\n    effects.forEach(effect => effect());\n}\n```\n\n## watchEffect  响应式副作用\n\n```js\nimport { ref, watchEffect } from 'vue'\n\nconst A0 = ref(0)\nconst A1 = ref(1)\nconst A2 = ref()\n\nwatchEffect(() => {\n  // 追踪 A0 和 A1\n  A2.value = A0.value + A1.value\n})\n\n// 将触发副作用\nA0.value = 2\n```\n\n`ref`或者`reactive`创建响应式对象,通过`watchEffect`获取响应式副作用,从而达到响应式的目的。\n\n# 响应式的核心\n\n## ref\n\n- 接收任何类型的值\n- 返回一个`get/set`包含响应式的`.value`的对象\n- 如果`value`是集合类型会自动使用`reactive`进行响应式的转化\n\n### ref的解包\n\n- 作为顶层属性被访问时,会自动解包,不需要`.value`,如果不做为上下文的顶级属性时,不会自动解包\n- 在响应式对象中会自动解包，表现得跟一般属性一致\n\n```js\nconst count = ref(0)\nconst state = reactive({\n  count\n})\n\nconsole.log(state.count) // 0\n\nstate.count = 1\nconsole.log(count.value) // 1\n```\n\n- `ref`在数组和集合的响应式类型中不会解包\n\n```js\nconst books = reactive([ref('Vue 3 Guide')])\n// 这里需要 .value\nconsole.log(books[0].value)\n\nconst map = reactive(new Map([['count', ref(0)]]))\n// 这里需要 .value\nconsole.log(map.get('count').value)\n```\n\n## reactive\n\n- 接收 `array`, `object`, `map`, `set` 这样的对象集合类型\n- vue通过属性的响应式追踪,如果更改了对象集合类型的引用，会导致响应式的丢失\n\n```ts\nconst state = reactive({ count: 0 })\n\n// n 是一个局部变量，同 state.count\n// 失去响应性连接\nlet n = state.count\n// 不影响原始的 state\nn++\n\n// count 也和 state.count 失去了响应性连接\nlet { count } = state\n// 不会影响原始的 state\ncount++\n\n// 该函数接收一个普通数字，并且\n// 将无法跟踪 state.count 的变化\ncallSomeFunction(state.count)\n\n```\n\n## computed 计算属性\n\n- `computed`期望接收一个`getter`函数,返回一个 **计算属性的ref**\n- `computed`自动追踪函数内的响应式依赖\n- `computed`计算属性基于响应式依赖的缓存,当依赖没有被改变,不会去主动执行`getter`函数\n- `computed`默认只有`get`,我们也可以设置`set`变成一个可写的计算属性\n- `computed`的`get`中不要包含其他的副作用, 请求以及操作DOM\n\n## watchEffect 侦听器\n\n立即运行一个函数,同时响应式的跟踪其依赖,并当依赖更新时重新运行函数\n\n### 类型\n\n```ts\nfunction watchEffect(\n  effect: (onCleanup: OnCleanup) => void,\n  options?: WatchEffectOptions\n): StopHandle\n\ntype OnCleanup = (cleanupFn: () => void) => void\n\ninterface WatchEffectOptions {\n  flush?: 'pre' | 'post' | 'sync' // 默认：'pre'\n  onTrack?: (event: DebuggerEvent) => void\n  onTrigger?: (event: DebuggerEvent) => void\n}\n\ntype StopHandle = () => void\n```\n\n- `effect`: 要执行的副作用函数,这个函数也包含一个参数,这个参数再下一次调用前被执行,用于执行清除无效的副作用\n- `options`: 可选参数,用来调整副作用的刷新时机以及调试依赖\n  - `flush`: 侦听器执行时机\n    - pre: 组件渲染前执行\n    - post: 延迟到渲染后执行\n    - sync: 响应依赖发生改变后立马执行\n  - onTrack:\n  - onTrigger:\n- `StopHandle`: 停止副作用函数\n\n## watch\n\n```js\n// 侦听单个来源\nfunction watch<T>(\n  source: WatchSource<T>,\n  callback: WatchCallback<T>,\n  options?: WatchOptions\n): StopHandle\n\n// 侦听多个来源\nfunction watch<T>(\n  sources: WatchSource<T>[],\n  callback: WatchCallback<T[]>,\n  options?: WatchOptions\n): StopHandle\n\ntype WatchCallback<T> = (\n  value: T,\n  oldValue: T,\n  onCleanup: (cleanupFn: () => void) => void\n) => void\n\ntype WatchSource<T> =\n  | Ref<T> // ref\n  | (() => T) // getter  一个函数返回一个值\n  | T extends object   // 一个对象  \n  ? T\n  : never // 响应式对象\n\ninterface WatchOptions extends WatchEffectOptions {\n  immediate?: boolean // 默认：false\n  deep?: boolean // 默认：false\n  flush?: 'pre' | 'post' | 'sync' // 默认：'pre'\n  onTrack?: (event: DebuggerEvent) => void\n  onTrigger?: (event: DebuggerEvent) => void\n}\n```\n\n- immediate： 在执行器创建时就执行\n- deep： 如果时对象进行深度遍历\n- flush：回调的刷新时机\n- onTrack： 侦听侦听器的依赖\n- onTrigger：侦听侦听器的依赖\n\n# 响应式工具函数\n\n## isRef()\n\n检查某个值是否是`ref`返回`true/false`\n\n## unref()\n\n如果参数是`ref`则返回內部值`.value`,如果不是则返回它自身\n\n## toRef()\n\n基于响应式对象的属性, 创建一个对应的`ref对象`,修改响应式对象上属性的值,将更新`ref对象`的值,反之亦然\n\n## toRefs()\n\n将响应式对象转化为普通对象,这个普通对象上每个属性都转化为对应的`ref`, 都是使用的`toRef()`转化\n\n- 只转化可枚举属性,不存在得属性使用`toRef()`\n- 最佳实践为 在组合式函数返回使用`toRefs()`,在使用时**结构/展开**而不丢失其响应式\n\n## isProxy()\n\n检查对象是否是 `reactive()、readonly()、shallowReactive() 或 shallowReadonly()`创建的响应式对象,返回`true/false`\n\n## isReactive()\n\n检查对象是否由`reactive(), shallowReactive()`创建得响应式对象,返回`true/false`\n\n## isReadonly()\n\n检查对象是否由`readonly(), shallowReadonly()`创建得响应式对象,返回`true/false`\n\n- readonly, shallowReadonly是没有`set`的`computed`的`Ref`\n\n# 响应式的进阶\n\n## shallowRef()\n\n只会对`.value`的访问进行响应式,不会对其属性进行递归深层递归变为响应式\n\n## triggerRef()\n\n强制触发一个`shallowRef()`对象属性的值改变,监测是递归的\n\n## customRef()\n\n自定义一个`Ref`, 自定义其响应式的 **追踪依赖** 以及 **更新触发**\n\n```js\nfunction customRef<T>(factory: CustomRefFactory<T>): Ref<T>\n\ntype CustomRefFactory<T> = (\n  track: () => void,\n  trigger: () => void\n) => {\n  get: () => T\n  set: (value: T) => void\n}\n```\n\n- 参数为`track`和`trigger`, 一般 `track`实在 `get`中执行，`trigger`是在`set`中执行, 自己控制 依赖追踪 和 触发更新的时机\n- `get/set` 函数中可以使用异步\n\n## shallowReactive\n\n只对对象的根属性进行响应式,不会进行深层次的处理, 意味着值为`ref`的属性不会**自动解包**(template中解包)\n\n## shallowReadonly\n\n只对对象的根属性进行响应式只读,不会进行深层次的处理, 意味着值为`ref`的属性不会**自动解包**(template中解包),\n对其非根属性可以进行改写但是是非响应式的\n\n## toRaw\n\n`toRaw()`可返回一个`reactive(), readonly(), shallowReactive(), shallowReadonly()`得原始对象\n\n- `toRaw()`返回得对象,读取不会影响跟踪依赖/代理访问,写入不会影响更新\n- 不建议保持对原始对应得保持使用,谨慎使用\n\n## markRaw\n\n`markRaw()`标记一个对象不可被代理,返回该对象本身\n\n## effectScope\n\n创建一个`effect`的作用域,对副作用`(computed, watch, watchEffect)`进行统一处理\n\n```js\nconst scope = effectScope()\n\nscope.run(() => {\n  const doubled = computed(() => counter.value * 2)\n\n  watch(doubled, () => console.log(doubled.value))\n\n  watchEffect(() => console.log('Count: ', doubled.value))\n})\n\n// 处理掉当前作用域内的所有 effect\nscope.stop()\n```\n\n## getCurrentScope\n\n返回当前活跃的`effectScope`\n\n```js\nfunction getCurrentScope(): EffectScope | undefined\n```\n\n## onScopeDispose\n\n在当前或与的`effectScope`作用域上注册一个回调函数,当前的`effect`作用域停止时会回调这个函数\n\n```js\nfunction onScopeDispose(fn: () => void): void\n```\n","source":"_posts/2022-12-02-vue3-composition-api.md","raw":"---\ntitle: vue3-composition-api\ncatalog: true\ncomments: true\nindexing: true\nheader-img: ../../../../img/default.jpg\ntop: false\ntocnum: true\ndate: 2022-12-02 10:09:41\nsubtitle:\ntags:\n- vue3\ncategories:\n- composition\n---\n\n# Vue3 响应式原理\n\n## ref & reactive\n\n`ref`使用`getter / setter` 劫持数据。\n\n```js\nfunction ref(value) {\n    const refObject= {\n        get value() {\n            track(refObject, 'value');\n            return value;\n        },\n        set value(newValue) {\n            value = newValue;\n            trigger(refObject, 'value');\n        }\n    }\n    return refObject;\n}\n```\n\n`reactive`使用 `Proxy` 劫持数据。\n\n```js\nfunction reactive (obj) {\n    return new Proxy(obj, {\n        get(target, key) {\n            track(target, key);\n            return target[key];\n        },\n        set(target, key, value) {\n            target[key] = value;\n            trigger(target, key);\n        }\n    })\n}\n```\n\n## track 跟踪\n\n```js\nlet activeEffect;\n\nfunction track(target, key) {\n    if ( activeEffect ) {\n        const effects = getSubscriberForProperty(target, key);\n        effects.add(activeEffect);\n    }\n}\n```\n\n## trigger 触发\n\n```js\nfunction trigger(target, key) {\n    const effects = getSubscriberForProperty(target, key);\n    effects.forEach(effect => effect());\n}\n```\n\n## watchEffect  响应式副作用\n\n```js\nimport { ref, watchEffect } from 'vue'\n\nconst A0 = ref(0)\nconst A1 = ref(1)\nconst A2 = ref()\n\nwatchEffect(() => {\n  // 追踪 A0 和 A1\n  A2.value = A0.value + A1.value\n})\n\n// 将触发副作用\nA0.value = 2\n```\n\n`ref`或者`reactive`创建响应式对象,通过`watchEffect`获取响应式副作用,从而达到响应式的目的。\n\n# 响应式的核心\n\n## ref\n\n- 接收任何类型的值\n- 返回一个`get/set`包含响应式的`.value`的对象\n- 如果`value`是集合类型会自动使用`reactive`进行响应式的转化\n\n### ref的解包\n\n- 作为顶层属性被访问时,会自动解包,不需要`.value`,如果不做为上下文的顶级属性时,不会自动解包\n- 在响应式对象中会自动解包，表现得跟一般属性一致\n\n```js\nconst count = ref(0)\nconst state = reactive({\n  count\n})\n\nconsole.log(state.count) // 0\n\nstate.count = 1\nconsole.log(count.value) // 1\n```\n\n- `ref`在数组和集合的响应式类型中不会解包\n\n```js\nconst books = reactive([ref('Vue 3 Guide')])\n// 这里需要 .value\nconsole.log(books[0].value)\n\nconst map = reactive(new Map([['count', ref(0)]]))\n// 这里需要 .value\nconsole.log(map.get('count').value)\n```\n\n## reactive\n\n- 接收 `array`, `object`, `map`, `set` 这样的对象集合类型\n- vue通过属性的响应式追踪,如果更改了对象集合类型的引用，会导致响应式的丢失\n\n```ts\nconst state = reactive({ count: 0 })\n\n// n 是一个局部变量，同 state.count\n// 失去响应性连接\nlet n = state.count\n// 不影响原始的 state\nn++\n\n// count 也和 state.count 失去了响应性连接\nlet { count } = state\n// 不会影响原始的 state\ncount++\n\n// 该函数接收一个普通数字，并且\n// 将无法跟踪 state.count 的变化\ncallSomeFunction(state.count)\n\n```\n\n## computed 计算属性\n\n- `computed`期望接收一个`getter`函数,返回一个 **计算属性的ref**\n- `computed`自动追踪函数内的响应式依赖\n- `computed`计算属性基于响应式依赖的缓存,当依赖没有被改变,不会去主动执行`getter`函数\n- `computed`默认只有`get`,我们也可以设置`set`变成一个可写的计算属性\n- `computed`的`get`中不要包含其他的副作用, 请求以及操作DOM\n\n## watchEffect 侦听器\n\n立即运行一个函数,同时响应式的跟踪其依赖,并当依赖更新时重新运行函数\n\n### 类型\n\n```ts\nfunction watchEffect(\n  effect: (onCleanup: OnCleanup) => void,\n  options?: WatchEffectOptions\n): StopHandle\n\ntype OnCleanup = (cleanupFn: () => void) => void\n\ninterface WatchEffectOptions {\n  flush?: 'pre' | 'post' | 'sync' // 默认：'pre'\n  onTrack?: (event: DebuggerEvent) => void\n  onTrigger?: (event: DebuggerEvent) => void\n}\n\ntype StopHandle = () => void\n```\n\n- `effect`: 要执行的副作用函数,这个函数也包含一个参数,这个参数再下一次调用前被执行,用于执行清除无效的副作用\n- `options`: 可选参数,用来调整副作用的刷新时机以及调试依赖\n  - `flush`: 侦听器执行时机\n    - pre: 组件渲染前执行\n    - post: 延迟到渲染后执行\n    - sync: 响应依赖发生改变后立马执行\n  - onTrack:\n  - onTrigger:\n- `StopHandle`: 停止副作用函数\n\n## watch\n\n```js\n// 侦听单个来源\nfunction watch<T>(\n  source: WatchSource<T>,\n  callback: WatchCallback<T>,\n  options?: WatchOptions\n): StopHandle\n\n// 侦听多个来源\nfunction watch<T>(\n  sources: WatchSource<T>[],\n  callback: WatchCallback<T[]>,\n  options?: WatchOptions\n): StopHandle\n\ntype WatchCallback<T> = (\n  value: T,\n  oldValue: T,\n  onCleanup: (cleanupFn: () => void) => void\n) => void\n\ntype WatchSource<T> =\n  | Ref<T> // ref\n  | (() => T) // getter  一个函数返回一个值\n  | T extends object   // 一个对象  \n  ? T\n  : never // 响应式对象\n\ninterface WatchOptions extends WatchEffectOptions {\n  immediate?: boolean // 默认：false\n  deep?: boolean // 默认：false\n  flush?: 'pre' | 'post' | 'sync' // 默认：'pre'\n  onTrack?: (event: DebuggerEvent) => void\n  onTrigger?: (event: DebuggerEvent) => void\n}\n```\n\n- immediate： 在执行器创建时就执行\n- deep： 如果时对象进行深度遍历\n- flush：回调的刷新时机\n- onTrack： 侦听侦听器的依赖\n- onTrigger：侦听侦听器的依赖\n\n# 响应式工具函数\n\n## isRef()\n\n检查某个值是否是`ref`返回`true/false`\n\n## unref()\n\n如果参数是`ref`则返回內部值`.value`,如果不是则返回它自身\n\n## toRef()\n\n基于响应式对象的属性, 创建一个对应的`ref对象`,修改响应式对象上属性的值,将更新`ref对象`的值,反之亦然\n\n## toRefs()\n\n将响应式对象转化为普通对象,这个普通对象上每个属性都转化为对应的`ref`, 都是使用的`toRef()`转化\n\n- 只转化可枚举属性,不存在得属性使用`toRef()`\n- 最佳实践为 在组合式函数返回使用`toRefs()`,在使用时**结构/展开**而不丢失其响应式\n\n## isProxy()\n\n检查对象是否是 `reactive()、readonly()、shallowReactive() 或 shallowReadonly()`创建的响应式对象,返回`true/false`\n\n## isReactive()\n\n检查对象是否由`reactive(), shallowReactive()`创建得响应式对象,返回`true/false`\n\n## isReadonly()\n\n检查对象是否由`readonly(), shallowReadonly()`创建得响应式对象,返回`true/false`\n\n- readonly, shallowReadonly是没有`set`的`computed`的`Ref`\n\n# 响应式的进阶\n\n## shallowRef()\n\n只会对`.value`的访问进行响应式,不会对其属性进行递归深层递归变为响应式\n\n## triggerRef()\n\n强制触发一个`shallowRef()`对象属性的值改变,监测是递归的\n\n## customRef()\n\n自定义一个`Ref`, 自定义其响应式的 **追踪依赖** 以及 **更新触发**\n\n```js\nfunction customRef<T>(factory: CustomRefFactory<T>): Ref<T>\n\ntype CustomRefFactory<T> = (\n  track: () => void,\n  trigger: () => void\n) => {\n  get: () => T\n  set: (value: T) => void\n}\n```\n\n- 参数为`track`和`trigger`, 一般 `track`实在 `get`中执行，`trigger`是在`set`中执行, 自己控制 依赖追踪 和 触发更新的时机\n- `get/set` 函数中可以使用异步\n\n## shallowReactive\n\n只对对象的根属性进行响应式,不会进行深层次的处理, 意味着值为`ref`的属性不会**自动解包**(template中解包)\n\n## shallowReadonly\n\n只对对象的根属性进行响应式只读,不会进行深层次的处理, 意味着值为`ref`的属性不会**自动解包**(template中解包),\n对其非根属性可以进行改写但是是非响应式的\n\n## toRaw\n\n`toRaw()`可返回一个`reactive(), readonly(), shallowReactive(), shallowReadonly()`得原始对象\n\n- `toRaw()`返回得对象,读取不会影响跟踪依赖/代理访问,写入不会影响更新\n- 不建议保持对原始对应得保持使用,谨慎使用\n\n## markRaw\n\n`markRaw()`标记一个对象不可被代理,返回该对象本身\n\n## effectScope\n\n创建一个`effect`的作用域,对副作用`(computed, watch, watchEffect)`进行统一处理\n\n```js\nconst scope = effectScope()\n\nscope.run(() => {\n  const doubled = computed(() => counter.value * 2)\n\n  watch(doubled, () => console.log(doubled.value))\n\n  watchEffect(() => console.log('Count: ', doubled.value))\n})\n\n// 处理掉当前作用域内的所有 effect\nscope.stop()\n```\n\n## getCurrentScope\n\n返回当前活跃的`effectScope`\n\n```js\nfunction getCurrentScope(): EffectScope | undefined\n```\n\n## onScopeDispose\n\n在当前或与的`effectScope`作用域上注册一个回调函数,当前的`effect`作用域停止时会回调这个函数\n\n```js\nfunction onScopeDispose(fn: () => void): void\n```\n","slug":"vue3-composition-api","published":1,"updated":"2022-12-07T06:41:19.624Z","_id":"clb5vbljv0000h4v4f2e996ln","layout":"post","photos":[],"link":"","content":"<h1 id=\"Vue3-响应式原理\"><a href=\"#Vue3-响应式原理\" class=\"headerlink\" title=\"Vue3 响应式原理\"></a>Vue3 响应式原理</h1><h2 id=\"ref-amp-reactive\"><a href=\"#ref-amp-reactive\" class=\"headerlink\" title=\"ref &amp; reactive\"></a>ref &amp; reactive</h2><p><code>ref</code>使用<code>getter / setter</code> 劫持数据。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ref</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> refObject= &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span> value() &#123;</span><br><span class=\"line\">            track(refObject, <span class=\"string\">'value'</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"keyword\">set</span> value(newValue) &#123;</span><br><span class=\"line\">            value = newValue;</span><br><span class=\"line\">            trigger(refObject, <span class=\"string\">'value'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> refObject;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>reactive</code>使用 <code>Proxy</code> 劫持数据。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reactive</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(obj, &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span>(target, key) &#123;</span><br><span class=\"line\">            track(target, key);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> target[key];</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"keyword\">set</span>(target, key, value) &#123;</span><br><span class=\"line\">            target[key] = value;</span><br><span class=\"line\">            trigger(target, key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"track-跟踪\"><a href=\"#track-跟踪\" class=\"headerlink\" title=\"track 跟踪\"></a>track 跟踪</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> activeEffect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">track</span>(<span class=\"params\">target, key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( activeEffect ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> effects = getSubscriberForProperty(target, key);</span><br><span class=\"line\">        effects.add(activeEffect);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"trigger-触发\"><a href=\"#trigger-触发\" class=\"headerlink\" title=\"trigger 触发\"></a>trigger 触发</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">trigger</span>(<span class=\"params\">target, key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> effects = getSubscriberForProperty(target, key);</span><br><span class=\"line\">    effects.forEach(<span class=\"function\"><span class=\"params\">effect</span> =&gt;</span> effect());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"watchEffect-响应式副作用\"><a href=\"#watchEffect-响应式副作用\" class=\"headerlink\" title=\"watchEffect  响应式副作用\"></a>watchEffect  响应式副作用</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref, watchEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> A0 = ref(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> A1 = ref(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> A2 = ref()</span><br><span class=\"line\"></span><br><span class=\"line\">watchEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 追踪 A0 和 A1</span></span><br><span class=\"line\">  A2.value = A0.value + A1.value</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将触发副作用</span></span><br><span class=\"line\">A0.value = <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p><code>ref</code>或者<code>reactive</code>创建响应式对象,通过<code>watchEffect</code>获取响应式副作用,从而达到响应式的目的。</p>\n<h1 id=\"响应式的核心\"><a href=\"#响应式的核心\" class=\"headerlink\" title=\"响应式的核心\"></a>响应式的核心</h1><h2 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h2><ul>\n<li>接收任何类型的值</li>\n<li>返回一个<code>get/set</code>包含响应式的<code>.value</code>的对象</li>\n<li>如果<code>value</code>是集合类型会自动使用<code>reactive</code>进行响应式的转化</li>\n</ul>\n<h3 id=\"ref的解包\"><a href=\"#ref的解包\" class=\"headerlink\" title=\"ref的解包\"></a>ref的解包</h3><ul>\n<li>作为顶层属性被访问时,会自动解包,不需要<code>.value</code>,如果不做为上下文的顶级属性时,不会自动解包</li>\n<li>在响应式对象中会自动解包，表现得跟一般属性一致</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> count = ref(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> state = reactive(&#123;</span><br><span class=\"line\">  count</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(state.count) <span class=\"comment\">// 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">state.count = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(count.value) <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>ref</code>在数组和集合的响应式类型中不会解包</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> books = reactive([ref(<span class=\"string\">'Vue 3 Guide'</span>)])</span><br><span class=\"line\"><span class=\"comment\">// 这里需要 .value</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(books[<span class=\"number\">0</span>].value)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> map = reactive(<span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([[<span class=\"string\">'count'</span>, ref(<span class=\"number\">0</span>)]]))</span><br><span class=\"line\"><span class=\"comment\">// 这里需要 .value</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map.get(<span class=\"string\">'count'</span>).value)</span><br></pre></td></tr></table></figure>\n<h2 id=\"reactive\"><a href=\"#reactive\" class=\"headerlink\" title=\"reactive\"></a>reactive</h2><ul>\n<li>接收 <code>array</code>, <code>object</code>, <code>map</code>, <code>set</code> 这样的对象集合类型</li>\n<li>vue通过属性的响应式追踪,如果更改了对象集合类型的引用，会导致响应式的丢失</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> state = reactive(&#123; count: <span class=\"number\">0</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// n 是一个局部变量，同 state.count</span></span><br><span class=\"line\"><span class=\"comment\">// 失去响应性连接</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> n = state.count</span><br><span class=\"line\"><span class=\"comment\">// 不影响原始的 state</span></span><br><span class=\"line\">n++</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// count 也和 state.count 失去了响应性连接</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; count &#125; = state</span><br><span class=\"line\"><span class=\"comment\">// 不会影响原始的 state</span></span><br><span class=\"line\">count++</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 该函数接收一个普通数字，并且</span></span><br><span class=\"line\"><span class=\"comment\">// 将无法跟踪 state.count 的变化</span></span><br><span class=\"line\">callSomeFunction(state.count)</span><br></pre></td></tr></table></figure>\n<h2 id=\"computed-计算属性\"><a href=\"#computed-计算属性\" class=\"headerlink\" title=\"computed 计算属性\"></a>computed 计算属性</h2><ul>\n<li><code>computed</code>期望接收一个<code>getter</code>函数,返回一个 <strong>计算属性的ref</strong></li>\n<li><code>computed</code>自动追踪函数内的响应式依赖</li>\n<li><code>computed</code>计算属性基于响应式依赖的缓存,当依赖没有被改变,不会去主动执行<code>getter</code>函数</li>\n<li><code>computed</code>默认只有<code>get</code>,我们也可以设置<code>set</code>变成一个可写的计算属性</li>\n<li><code>computed</code>的<code>get</code>中不要包含其他的副作用, 请求以及操作DOM</li>\n</ul>\n<h2 id=\"watchEffect-侦听器\"><a href=\"#watchEffect-侦听器\" class=\"headerlink\" title=\"watchEffect 侦听器\"></a>watchEffect 侦听器</h2><p>立即运行一个函数,同时响应式的跟踪其依赖,并当依赖更新时重新运行函数</p>\n<h3 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">watchEffect</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  effect: (onCleanup: OnCleanup) =&gt; <span class=\"built_in\">void</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  options?: WatchEffectOptions</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>): <span class=\"title\">StopHandle</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">type</span> <span class=\"title\">OnCleanup</span> = (<span class=\"params\">cleanupFn: () =&gt; <span class=\"built_in\">void</span></span>) =&gt; <span class=\"title\">void</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">interface</span> <span class=\"title\">WatchEffectOptions</span> </span>&#123;</span><br><span class=\"line\">  flush?: <span class=\"string\">'pre'</span> | <span class=\"string\">'post'</span> | <span class=\"string\">'sync'</span> <span class=\"comment\">// 默认：'pre'</span></span><br><span class=\"line\">  onTrack?: <span class=\"function\">(<span class=\"params\">event: DebuggerEvent</span>) =&gt;</span> <span class=\"built_in\">void</span></span><br><span class=\"line\">  onTrigger?: <span class=\"function\">(<span class=\"params\">event: DebuggerEvent</span>) =&gt;</span> <span class=\"built_in\">void</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> StopHandle = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">void</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>effect</code>: 要执行的副作用函数,这个函数也包含一个参数,这个参数再下一次调用前被执行,用于执行清除无效的副作用</li>\n<li><code>options</code>: 可选参数,用来调整副作用的刷新时机以及调试依赖<ul>\n<li><code>flush</code>: 侦听器执行时机<ul>\n<li>pre: 组件渲染前执行</li>\n<li>post: 延迟到渲染后执行</li>\n<li>sync: 响应依赖发生改变后立马执行</li>\n</ul>\n</li>\n<li>onTrack:</li>\n<li>onTrigger:</li>\n</ul>\n</li>\n<li><code>StopHandle</code>: 停止副作用函数</li>\n</ul>\n<h2 id=\"watch\"><a href=\"#watch\" class=\"headerlink\" title=\"watch\"></a>watch</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 侦听单个来源</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">watch</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  source: WatchSource&lt;T&gt;,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  callback: WatchCallback&lt;T&gt;,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  options?: WatchOptions</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>): <span class=\"title\">StopHandle</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">// 侦听多个来源</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">function</span> <span class=\"title\">watch</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  sources: WatchSource&lt;T&gt;[],</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  callback: WatchCallback&lt;T[]&gt;,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  options?: WatchOptions</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>): <span class=\"title\">StopHandle</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">type</span> <span class=\"title\">WatchCallback</span>&lt;<span class=\"title\">T</span>&gt; = (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  value: T,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  oldValue: T,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  onCleanup: (cleanupFn: (</span>) =&gt; <span class=\"title\">void</span>) =&gt; <span class=\"title\">void</span></span></span><br><span class=\"line\"><span class=\"function\">) =&gt; <span class=\"title\">void</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">type</span> <span class=\"title\">WatchSource</span>&lt;<span class=\"title\">T</span>&gt; =</span></span><br><span class=\"line\"><span class=\"function\">  | <span class=\"title\">Ref</span>&lt;<span class=\"title\">T</span>&gt; // <span class=\"title\">ref</span></span></span><br><span class=\"line\"><span class=\"function\">  | (<span class=\"params\">(</span>) =&gt; <span class=\"title\">T</span>) // <span class=\"title\">getter</span>  一个函数返回一个值</span></span><br><span class=\"line\"><span class=\"function\">  | <span class=\"title\">T</span> <span class=\"title\">extends</span> <span class=\"title\">object</span>   // 一个对象  </span></span><br><span class=\"line\"><span class=\"function\">  ? <span class=\"title\">T</span></span></span><br><span class=\"line\"><span class=\"function\">  : <span class=\"title\">never</span> // 响应式对象</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">interface</span> <span class=\"title\">WatchOptions</span> <span class=\"title\">extends</span> <span class=\"title\">WatchEffectOptions</span> </span>&#123;</span><br><span class=\"line\">  immediate?: boolean <span class=\"comment\">// 默认：false</span></span><br><span class=\"line\">  deep?: boolean <span class=\"comment\">// 默认：false</span></span><br><span class=\"line\">  flush?: <span class=\"string\">'pre'</span> | <span class=\"string\">'post'</span> | <span class=\"string\">'sync'</span> <span class=\"comment\">// 默认：'pre'</span></span><br><span class=\"line\">  onTrack?: <span class=\"function\">(<span class=\"params\">event: DebuggerEvent</span>) =&gt;</span> <span class=\"keyword\">void</span></span><br><span class=\"line\">  onTrigger?: <span class=\"function\">(<span class=\"params\">event: DebuggerEvent</span>) =&gt;</span> <span class=\"keyword\">void</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>immediate： 在执行器创建时就执行</li>\n<li>deep： 如果时对象进行深度遍历</li>\n<li>flush：回调的刷新时机</li>\n<li>onTrack： 侦听侦听器的依赖</li>\n<li>onTrigger：侦听侦听器的依赖</li>\n</ul>\n<h1 id=\"响应式工具函数\"><a href=\"#响应式工具函数\" class=\"headerlink\" title=\"响应式工具函数\"></a>响应式工具函数</h1><h2 id=\"isRef\"><a href=\"#isRef\" class=\"headerlink\" title=\"isRef()\"></a>isRef()</h2><p>检查某个值是否是<code>ref</code>返回<code>true/false</code></p>\n<h2 id=\"unref\"><a href=\"#unref\" class=\"headerlink\" title=\"unref()\"></a>unref()</h2><p>如果参数是<code>ref</code>则返回內部值<code>.value</code>,如果不是则返回它自身</p>\n<h2 id=\"toRef\"><a href=\"#toRef\" class=\"headerlink\" title=\"toRef()\"></a>toRef()</h2><p>基于响应式对象的属性, 创建一个对应的<code>ref对象</code>,修改响应式对象上属性的值,将更新<code>ref对象</code>的值,反之亦然</p>\n<h2 id=\"toRefs\"><a href=\"#toRefs\" class=\"headerlink\" title=\"toRefs()\"></a>toRefs()</h2><p>将响应式对象转化为普通对象,这个普通对象上每个属性都转化为对应的<code>ref</code>, 都是使用的<code>toRef()</code>转化</p>\n<ul>\n<li>只转化可枚举属性,不存在得属性使用<code>toRef()</code></li>\n<li>最佳实践为 在组合式函数返回使用<code>toRefs()</code>,在使用时<strong>结构/展开</strong>而不丢失其响应式</li>\n</ul>\n<h2 id=\"isProxy\"><a href=\"#isProxy\" class=\"headerlink\" title=\"isProxy()\"></a>isProxy()</h2><p>检查对象是否是 <code>reactive()、readonly()、shallowReactive() 或 shallowReadonly()</code>创建的响应式对象,返回<code>true/false</code></p>\n<h2 id=\"isReactive\"><a href=\"#isReactive\" class=\"headerlink\" title=\"isReactive()\"></a>isReactive()</h2><p>检查对象是否由<code>reactive(), shallowReactive()</code>创建得响应式对象,返回<code>true/false</code></p>\n<h2 id=\"isReadonly\"><a href=\"#isReadonly\" class=\"headerlink\" title=\"isReadonly()\"></a>isReadonly()</h2><p>检查对象是否由<code>readonly(), shallowReadonly()</code>创建得响应式对象,返回<code>true/false</code></p>\n<ul>\n<li>readonly, shallowReadonly是没有<code>set</code>的<code>computed</code>的<code>Ref</code></li>\n</ul>\n<h1 id=\"响应式的进阶\"><a href=\"#响应式的进阶\" class=\"headerlink\" title=\"响应式的进阶\"></a>响应式的进阶</h1><h2 id=\"shallowRef\"><a href=\"#shallowRef\" class=\"headerlink\" title=\"shallowRef()\"></a>shallowRef()</h2><p>只会对<code>.value</code>的访问进行响应式,不会对其属性进行递归深层递归变为响应式</p>\n<h2 id=\"triggerRef\"><a href=\"#triggerRef\" class=\"headerlink\" title=\"triggerRef()\"></a>triggerRef()</h2><p>强制触发一个<code>shallowRef()</code>对象属性的值改变,监测是递归的</p>\n<h2 id=\"customRef\"><a href=\"#customRef\" class=\"headerlink\" title=\"customRef()\"></a>customRef()</h2><p>自定义一个<code>Ref</code>, 自定义其响应式的 <strong>追踪依赖</strong> 以及 <strong>更新触发</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">customRef</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">factory: CustomRefFactory&lt;T&gt;</span>): <span class=\"title\">Ref</span>&lt;<span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">type</span> <span class=\"title\">CustomRefFactory</span>&lt;<span class=\"title\">T</span>&gt; = (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  track: (</span>) =&gt; <span class=\"title\">void</span>,</span></span><br><span class=\"line\"><span class=\"function\">  <span class=\"title\">trigger</span>: (<span class=\"params\"></span>) =&gt; <span class=\"title\">void</span></span></span><br><span class=\"line\"><span class=\"function\">) =&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>: () =&gt; T</span><br><span class=\"line\">  <span class=\"keyword\">set</span>: (value: T) =&gt; void</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>参数为<code>track</code>和<code>trigger</code>, 一般 <code>track</code>实在 <code>get</code>中执行，<code>trigger</code>是在<code>set</code>中执行, 自己控制 依赖追踪 和 触发更新的时机</li>\n<li><code>get/set</code> 函数中可以使用异步</li>\n</ul>\n<h2 id=\"shallowReactive\"><a href=\"#shallowReactive\" class=\"headerlink\" title=\"shallowReactive\"></a>shallowReactive</h2><p>只对对象的根属性进行响应式,不会进行深层次的处理, 意味着值为<code>ref</code>的属性不会<strong>自动解包</strong>(template中解包)</p>\n<h2 id=\"shallowReadonly\"><a href=\"#shallowReadonly\" class=\"headerlink\" title=\"shallowReadonly\"></a>shallowReadonly</h2><p>只对对象的根属性进行响应式只读,不会进行深层次的处理, 意味着值为<code>ref</code>的属性不会<strong>自动解包</strong>(template中解包),<br>对其非根属性可以进行改写但是是非响应式的</p>\n<h2 id=\"toRaw\"><a href=\"#toRaw\" class=\"headerlink\" title=\"toRaw\"></a>toRaw</h2><p><code>toRaw()</code>可返回一个<code>reactive(), readonly(), shallowReactive(), shallowReadonly()</code>得原始对象</p>\n<ul>\n<li><code>toRaw()</code>返回得对象,读取不会影响跟踪依赖/代理访问,写入不会影响更新</li>\n<li>不建议保持对原始对应得保持使用,谨慎使用</li>\n</ul>\n<h2 id=\"markRaw\"><a href=\"#markRaw\" class=\"headerlink\" title=\"markRaw\"></a>markRaw</h2><p><code>markRaw()</code>标记一个对象不可被代理,返回该对象本身</p>\n<h2 id=\"effectScope\"><a href=\"#effectScope\" class=\"headerlink\" title=\"effectScope\"></a>effectScope</h2><p>创建一个<code>effect</code>的作用域,对副作用<code>(computed, watch, watchEffect)</code>进行统一处理</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> scope = effectScope()</span><br><span class=\"line\"></span><br><span class=\"line\">scope.run(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> doubled = computed(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> counter.value * <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  watch(doubled, () =&gt; <span class=\"built_in\">console</span>.log(doubled.value))</span><br><span class=\"line\"></span><br><span class=\"line\">  watchEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'Count: '</span>, doubled.value))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 处理掉当前作用域内的所有 effect</span></span><br><span class=\"line\">scope.stop()</span><br></pre></td></tr></table></figure>\n<h2 id=\"getCurrentScope\"><a href=\"#getCurrentScope\" class=\"headerlink\" title=\"getCurrentScope\"></a>getCurrentScope</h2><p>返回当前活跃的<code>effectScope</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCurrentScope</span>(<span class=\"params\"></span>): <span class=\"title\">EffectScope</span> | <span class=\"title\">undefined</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"onScopeDispose\"><a href=\"#onScopeDispose\" class=\"headerlink\" title=\"onScopeDispose\"></a>onScopeDispose</h2><p>在当前或与的<code>effectScope</code>作用域上注册一个回调函数,当前的<code>effect</code>作用域停止时会回调这个函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onScopeDispose</span>(<span class=\"params\">fn: (</span>) =&gt; <span class=\"title\">void</span>): <span class=\"title\">void</span></span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Vue3-响应式原理\"><a href=\"#Vue3-响应式原理\" class=\"headerlink\" title=\"Vue3 响应式原理\"></a>Vue3 响应式原理</h1><h2 id=\"ref-amp-reactive\"><a href=\"#ref-amp-reactive\" class=\"headerlink\" title=\"ref &amp; reactive\"></a>ref &amp; reactive</h2><p><code>ref</code>使用<code>getter / setter</code> 劫持数据。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ref</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> refObject= &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span> value() &#123;</span><br><span class=\"line\">            track(refObject, <span class=\"string\">'value'</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"keyword\">set</span> value(newValue) &#123;</span><br><span class=\"line\">            value = newValue;</span><br><span class=\"line\">            trigger(refObject, <span class=\"string\">'value'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> refObject;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>reactive</code>使用 <code>Proxy</code> 劫持数据。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reactive</span> (<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(obj, &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span>(target, key) &#123;</span><br><span class=\"line\">            track(target, key);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> target[key];</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"keyword\">set</span>(target, key, value) &#123;</span><br><span class=\"line\">            target[key] = value;</span><br><span class=\"line\">            trigger(target, key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"track-跟踪\"><a href=\"#track-跟踪\" class=\"headerlink\" title=\"track 跟踪\"></a>track 跟踪</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> activeEffect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">track</span>(<span class=\"params\">target, key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( activeEffect ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> effects = getSubscriberForProperty(target, key);</span><br><span class=\"line\">        effects.add(activeEffect);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"trigger-触发\"><a href=\"#trigger-触发\" class=\"headerlink\" title=\"trigger 触发\"></a>trigger 触发</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">trigger</span>(<span class=\"params\">target, key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> effects = getSubscriberForProperty(target, key);</span><br><span class=\"line\">    effects.forEach(<span class=\"function\"><span class=\"params\">effect</span> =&gt;</span> effect());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"watchEffect-响应式副作用\"><a href=\"#watchEffect-响应式副作用\" class=\"headerlink\" title=\"watchEffect  响应式副作用\"></a>watchEffect  响应式副作用</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref, watchEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> A0 = ref(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> A1 = ref(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> A2 = ref()</span><br><span class=\"line\"></span><br><span class=\"line\">watchEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 追踪 A0 和 A1</span></span><br><span class=\"line\">  A2.value = A0.value + A1.value</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将触发副作用</span></span><br><span class=\"line\">A0.value = <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p><code>ref</code>或者<code>reactive</code>创建响应式对象,通过<code>watchEffect</code>获取响应式副作用,从而达到响应式的目的。</p>\n<h1 id=\"响应式的核心\"><a href=\"#响应式的核心\" class=\"headerlink\" title=\"响应式的核心\"></a>响应式的核心</h1><h2 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h2><ul>\n<li>接收任何类型的值</li>\n<li>返回一个<code>get/set</code>包含响应式的<code>.value</code>的对象</li>\n<li>如果<code>value</code>是集合类型会自动使用<code>reactive</code>进行响应式的转化</li>\n</ul>\n<h3 id=\"ref的解包\"><a href=\"#ref的解包\" class=\"headerlink\" title=\"ref的解包\"></a>ref的解包</h3><ul>\n<li>作为顶层属性被访问时,会自动解包,不需要<code>.value</code>,如果不做为上下文的顶级属性时,不会自动解包</li>\n<li>在响应式对象中会自动解包，表现得跟一般属性一致</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> count = ref(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> state = reactive(&#123;</span><br><span class=\"line\">  count</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(state.count) <span class=\"comment\">// 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">state.count = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(count.value) <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>ref</code>在数组和集合的响应式类型中不会解包</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> books = reactive([ref(<span class=\"string\">'Vue 3 Guide'</span>)])</span><br><span class=\"line\"><span class=\"comment\">// 这里需要 .value</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(books[<span class=\"number\">0</span>].value)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> map = reactive(<span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([[<span class=\"string\">'count'</span>, ref(<span class=\"number\">0</span>)]]))</span><br><span class=\"line\"><span class=\"comment\">// 这里需要 .value</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map.get(<span class=\"string\">'count'</span>).value)</span><br></pre></td></tr></table></figure>\n<h2 id=\"reactive\"><a href=\"#reactive\" class=\"headerlink\" title=\"reactive\"></a>reactive</h2><ul>\n<li>接收 <code>array</code>, <code>object</code>, <code>map</code>, <code>set</code> 这样的对象集合类型</li>\n<li>vue通过属性的响应式追踪,如果更改了对象集合类型的引用，会导致响应式的丢失</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> state = reactive(&#123; count: <span class=\"number\">0</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// n 是一个局部变量，同 state.count</span></span><br><span class=\"line\"><span class=\"comment\">// 失去响应性连接</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> n = state.count</span><br><span class=\"line\"><span class=\"comment\">// 不影响原始的 state</span></span><br><span class=\"line\">n++</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// count 也和 state.count 失去了响应性连接</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; count &#125; = state</span><br><span class=\"line\"><span class=\"comment\">// 不会影响原始的 state</span></span><br><span class=\"line\">count++</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 该函数接收一个普通数字，并且</span></span><br><span class=\"line\"><span class=\"comment\">// 将无法跟踪 state.count 的变化</span></span><br><span class=\"line\">callSomeFunction(state.count)</span><br></pre></td></tr></table></figure>\n<h2 id=\"computed-计算属性\"><a href=\"#computed-计算属性\" class=\"headerlink\" title=\"computed 计算属性\"></a>computed 计算属性</h2><ul>\n<li><code>computed</code>期望接收一个<code>getter</code>函数,返回一个 <strong>计算属性的ref</strong></li>\n<li><code>computed</code>自动追踪函数内的响应式依赖</li>\n<li><code>computed</code>计算属性基于响应式依赖的缓存,当依赖没有被改变,不会去主动执行<code>getter</code>函数</li>\n<li><code>computed</code>默认只有<code>get</code>,我们也可以设置<code>set</code>变成一个可写的计算属性</li>\n<li><code>computed</code>的<code>get</code>中不要包含其他的副作用, 请求以及操作DOM</li>\n</ul>\n<h2 id=\"watchEffect-侦听器\"><a href=\"#watchEffect-侦听器\" class=\"headerlink\" title=\"watchEffect 侦听器\"></a>watchEffect 侦听器</h2><p>立即运行一个函数,同时响应式的跟踪其依赖,并当依赖更新时重新运行函数</p>\n<h3 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h3><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">watchEffect</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  effect: (onCleanup: OnCleanup) =&gt; <span class=\"built_in\">void</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  options?: WatchEffectOptions</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>): <span class=\"title\">StopHandle</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">type</span> <span class=\"title\">OnCleanup</span> = (<span class=\"params\">cleanupFn: () =&gt; <span class=\"built_in\">void</span></span>) =&gt; <span class=\"title\">void</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">interface</span> <span class=\"title\">WatchEffectOptions</span> </span>&#123;</span><br><span class=\"line\">  flush?: <span class=\"string\">'pre'</span> | <span class=\"string\">'post'</span> | <span class=\"string\">'sync'</span> <span class=\"comment\">// 默认：'pre'</span></span><br><span class=\"line\">  onTrack?: <span class=\"function\">(<span class=\"params\">event: DebuggerEvent</span>) =&gt;</span> <span class=\"built_in\">void</span></span><br><span class=\"line\">  onTrigger?: <span class=\"function\">(<span class=\"params\">event: DebuggerEvent</span>) =&gt;</span> <span class=\"built_in\">void</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> StopHandle = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">void</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>effect</code>: 要执行的副作用函数,这个函数也包含一个参数,这个参数再下一次调用前被执行,用于执行清除无效的副作用</li>\n<li><code>options</code>: 可选参数,用来调整副作用的刷新时机以及调试依赖<ul>\n<li><code>flush</code>: 侦听器执行时机<ul>\n<li>pre: 组件渲染前执行</li>\n<li>post: 延迟到渲染后执行</li>\n<li>sync: 响应依赖发生改变后立马执行</li>\n</ul>\n</li>\n<li>onTrack:</li>\n<li>onTrigger:</li>\n</ul>\n</li>\n<li><code>StopHandle</code>: 停止副作用函数</li>\n</ul>\n<h2 id=\"watch\"><a href=\"#watch\" class=\"headerlink\" title=\"watch\"></a>watch</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 侦听单个来源</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">watch</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  source: WatchSource&lt;T&gt;,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  callback: WatchCallback&lt;T&gt;,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  options?: WatchOptions</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>): <span class=\"title\">StopHandle</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">// 侦听多个来源</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">function</span> <span class=\"title\">watch</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  sources: WatchSource&lt;T&gt;[],</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  callback: WatchCallback&lt;T[]&gt;,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  options?: WatchOptions</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>): <span class=\"title\">StopHandle</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">type</span> <span class=\"title\">WatchCallback</span>&lt;<span class=\"title\">T</span>&gt; = (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  value: T,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  oldValue: T,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  onCleanup: (cleanupFn: (</span>) =&gt; <span class=\"title\">void</span>) =&gt; <span class=\"title\">void</span></span></span><br><span class=\"line\"><span class=\"function\">) =&gt; <span class=\"title\">void</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">type</span> <span class=\"title\">WatchSource</span>&lt;<span class=\"title\">T</span>&gt; =</span></span><br><span class=\"line\"><span class=\"function\">  | <span class=\"title\">Ref</span>&lt;<span class=\"title\">T</span>&gt; // <span class=\"title\">ref</span></span></span><br><span class=\"line\"><span class=\"function\">  | (<span class=\"params\">(</span>) =&gt; <span class=\"title\">T</span>) // <span class=\"title\">getter</span>  一个函数返回一个值</span></span><br><span class=\"line\"><span class=\"function\">  | <span class=\"title\">T</span> <span class=\"title\">extends</span> <span class=\"title\">object</span>   // 一个对象  </span></span><br><span class=\"line\"><span class=\"function\">  ? <span class=\"title\">T</span></span></span><br><span class=\"line\"><span class=\"function\">  : <span class=\"title\">never</span> // 响应式对象</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">interface</span> <span class=\"title\">WatchOptions</span> <span class=\"title\">extends</span> <span class=\"title\">WatchEffectOptions</span> </span>&#123;</span><br><span class=\"line\">  immediate?: boolean <span class=\"comment\">// 默认：false</span></span><br><span class=\"line\">  deep?: boolean <span class=\"comment\">// 默认：false</span></span><br><span class=\"line\">  flush?: <span class=\"string\">'pre'</span> | <span class=\"string\">'post'</span> | <span class=\"string\">'sync'</span> <span class=\"comment\">// 默认：'pre'</span></span><br><span class=\"line\">  onTrack?: <span class=\"function\">(<span class=\"params\">event: DebuggerEvent</span>) =&gt;</span> <span class=\"keyword\">void</span></span><br><span class=\"line\">  onTrigger?: <span class=\"function\">(<span class=\"params\">event: DebuggerEvent</span>) =&gt;</span> <span class=\"keyword\">void</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>immediate： 在执行器创建时就执行</li>\n<li>deep： 如果时对象进行深度遍历</li>\n<li>flush：回调的刷新时机</li>\n<li>onTrack： 侦听侦听器的依赖</li>\n<li>onTrigger：侦听侦听器的依赖</li>\n</ul>\n<h1 id=\"响应式工具函数\"><a href=\"#响应式工具函数\" class=\"headerlink\" title=\"响应式工具函数\"></a>响应式工具函数</h1><h2 id=\"isRef\"><a href=\"#isRef\" class=\"headerlink\" title=\"isRef()\"></a>isRef()</h2><p>检查某个值是否是<code>ref</code>返回<code>true/false</code></p>\n<h2 id=\"unref\"><a href=\"#unref\" class=\"headerlink\" title=\"unref()\"></a>unref()</h2><p>如果参数是<code>ref</code>则返回內部值<code>.value</code>,如果不是则返回它自身</p>\n<h2 id=\"toRef\"><a href=\"#toRef\" class=\"headerlink\" title=\"toRef()\"></a>toRef()</h2><p>基于响应式对象的属性, 创建一个对应的<code>ref对象</code>,修改响应式对象上属性的值,将更新<code>ref对象</code>的值,反之亦然</p>\n<h2 id=\"toRefs\"><a href=\"#toRefs\" class=\"headerlink\" title=\"toRefs()\"></a>toRefs()</h2><p>将响应式对象转化为普通对象,这个普通对象上每个属性都转化为对应的<code>ref</code>, 都是使用的<code>toRef()</code>转化</p>\n<ul>\n<li>只转化可枚举属性,不存在得属性使用<code>toRef()</code></li>\n<li>最佳实践为 在组合式函数返回使用<code>toRefs()</code>,在使用时<strong>结构/展开</strong>而不丢失其响应式</li>\n</ul>\n<h2 id=\"isProxy\"><a href=\"#isProxy\" class=\"headerlink\" title=\"isProxy()\"></a>isProxy()</h2><p>检查对象是否是 <code>reactive()、readonly()、shallowReactive() 或 shallowReadonly()</code>创建的响应式对象,返回<code>true/false</code></p>\n<h2 id=\"isReactive\"><a href=\"#isReactive\" class=\"headerlink\" title=\"isReactive()\"></a>isReactive()</h2><p>检查对象是否由<code>reactive(), shallowReactive()</code>创建得响应式对象,返回<code>true/false</code></p>\n<h2 id=\"isReadonly\"><a href=\"#isReadonly\" class=\"headerlink\" title=\"isReadonly()\"></a>isReadonly()</h2><p>检查对象是否由<code>readonly(), shallowReadonly()</code>创建得响应式对象,返回<code>true/false</code></p>\n<ul>\n<li>readonly, shallowReadonly是没有<code>set</code>的<code>computed</code>的<code>Ref</code></li>\n</ul>\n<h1 id=\"响应式的进阶\"><a href=\"#响应式的进阶\" class=\"headerlink\" title=\"响应式的进阶\"></a>响应式的进阶</h1><h2 id=\"shallowRef\"><a href=\"#shallowRef\" class=\"headerlink\" title=\"shallowRef()\"></a>shallowRef()</h2><p>只会对<code>.value</code>的访问进行响应式,不会对其属性进行递归深层递归变为响应式</p>\n<h2 id=\"triggerRef\"><a href=\"#triggerRef\" class=\"headerlink\" title=\"triggerRef()\"></a>triggerRef()</h2><p>强制触发一个<code>shallowRef()</code>对象属性的值改变,监测是递归的</p>\n<h2 id=\"customRef\"><a href=\"#customRef\" class=\"headerlink\" title=\"customRef()\"></a>customRef()</h2><p>自定义一个<code>Ref</code>, 自定义其响应式的 <strong>追踪依赖</strong> 以及 <strong>更新触发</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">customRef</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">factory: CustomRefFactory&lt;T&gt;</span>): <span class=\"title\">Ref</span>&lt;<span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">type</span> <span class=\"title\">CustomRefFactory</span>&lt;<span class=\"title\">T</span>&gt; = (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  track: (</span>) =&gt; <span class=\"title\">void</span>,</span></span><br><span class=\"line\"><span class=\"function\">  <span class=\"title\">trigger</span>: (<span class=\"params\"></span>) =&gt; <span class=\"title\">void</span></span></span><br><span class=\"line\"><span class=\"function\">) =&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>: () =&gt; T</span><br><span class=\"line\">  <span class=\"keyword\">set</span>: (value: T) =&gt; void</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>参数为<code>track</code>和<code>trigger</code>, 一般 <code>track</code>实在 <code>get</code>中执行，<code>trigger</code>是在<code>set</code>中执行, 自己控制 依赖追踪 和 触发更新的时机</li>\n<li><code>get/set</code> 函数中可以使用异步</li>\n</ul>\n<h2 id=\"shallowReactive\"><a href=\"#shallowReactive\" class=\"headerlink\" title=\"shallowReactive\"></a>shallowReactive</h2><p>只对对象的根属性进行响应式,不会进行深层次的处理, 意味着值为<code>ref</code>的属性不会<strong>自动解包</strong>(template中解包)</p>\n<h2 id=\"shallowReadonly\"><a href=\"#shallowReadonly\" class=\"headerlink\" title=\"shallowReadonly\"></a>shallowReadonly</h2><p>只对对象的根属性进行响应式只读,不会进行深层次的处理, 意味着值为<code>ref</code>的属性不会<strong>自动解包</strong>(template中解包),<br>对其非根属性可以进行改写但是是非响应式的</p>\n<h2 id=\"toRaw\"><a href=\"#toRaw\" class=\"headerlink\" title=\"toRaw\"></a>toRaw</h2><p><code>toRaw()</code>可返回一个<code>reactive(), readonly(), shallowReactive(), shallowReadonly()</code>得原始对象</p>\n<ul>\n<li><code>toRaw()</code>返回得对象,读取不会影响跟踪依赖/代理访问,写入不会影响更新</li>\n<li>不建议保持对原始对应得保持使用,谨慎使用</li>\n</ul>\n<h2 id=\"markRaw\"><a href=\"#markRaw\" class=\"headerlink\" title=\"markRaw\"></a>markRaw</h2><p><code>markRaw()</code>标记一个对象不可被代理,返回该对象本身</p>\n<h2 id=\"effectScope\"><a href=\"#effectScope\" class=\"headerlink\" title=\"effectScope\"></a>effectScope</h2><p>创建一个<code>effect</code>的作用域,对副作用<code>(computed, watch, watchEffect)</code>进行统一处理</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> scope = effectScope()</span><br><span class=\"line\"></span><br><span class=\"line\">scope.run(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> doubled = computed(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> counter.value * <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  watch(doubled, () =&gt; <span class=\"built_in\">console</span>.log(doubled.value))</span><br><span class=\"line\"></span><br><span class=\"line\">  watchEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'Count: '</span>, doubled.value))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 处理掉当前作用域内的所有 effect</span></span><br><span class=\"line\">scope.stop()</span><br></pre></td></tr></table></figure>\n<h2 id=\"getCurrentScope\"><a href=\"#getCurrentScope\" class=\"headerlink\" title=\"getCurrentScope\"></a>getCurrentScope</h2><p>返回当前活跃的<code>effectScope</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCurrentScope</span>(<span class=\"params\"></span>): <span class=\"title\">EffectScope</span> | <span class=\"title\">undefined</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"onScopeDispose\"><a href=\"#onScopeDispose\" class=\"headerlink\" title=\"onScopeDispose\"></a>onScopeDispose</h2><p>在当前或与的<code>effectScope</code>作用域上注册一个回调函数,当前的<code>effect</code>作用域停止时会回调这个函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onScopeDispose</span>(<span class=\"params\">fn: (</span>) =&gt; <span class=\"title\">void</span>): <span class=\"title\">void</span></span></span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[{"_id":"source/_posts/2021-07-28-first-day/first-day.jpg","slug":"first-day.jpg","post":"ckrndr93y0000f0v4b2l626aq","modified":0,"renderable":0},{"_id":"source/_posts/2021-08-04-性能优化-webpack优化/cover.png","slug":"cover.png","post":"ckrx47cas0000e4v41dwo1v6z","modified":0,"renderable":0},{"_id":"source/_posts/2021-08-16-设计模式-策略模式/shutterstock.jpg","slug":"shutterstock.jpg","post":"cksfi3i630000cwv44zmq9um3","modified":0,"renderable":0},{"_id":"source/_posts/2021-08-18-设计模式-观察者模式/viewing.jpg","slug":"viewing.jpg","post":"cksh36rqi0000skv4duyzh6ll","modified":0,"renderable":0},{"_id":"source/_posts/2021-08-18-设计模式-设计模式原则/ISP-1.png","slug":"ISP-1.png","post":"cksily6tv0001ccv4cy5i9qgb","modified":0,"renderable":0},{"_id":"source/_posts/2021-08-18-设计模式-设计模式原则/ISP-2.png","slug":"ISP-2.png","post":"cksily6tv0001ccv4cy5i9qgb","modified":0,"renderable":0},{"_id":"source/_posts/2021-08-18-设计模式-设计模式原则/rules.jpg","slug":"rules.jpg","post":"cksily6tv0001ccv4cy5i9qgb","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckrx47cas0000e4v41dwo1v6z","category_id":"cksfp8m3e000ecwv4cbjygpqk","_id":"cksfp8m3f000fcwv4feyya0wd"},{"post_id":"clb5vbljv0000h4v4f2e996ln","category_id":"clb5vg2fh00002gv4e76h5as0","_id":"clb5vg2fm00032gv4e0edg1di"}],"PostTag":[{"post_id":"cksfi3i630000cwv44zmq9um3","tag_id":"cksfog68k0001cwv4gw5t8jjc","_id":"cksfog68p0002cwv44jel8m77"},{"post_id":"ckrx47cas0000e4v41dwo1v6z","tag_id":"cksfp8f80000acwv429ydaskp","_id":"cksfp8f83000ccwv47betfh79"},{"post_id":"ckrx47cas0000e4v41dwo1v6z","tag_id":"cksfp8f82000bcwv46j99gm15","_id":"cksfp8f83000dcwv43dmogdjy"},{"post_id":"cksh36rqi0000skv4duyzh6ll","tag_id":"cksfog68k0001cwv4gw5t8jjc","_id":"cksh37dw80001skv4e8g95q2t"},{"post_id":"cksily6tr0000ccv46d7idate","tag_id":"cksfog68k0001cwv4gw5t8jjc","_id":"cksily6tx0002ccv40oxx20zs"},{"post_id":"cksily6tv0001ccv4cy5i9qgb","tag_id":"cksfog68k0001cwv4gw5t8jjc","_id":"cksiqdav40000vgv48ye0h4s1"},{"post_id":"ckt3y8ggz000088v4fy1ebgm9","tag_id":"cktb8nfvn00005sv4d5s78jdk","_id":"cktb8nfvr00015sv42gl7doar"},{"post_id":"clb4qsblq00001wv4hcd42pkh","tag_id":"cksfog68k0001cwv4gw5t8jjc","_id":"clb4qsbm100011wv4d2qz40lv"},{"post_id":"clb4qsbmd00021wv41kxm84q1","tag_id":"clb4qsbmk00031wv4231k7rn6","_id":"clb4qsbmp00041wv4b5z9a3wt"},{"post_id":"ckuyz81wd0000aov43cw84zll","tag_id":"cksfog68k0001cwv4gw5t8jjc","_id":"clb4qsbn000051wv4bzvn8pz3"},{"post_id":"clb5vbljv0000h4v4f2e996ln","tag_id":"clb5vg2fl00012gv4ed1x9ozt","_id":"clb5vg2fm00022gv4etu96px6"}],"Tag":[{"name":"hexo-theme-snail","_id":"ckrnbizss0007skv4fabv0vuh"},{"name":"设计模式","_id":"cksfog68k0001cwv4gw5t8jjc"},{"name":"webpack  性能优化","_id":"cksfoh3bj0003cwv46ni7drja"},{"name":"webpack,性能优化","_id":"cksfoji5t0005cwv43t5901oa"},{"name":"webpack|性能优化","_id":"cksfok2ad0007cwv46b43e440"},{"name":"webpack","_id":"cksfp8f80000acwv429ydaskp"},{"name":"性能优化","_id":"cksfp8f82000bcwv46j99gm15"},{"name":"框架","_id":"cktb8nfvn00005sv4d5s78jdk"},{"name":"算法","_id":"clb4qsbmk00031wv4231k7rn6"},{"name":"vue3","_id":"clb5vg2fl00012gv4ed1x9ozt"}]}}